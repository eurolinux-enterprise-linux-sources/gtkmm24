<root>
<function name="gdk_add_client_message_filter">
<description>
Adds a filter to the default display to be called when X ClientMessage events
are received. See gdk_display_add_client_message_filter().

</description>
<parameters>
<parameter name="message_type">
<parameter_description> the type of ClientMessage events to receive. This will be
checked against the &lt;structfield&gt;message_type&lt;/structfield&gt; field of the
XClientMessage event struct.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call to process the event.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to @func. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_add_option_entries_libgtk_only">
<description>
Appends gdk option entries to the passed in option group. This is
not public API and must not be used by applications.

</description>
<parameters>
<parameter name="group">
<parameter_description> An option group.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_app_launch_context_new">
<description>
Creates a new #GdkAppLaunchContext.

Since: 2.14

</description>
<parameters>
</parameters>
<return> a new #GdkAppLaunchContext

</return>
</function>

<function name="gdk_app_launch_context_set_desktop">
<description>
Sets the workspace on which applications will be launched when
using this context when running under a window manager that 
supports multiple workspaces, as described in the 
&lt;ulink url=&quot;http://www.freedesktop.org/Standards/wm-spec&quot;&gt;Extended 
Window Manager Hints&lt;/ulink&gt;. 

When the workspace is not specified or @desktop is set to -1, 
it is up to the window manager to pick one, typically it will
be the current workspace.

Since: 2.14

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkAppLaunchContext
</parameter_description>
</parameter>
<parameter name="desktop">
<parameter_description> the number of a workspace, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_app_launch_context_set_display">
<description>
Sets the display on which applications will be launched when
using this context. See also gdk_app_launch_context_set_screen().

Since: 2.14

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkAppLaunchContext
</parameter_description>
</parameter>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_app_launch_context_set_icon">
<description>
Sets the icon for applications that are launched with this
context.

Window Managers can use this information when displaying startup
notification.

See also gdk_app_launch_context_set_icon_name().

Since: 2.14

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkAppLaunchContext
</parameter_description>
</parameter>
<parameter name="icon">
<parameter_description> a #GIcon, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_app_launch_context_set_icon_name">
<description>
Sets the icon for applications that are launched with this context. 
The @icon_name will be interpreted in the same way as the Icon field 
in desktop files. See also gdk_app_launch_context_set_icon(). 

If both @icon and @icon_name are set, the @icon_name takes priority.
If neither @icon or @icon_name is set, the icon is taken from either 
the file that is passed to launched application or from the #GAppInfo 
for the launched application itself.

Since: 2.14

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkAppLaunchContext
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> an icon name, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_app_launch_context_set_screen">
<description>
Sets the screen on which applications will be launched when
using this context. See also gdk_app_launch_context_set_display().

If both @screen and @display are set, the @screen takes priority.
If neither @screen or @display are set, the default screen and
display are used.

Since: 2.14

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkAppLaunchContext
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_app_launch_context_set_timestamp">
<description>
Sets the timestamp of @context. The timestamp should ideally
be taken from the event that triggered the launch. 

Window managers can use this information to avoid moving the
focus to the newly launched application when the user is busy
typing in another window. This is also known as 'focus stealing
prevention'.

Since: 2.14

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkAppLaunchContext
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> a timestamp
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_atom_intern_static_string">
<description>
Finds or creates an atom corresponding to a given string.

Note that this function is identical to gdk_atom_intern() except
that if a new #GdkAtom is created the string itself is used rather 
than a copy. This saves memory, but can only be used if the string 
will &lt;emphasis&gt;always&lt;/emphasis&gt; exist. It can be used with statically
allocated strings in the main program, but not with statically 
allocated memory in dynamically loaded modules, if you expect to
ever unload the module again (e.g. do not use this function in
GTK+ theme engines).

Since: 2.10

</description>
<parameters>
<parameter name="atom_name">
<parameter_description> a static string
</parameter_description>
</parameter>
</parameters>
<return> the atom corresponding to @atom_name

</return>
</function>

<function name="gdk_beep">
<description>
Emits a short beep on the default display.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_create">
<description>
Creates a Cairo context for drawing to @drawable.

&lt;note&gt;&lt;para&gt;
Note that due to double-buffering, Cairo contexts created 
in a GTK+ expose event handler cannot be cached and reused 
between different expose events. 
&lt;/para&gt;&lt;/note&gt;

Since: 2.8

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return> A newly created Cairo context. Free with
cairo_destroy() when you are done drawing.

</return>
</function>

<function name="gdk_cairo_rectangle">
<description>
Adds the given rectangle to the current path of @cr.

Since: 2.8

</description>
<parameters>
<parameter name="cr">
<parameter_description> a #cairo_t
</parameter_description>
</parameter>
<parameter name="rectangle">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_region">
<description>
Adds the given region to the current path of @cr.

Since: 2.8

</description>
<parameters>
<parameter name="cr">
<parameter_description> a #cairo_t
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_reset_clip">
<description>
Resets the clip region for a Cairo context created by gdk_cairo_create().

This resets the clip region to the &quot;empty&quot; state for the given drawable.
This is required for non-native windows since a direct call to
cairo_reset_clip() would unset the clip region inherited from the
drawable (i.e. the window clip region), and thus let you e.g.
draw outside your window.

This is rarely needed though, since most code just create a new cairo_t
using gdk_cairo_create() each time they want to draw something.

Since: 2.18

</description>
<parameters>
<parameter name="cr">
<parameter_description> a #cairo_t
</parameter_description>
</parameter>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_set_source_color">
<description>
Sets the specified #GdkColor as the source color of @cr.

Since: 2.8

</description>
<parameters>
<parameter name="cr">
<parameter_description> a #cairo_t
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #GdkColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_set_source_pixbuf">
<description>
Sets the given pixbuf as the source pattern for the Cairo context.
The pattern has an extend mode of %CAIRO_EXTEND_NONE and is aligned
so that the origin of @pixbuf is @pixbuf_x, @pixbuf_y

Since: 2.8

</description>
<parameters>
<parameter name="cr">
<parameter_description> a #Cairo context
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="pixbuf_x">
<parameter_description> X coordinate of location to place upper left corner of @pixbuf
</parameter_description>
</parameter>
<parameter name="pixbuf_y">
<parameter_description> Y coordinate of location to place upper left corner of @pixbuf
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_set_source_pixmap">
<description>
Sets the given pixmap as the source pattern for the Cairo context.
The pattern has an extend mode of %CAIRO_EXTEND_NONE and is aligned
so that the origin of @pixmap is @pixmap_x, @pixmap_y

Since: 2.10

Deprecated: 2.24: This function is being removed in GTK+ 3 (together
with #GdkPixmap). Instead, use gdk_cairo_set_source_window() where
appropriate.

</description>
<parameters>
<parameter name="cr">
<parameter_description> a #Cairo context
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> a #GdkPixmap
</parameter_description>
</parameter>
<parameter name="pixmap_x">
<parameter_description> X coordinate of location to place upper left corner of @pixmap
</parameter_description>
</parameter>
<parameter name="pixmap_y">
<parameter_description> Y coordinate of location to place upper left corner of @pixmap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_set_source_window">
<description>
Sets the given window as the source pattern for the Cairo context.
The pattern has an extend mode of %CAIRO_EXTEND_NONE and is aligned
so that the origin of @window is @x, @y. The window contains all its
subwindows when rendering.

Note that the contents of @window are undefined outside of the
visible part of @window, so use this function with care.

Since: 2.24

</description>
<parameters>
<parameter name="cr">
<parameter_description> a #Cairo context
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of location to place upper left corner of @window
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of location to place upper left corner of @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_char_height">
<description>
Determines the total height of a given character.
This value is not generally useful, because you cannot
determine how this total height will be drawn in
relation to the baseline. See gdk_text_extents().

Deprecated: 2.2: Use gdk_text_extents() instead.

</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="character">
<parameter_description> the character to measure.
</parameter_description>
</parameter>
</parameters>
<return> the height of the character in pixels.

</return>
</function>

<function name="gdk_char_measure">
<description>
Determines the distance from the origin to the rightmost
portion of a character when drawn. This is not the
correct value for determining the origin of the next
portion when drawing text in multiple pieces. 


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="character">
<parameter_description> the character to measure.
</parameter_description>
</parameter>
</parameters>
<return> the right bearing of the character in pixels.
</return>
</function>

<function name="gdk_char_width">
<description>
Determines the width of a given character.

Deprecated: 2.2: Use gdk_text_extents() instead.

</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="character">
<parameter_description> the character to measure.
</parameter_description>
</parameter>
</parameters>
<return> the width of the character in pixels.

</return>
</function>

<function name="gdk_char_width_wc">
<description>
Determines the width of a given wide character. (Encoded
in the wide-character encoding of the current locale).


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="character">
<parameter_description> the character to measure.
</parameter_description>
</parameter>
</parameters>
<return> the width of the character in pixels.
</return>
</function>

<function name="gdk_color_alloc">
<description>
Allocates a single color from a colormap.

Deprecated: 2.2: Use gdk_colormap_alloc_color() instead.

</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> The color to allocate. On return, the 
&lt;structfield&gt;pixel&lt;/structfield&gt; field will be filled in.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the allocation succeeded.

</return>
</function>

<function name="gdk_color_black">
<description>
Returns the black color for a given colormap. The resulting
value has already been allocated. 


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the location to store the color.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the allocation succeeded.
</return>
</function>

<function name="gdk_color_change">
<description>
Changes the value of a color that has already
been allocated. If @colormap is not a private
colormap, then the color must have been allocated
using gdk_colormap_alloc_colors() with the 
@writeable set to %TRUE.


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #GdkColor, with the color to change
in the &lt;structfield&gt;pixel&lt;/structfield&gt; field,
and the new value in the remaining fields.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the color was successfully changed.
</return>
</function>

<function name="gdk_color_copy">
<description>
Makes a copy of a color structure. The result
must be freed using gdk_color_free().


</description>
<parameters>
<parameter name="color">
<parameter_description> a #GdkColor.
</parameter_description>
</parameter>
</parameters>
<return> a copy of @color.
</return>
</function>

<function name="gdk_color_equal">
<description>
Compares two colors. 


</description>
<parameters>
<parameter name="colora">
<parameter_description> a #GdkColor.
</parameter_description>
</parameter>
<parameter name="colorb">
<parameter_description> another #GdkColor.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two colors compare equal
</return>
</function>

<function name="gdk_color_free">
<description>
Frees a color structure created with 
gdk_color_copy().

</description>
<parameters>
<parameter name="color">
<parameter_description> a #GdkColor.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_color_hash">
<description>
A hash function suitable for using for a hash
table that stores #GdkColor's.


</description>
<parameters>
<parameter name="colora">
<parameter_description> a #GdkColor.
</parameter_description>
</parameter>
</parameters>
<return> The hash function applied to @colora
</return>
</function>

<function name="gdk_color_parse">
<description>
Parses a textual specification of a color and fill in the
&lt;structfield&gt;red&lt;/structfield&gt;, &lt;structfield&gt;green&lt;/structfield&gt;,
and &lt;structfield&gt;blue&lt;/structfield&gt; fields of a #GdkColor
structure. The color is &lt;emphasis&gt;not&lt;/emphasis&gt; allocated, you
must call gdk_colormap_alloc_color() yourself. The string can
either one of a large set of standard names. (Taken from the X11
&lt;filename&gt;rgb.txt&lt;/filename&gt; file), or it can be a hex value in the
form '&#35;rgb' '&#35;rrggbb' '&#35;rrrgggbbb' or
'&#35;rrrrggggbbbb' where 'r', 'g' and 'b' are hex digits of the
red, green, and blue components of the color, respectively. (White
in the four forms is '&#35;fff' '&#35;ffffff' '&#35;fffffffff' and
'&#35;ffffffffffff')


</description>
<parameters>
<parameter name="spec">
<parameter_description> the string specifying the color.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the #GdkColor to fill in
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing succeeded.
</return>
</function>

<function name="gdk_color_to_string">
<description>
Returns a textual specification of @color in the hexadecimal form
&lt;literal&gt;&#35;rrrrggggbbbb&lt;/literal&gt;, where &lt;literal&gt;r&lt;/literal&gt;,
&lt;literal&gt;g&lt;/literal&gt; and &lt;literal&gt;b&lt;/literal&gt; are hex digits
representing the red, green and blue components respectively.

Since: 2.12

</description>
<parameters>
<parameter name="color">
<parameter_description> a #GdkColor
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated text string

</return>
</function>

<function name="gdk_color_white">
<description>
Returns the white color for a given colormap. The resulting
value has already allocated been allocated. 


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the location to store the color.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the allocation succeeded.
</return>
</function>

<function name="gdk_colormap_alloc_color">
<description>
Allocates a single color from a colormap.


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to allocate. On return the
&lt;structfield&gt;pixel&lt;/structfield&gt; field will be
filled in if allocation succeeds.
</parameter_description>
</parameter>
<parameter name="writeable">
<parameter_description> If %TRUE, the color is allocated writeable
(their values can later be changed using gdk_color_change()).
Writeable colors cannot be shared between applications.
</parameter_description>
</parameter>
<parameter name="best_match">
<parameter_description> If %TRUE, GDK will attempt to do matching against
existing colors if the color cannot be allocated as requested.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the allocation succeeded.
</return>
</function>

<function name="gdk_colormap_alloc_colors">
<description>
Allocates colors from a colormap.


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="colors">
<parameter_description> The color values to allocate. On return, the pixel
values for allocated colors will be filled in.
</parameter_description>
</parameter>
<parameter name="n_colors">
<parameter_description> The number of colors in @colors.
</parameter_description>
</parameter>
<parameter name="writeable">
<parameter_description> If %TRUE, the colors are allocated writeable
(their values can later be changed using gdk_color_change()).
Writeable colors cannot be shared between applications.
</parameter_description>
</parameter>
<parameter name="best_match">
<parameter_description> If %TRUE, GDK will attempt to do matching against
existing colors if the colors cannot be allocated as requested.
</parameter_description>
</parameter>
<parameter name="success">
<parameter_description> An array of length @ncolors. On return, this
indicates whether the corresponding color in @colors was
successfully allocated or not.
</parameter_description>
</parameter>
</parameters>
<return> The number of colors that were not successfully 
allocated.
</return>
</function>

<function name="gdk_colormap_change">
<description>
Changes the value of the first @ncolors in a private colormap
to match the values in the &lt;structfield&gt;colors&lt;/structfield&gt;
array in the colormap. This function is obsolete and
should not be used. See gdk_color_change().

</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="ncolors">
<parameter_description> the number of colors to change.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_colormap_free_colors">
<description>
Frees previously allocated colors.

</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="colors">
<parameter_description> the colors to free.
</parameter_description>
</parameter>
<parameter name="n_colors">
<parameter_description> the number of colors in @colors.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_colormap_get_screen">
<description>
Gets the screen for which this colormap was created.

Since: 2.2

</description>
<parameters>
<parameter name="cmap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return> the screen for which this colormap was created.

</return>
</function>

<function name="gdk_colormap_get_system">
<description>
Gets the system's default colormap for the default screen. (See
gdk_colormap_get_system_for_screen ())


</description>
<parameters>
</parameters>
<return> the default colormap.
</return>
</function>

<function name="gdk_colormap_get_system_size">
<description>
Returns the size of the system's default colormap.
(See the description of struct #GdkColormap for an
explanation of the size of a colormap.)


</description>
<parameters>
</parameters>
<return> the size of the system's default colormap.
</return>
</function>

<function name="gdk_colormap_get_visual">
<description>
Returns the visual for which a given colormap was created.


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
</parameters>
<return> the visual of the colormap.
</return>
</function>

<function name="gdk_colormap_new">
<description>
Creates a new colormap for the given visual.


</description>
<parameters>
<parameter name="visual">
<parameter_description> a #GdkVisual.
</parameter_description>
</parameter>
<parameter name="allocate">
<parameter_description> if %TRUE, the newly created colormap will be
a private colormap, and all colors in it will be
allocated for the applications use.
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkColormap.
</return>
</function>

<function name="gdk_colormap_query_color">
<description>
Locates the RGB color in @colormap corresponding to the given
hardware pixel @pixel. @pixel must be a valid pixel in the
colormap; it's a programmer error to call this function with a
pixel which is not in the colormap. Hardware pixels are normally
obtained from gdk_colormap_alloc_colors(), or from a #GdkImage. (A
#GdkImage contains image data in hardware format, a #GdkPixbuf
contains image data in a canonical 24-bit RGB format.)

This function is rarely useful; it's used for example to
implement the eyedropper feature in #GtkColorSelection.


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
<parameter name="pixel">
<parameter_description> pixel value in hardware display format
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> #GdkColor with red, green, blue fields initialized
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_colormap_ref">
<description>
Deprecated function; use g_object_ref() instead.

Deprecated: 2.0: Use g_object_ref() instead.

</description>
<parameters>
<parameter name="cmap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return> the colormap

</return>
</function>

<function name="gdk_colormap_unref">
<description>
Deprecated function; use g_object_unref() instead.

Deprecated: 2.0: Use g_object_unref() instead.

</description>
<parameters>
<parameter name="cmap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_colors_alloc">
<description>
Allocates colors from a colormap. This function
is obsolete. See gdk_colormap_alloc_colors().
For full documentation of the fields, see 
the Xlib documentation for &lt;function&gt;XAllocColorCells()&lt;/function&gt;.


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="contiguous">
<parameter_description> if %TRUE, the colors should be allocated
in contiguous color cells.
</parameter_description>
</parameter>
<parameter name="planes">
<parameter_description> an array in which to store the plane masks.
</parameter_description>
</parameter>
<parameter name="nplanes">
<parameter_description> the number of planes to allocate. (Or zero,
to indicate that the color allocation should not be planar.)
</parameter_description>
</parameter>
<parameter name="pixels">
<parameter_description> an array into which to store allocated pixel values.
</parameter_description>
</parameter>
<parameter name="npixels">
<parameter_description> the number of pixels in each plane to allocate.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the allocation was successful
</return>
</function>

<function name="gdk_colors_free">
<description>
Frees colors allocated with gdk_colors_alloc(). This
function is obsolete. See gdk_colormap_free_colors().

</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="pixels">
<parameter_description> the pixel values of the colors to free.
</parameter_description>
</parameter>
<parameter name="npixels">
<parameter_description> the number of values in @pixels.
</parameter_description>
</parameter>
<parameter name="planes">
<parameter_description> the plane masks for all planes to free, OR'd together.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_colors_store">
<description>
Changes the value of the first @ncolors colors in
a private colormap. This function is obsolete and
should not be used. See gdk_color_change().

</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="colors">
<parameter_description> the new color values.
</parameter_description>
</parameter>
<parameter name="ncolors">
<parameter_description> the number of colors to change.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cursor_get_cursor_type">
<description>
Returns the cursor type for this cursor.

Since: 2.22

</description>
<parameters>
<parameter name="cursor">
<parameter_description>  a #GdkCursor
</parameter_description>
</parameter>
</parameters>
<return> a #GdkCursorType

</return>
</function>

<function name="gdk_cursor_get_display">
<description>
Returns the display on which the #GdkCursor is defined.

Since: 2.2

</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDisplay associated to @cursor

</return>
</function>

<function name="gdk_cursor_get_image">
<description>
Returns a #GdkPixbuf with the image used to display the cursor.

Note that depending on the capabilities of the windowing system and 
on the cursor, GDK may not be able to obtain the image data. In this 
case, %NULL is returned.

Since: 2.8

</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor
</parameter_description>
</parameter>
</parameters>
<return> a #GdkPixbuf representing @cursor, or %NULL

</return>
</function>

<function name="gdk_cursor_new">
<description>
Creates a new cursor from the set of builtin cursors for the default display.
See gdk_cursor_new_for_display().

To make the cursor invisible, use %GDK_BLANK_CURSOR.


</description>
<parameters>
<parameter name="cursor_type">
<parameter_description> cursor to create
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkCursor
</return>
</function>

<function name="gdk_cursor_new_for_display">
<description>
Creates a new cursor from the set of builtin cursors.
Some useful ones are:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;right_ptr.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_RIGHT_PTR (right-facing arrow)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;crosshair.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_CROSSHAIR (crosshair)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;xterm.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_XTERM (I-beam)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;watch.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_WATCH (busy)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;fleur.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_FLEUR (for moving objects)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;hand1.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_HAND1 (a right-pointing hand)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;hand2.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_HAND2 (a left-pointing hand)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;left_side.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_LEFT_SIDE (resize left side)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;right_side.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_RIGHT_SIDE (resize right side)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;top_left_corner.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_TOP_LEFT_CORNER (resize northwest corner)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;top_right_corner.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_TOP_RIGHT_CORNER (resize northeast corner)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;bottom_left_corner.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_BOTTOM_LEFT_CORNER (resize southwest corner)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;bottom_right_corner.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_BOTTOM_RIGHT_CORNER (resize southeast corner)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;top_side.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_TOP_SIDE (resize top side)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;bottom_side.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_BOTTOM_SIDE (resize bottom side)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;sb_h_double_arrow.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_SB_H_DOUBLE_ARROW (move vertical splitter)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;sb_v_double_arrow.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_SB_V_DOUBLE_ARROW (move horizontal splitter)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
#GDK_BLANK_CURSOR (Blank cursor). Since 2.16
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay for which the cursor will be created
</parameter_description>
</parameter>
<parameter name="cursor_type">
<parameter_description> cursor to create
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkCursor

</return>
</function>

<function name="gdk_cursor_new_from_name">
<description>
Creates a new cursor by looking up @name in the current cursor
theme. 

Since: 2.8

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay for which the cursor will be created
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the cursor
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkCursor, or %NULL if there is no cursor with 
the given name 

</return>
</function>

<function name="gdk_cursor_new_from_pixbuf">
<description>
Creates a new cursor from a pixbuf. 

Not all GDK backends support RGBA cursors. If they are not 
supported, a monochrome approximation will be displayed. 
The functions gdk_display_supports_cursor_alpha() and 
gdk_display_supports_cursor_color() can be used to determine
whether RGBA cursors are supported; 
gdk_display_get_default_cursor_size() and 
gdk_display_get_maximal_cursor_size() give information about 
cursor sizes.

If @x or @y are &lt;literal&gt;-1&lt;/literal&gt;, the pixbuf must have
options named &quot;x_hot&quot; and &quot;y_hot&quot;, resp., containing
integer values between %0 and the width resp. height of
the pixbuf. (Since: 3.0)

On the X backend, support for RGBA cursors requires a
sufficently new version of the X Render extension. 

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay for which the cursor will be created
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> the #GdkPixbuf containing the cursor image
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the horizontal offset of the 'hotspot' of the cursor. 
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the vertical offset of the 'hotspot' of the cursor.
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkCursor.

</return>
</function>

<function name="gdk_cursor_new_from_pixmap">
<description>
Creates a new cursor from a given pixmap and mask. Both the pixmap and mask
must have a depth of 1 (i.e. each pixel has only 2 values - on or off).
The standard cursor size is 16 by 16 pixels. You can create a bitmap 
from inline data as in the below example.

&lt;example&gt;&lt;title&gt;Creating a custom cursor&lt;/title&gt;
&lt;programlisting&gt;
/&lt;!-- --&gt;* This data is in X bitmap format, and can be created with the 'bitmap'
utility. *&lt;!-- --&gt;/
&#35;define cursor1_width 16
&#35;define cursor1_height 16
static unsigned char cursor1_bits[] = {
0x80, 0x01, 0x40, 0x02, 0x20, 0x04, 0x10, 0x08, 0x08, 0x10, 0x04, 0x20,
0x82, 0x41, 0x41, 0x82, 0x41, 0x82, 0x82, 0x41, 0x04, 0x20, 0x08, 0x10,
0x10, 0x08, 0x20, 0x04, 0x40, 0x02, 0x80, 0x01};

static unsigned char cursor1mask_bits[] = {
0x80, 0x01, 0xc0, 0x03, 0x60, 0x06, 0x30, 0x0c, 0x18, 0x18, 0x8c, 0x31,
0xc6, 0x63, 0x63, 0xc6, 0x63, 0xc6, 0xc6, 0x63, 0x8c, 0x31, 0x18, 0x18,
0x30, 0x0c, 0x60, 0x06, 0xc0, 0x03, 0x80, 0x01};


GdkCursor *cursor;
GdkPixmap *source, *mask;
GdkColor fg = { 0, 65535, 0, 0 }; /&lt;!-- --&gt;* Red. *&lt;!-- --&gt;/
GdkColor bg = { 0, 0, 0, 65535 }; /&lt;!-- --&gt;* Blue. *&lt;!-- --&gt;/


source = gdk_bitmap_create_from_data (NULL, cursor1_bits,
cursor1_width, cursor1_height);
mask = gdk_bitmap_create_from_data (NULL, cursor1mask_bits,
cursor1_width, cursor1_height);
cursor = gdk_cursor_new_from_pixmap (source, mask, &amp;fg, &amp;bg, 8, 8);
g_object_unref (source);
g_object_unref (mask);


gdk_window_set_cursor (widget-&gt;window, cursor);
&lt;/programlisting&gt;
&lt;/example&gt;


</description>
<parameters>
<parameter name="source">
<parameter_description> the pixmap specifying the cursor.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> the pixmap specifying the mask, which must be the same size as 
@source.
</parameter_description>
</parameter>
<parameter name="fg">
<parameter_description> the foreground color, used for the bits in the source which are 1.
The color does not have to be allocated first. 
</parameter_description>
</parameter>
<parameter name="bg">
<parameter_description> the background color, used for the bits in the source which are 0.
The color does not have to be allocated first.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the horizontal offset of the 'hotspot' of the cursor. 
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the vertical offset of the 'hotspot' of the cursor.
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkCursor.
</return>
</function>

<function name="gdk_cursor_ref">
<description>
Adds a reference to @cursor.


</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor
</parameter_description>
</parameter>
</parameters>
<return> Same @cursor that was passed in
</return>
</function>

<function name="gdk_cursor_unref">
<description>
Removes a reference from @cursor, deallocating the cursor
if no references remain.


</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_free_history">
<description>
Frees an array of #GdkTimeCoord that was returned by gdk_device_get_history().

</description>
<parameters>
<parameter name="events">
<parameter_description> an array of #GdkTimeCoord.
</parameter_description>
</parameter>
<parameter name="n_events">
<parameter_description> the length of the array.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_get_axis">
<description>
Interprets an array of double as axis values for a given device,
and locates the value in the array for a given axis use.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
<parameter name="axes">
<parameter_description> pointer to an array of axes
</parameter_description>
</parameter>
<parameter name="use">
<parameter_description> the use to look for
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the found value.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the given axis use was found, otherwise %FALSE
</return>
</function>

<function name="gdk_device_get_axis_use">
<description>
Returns the axis use for @index.

Since: 2.22

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice.
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> the index of the axis.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkAxisUse specifying how the axis is used.

</return>
</function>

<function name="gdk_device_get_core_pointer">
<description>
Returns the core pointer device for the default display.


</description>
<parameters>
</parameters>
<return> the core pointer device; this is owned by the
display and should not be freed.
</return>
</function>

<function name="gdk_device_get_has_cursor">
<description>
Determines whether the pointer follows device motion.

Since: 2.22

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the pointer follows device motion

</return>
</function>

<function name="gdk_device_get_history">
<description>
Obtains the motion history for a device; given a starting and
ending timestamp, return all events in the motion history for
the device in the given range of time. Some windowing systems
do not support motion history, in which case, %FALSE will
be returned. (This is not distinguishable from the case where
motion history is supported and no events were found.)


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> the window with respect to which which the event coordinates will be reported
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> starting timestamp for range of events to return
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> ending timestamp for the range of events to return
</parameter_description>
</parameter>
<parameter name="events">
<parameter_description> location to store a newly-allocated array of #GdkTimeCoord, or %NULL
</parameter_description>
</parameter>
<parameter name="n_events">
<parameter_description> location to store the length of @events, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the windowing system supports motion history and
at least one event was found.
</return>
</function>

<function name="gdk_device_get_key">
<description>
If @index has a valid keyval, this function will
fill in @keyval and @modifiers with the keyval settings.

Since: 2.22

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice.
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> the index of the macro button to get.
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> return value for the keyval.
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> return value for modifiers.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_get_mode">
<description>
Determines the mode of the device.

Since: 2.22

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> a #GdkInputSource

</return>
</function>

<function name="gdk_device_get_n_axes">
<description>
Gets the number of axes of a device.

Since: 2.22

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice.
</parameter_description>
</parameter>
</parameters>
<return> the number of axes of @device

</return>
</function>

<function name="gdk_device_get_n_keys">
<description>
Gets the number of keys of a device.

Since: 2.24

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice.
</parameter_description>
</parameter>
</parameters>
<return> the number of keys of @device

</return>
</function>

<function name="gdk_device_get_name">
<description>
Determines the name of the device.

Since: 2.22

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> a name

</return>
</function>

<function name="gdk_device_get_source">
<description>
Determines the type of the device.

Since: 2.22

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> a #GdkInputSource

</return>
</function>

<function name="gdk_device_get_state">
<description>
Gets the current state of a device.

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice.
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow.
</parameter_description>
</parameter>
<parameter name="axes">
<parameter_description> an array of doubles to store the values of the axes of @device in,
or %NULL.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> location to store the modifiers, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_devices_list">
<description>
Returns the list of available input devices for the default display.
The list is statically allocated and should not be freed.


</description>
<parameters>
</parameters>
<return> a list of #GdkDevice
</return>
</function>

<function name="gdk_directfb_visual_by_format">
<description>
This function is specific to the DirectFB backend. It allows
to specify a GdkVisual by @pixel_format.

At startup, only those visuals that can be blitted
hardware-accelerated are registered.  By using
gdk_directfb_visual_by_format() you can retrieve visuals that
don't match this criteria since this function will try to create
a new visual for the desired @pixel_format for you.


</description>
<parameters>
<parameter name="pixel_format">
<parameter_description> the pixel_format of the requested visual
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the GdkVisual or %NULL if the
pixel_format is unsupported.
</return>
</function>

<function name="gdk_display_add_client_message_filter">
<description>
Adds a filter to be called when X ClientMessage events are received.
See gdk_window_add_filter() if you are interested in filtering other
types of events.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay for which this message filter applies
</parameter_description>
</parameter>
<parameter name="message_type">
<parameter_description> the type of ClientMessage events to receive.
This will be checked against the @message_type field 
of the XClientMessage event struct.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call to process the event.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to @func.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_beep">
<description>
Emits a short beep on @display

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_close">
<description>
Closes the connection to the windowing system for the given display,
and cleans up associated resources.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_flush">
<description>
Flushes any requests queued for the windowing system; this happens automatically
when the main loop blocks waiting for new events, but if your application
is drawing without returning control to the main loop, you may need
to call this function explicitely. A common case where this function
needs to be called is when an application is executing drawing commands
from a thread other than the thread where the main loop is running.

This is most useful for X11. On windowing systems where requests are
handled synchronously, this function will do nothing.

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_get_core_pointer">
<description>
Returns the core pointer device for the given display

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the core pointer device; this is owned by the
display and should not be freed.

</return>
</function>

<function name="gdk_display_get_default">
<description>
Gets the default #GdkDisplay. This is a convenience
function for
&lt;literal&gt;gdk_display_manager_get_default_display (gdk_display_manager_get ())&lt;/literal&gt;.

Since: 2.2

</description>
<parameters>
</parameters>
<return> a #GdkDisplay, or %NULL if there is no default
display.

</return>
</function>

<function name="gdk_display_get_default_cursor_size">
<description>
Returns the default size to use for cursors on @display.

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the default cursor size.

</return>
</function>

<function name="gdk_display_get_default_group">
<description>
Returns the default group leader window for all toplevel windows
on @display. This window is implicitly created by GDK. 
See gdk_window_set_group().

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> The default group leader window for @display

</return>
</function>

<function name="gdk_display_get_default_screen">
<description>
Get the default #GdkScreen for @display.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the default #GdkScreen object for @display

</return>
</function>

<function name="gdk_display_get_event">
<description>
Gets the next #GdkEvent to be processed for @display, fetching events from the
windowing system if necessary.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the next #GdkEvent to be processed, or %NULL if no events
are pending. The returned #GdkEvent should be freed with gdk_event_free().

</return>
</function>

<function name="gdk_display_get_maximal_cursor_size">
<description>
Gets the maximal size to use for cursors on @display.

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the return location for the maximal cursor width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the return location for the maximal cursor height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_get_n_screens">
<description>
Gets the number of screen managed by the @display.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> number of screens.

</return>
</function>

<function name="gdk_display_get_name">
<description>
Gets the name of the display.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> a string representing the display name. This string is owned
by GDK and should not be modified or freed.

</return>
</function>

<function name="gdk_display_get_pointer">
<description>
Gets the current location of the pointer and the current modifier
mask for a given display.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> location to store the screen that the
cursor is on, or %NULL.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> location to store root window X coordinate of pointer, or %NULL.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> location to store root window Y coordinate of pointer, or %NULL.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> location to store current modifier mask, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_get_screen">
<description>
Returns a screen object for one of the screens of the display.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="screen_num">
<parameter_description> the screen number
</parameter_description>
</parameter>
</parameters>
<return> the #GdkScreen object

</return>
</function>

<function name="gdk_display_get_window_at_pointer">
<description>
Obtains the window underneath the mouse pointer, returning the location
of the pointer in that window in @win_x, @win_y for @screen. Returns %NULL
if the window under the mouse pointer is not known to GDK (for example, 
belongs to another application).

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="win_x">
<parameter_description> return location for x coordinate of the pointer location relative
to the window origin, or %NULL
</parameter_description>
</parameter>
<parameter name="win_y">
<parameter_description> return location for y coordinate of the pointer location relative
 &amp;    to the window origin, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the window under the mouse pointer, or %NULL

</return>
</function>

<function name="gdk_display_is_closed">
<description>
Finds out if the display has been closed.

Since: 2.22

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the display is closed.

</return>
</function>

<function name="gdk_display_keyboard_ungrab">
<description>
Release any keyboard grab

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> a timestap (e.g #GDK_CURRENT_TIME).
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_list_devices">
<description>
Returns the list of available input devices attached to @display.
The list is statically allocated and should not be freed.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> a list of #GdkDevice

</return>
</function>

<function name="gdk_display_manager_get">
<description>
Gets the singleton #GdkDisplayManager object.

Since: 2.2

</description>
<parameters>
</parameters>
<return> The global #GdkDisplayManager singleton; gdk_parse_pargs(),
gdk_init(), or gdk_init_check() must have been called first.

</return>
</function>

<function name="gdk_display_manager_get_default_display">
<description>
Gets the default #GdkDisplay.

Since: 2.2

</description>
<parameters>
<parameter name="display_manager">
<parameter_description> a #GdkDisplayManager 
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay, or %NULL if there is no default
display.

</return>
</function>

<function name="gdk_display_manager_list_displays">
<description>
List all currently open displays.

Since: 2.2

</description>
<parameters>
<parameter name="display_manager">
<parameter_description> a #GdkDisplayManager 
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated
#GSList of #GdkDisplay objects. Free this list with g_slist_free() when you
are done with it.

</return>
</function>

<function name="gdk_display_manager_set_default_display">
<description>
Sets @display as the default display.

Since: 2.2

</description>
<parameters>
<parameter name="display_manager">
<parameter_description> a #GdkDisplayManager
</parameter_description>
</parameter>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_open">
<description>
Opens a display.

Since: 2.2

</description>
<parameters>
<parameter name="display_name">
<parameter_description> the name of the display to open
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay, or %NULL if the display
could not be opened.
</return>
</function>

<function name="gdk_display_open_default_libgtk_only">
<description>
Opens the default display specified by command line arguments or
environment variables, sets it as the default display, and returns
it.  gdk_parse_args must have been called first. If the default
display has previously been set, simply returns that. An internal
function that should not be used by applications.


</description>
<parameters>
</parameters>
<return> the default display, if it could be opened,
otherwise %NULL.
</return>
</function>

<function name="gdk_display_peek_event">
<description>
Gets a copy of the first #GdkEvent in the @display's event queue, without
removing the event from the queue.  (Note that this function will
not get more events from the windowing system.  It only checks the events
that have already been moved to the GDK event queue.)

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay 
</parameter_description>
</parameter>
</parameters>
<return> a copy of the first #GdkEvent on the event queue, or %NULL 
if no events are in the queue. The returned #GdkEvent should be freed with
gdk_event_free().

</return>
</function>

<function name="gdk_display_pointer_is_grabbed">
<description>
Test if the pointer is grabbed.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if an active X pointer grab is in effect

</return>
</function>

<function name="gdk_display_pointer_ungrab">
<description>
Release any pointer grab.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> a timestap (e.g. %GDK_CURRENT_TIME).
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_put_event">
<description>
Appends a copy of the given event onto the front of the event
queue for @display.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #GdkEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_request_selection_notification">
<description>
Request #GdkEventOwnerChange events for ownership changes
of the selection named by the given atom.

Since: 2.6

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> the #GdkAtom naming the selection for which
ownership change notification is requested
</parameter_description>
</parameter>
</parameters>
<return> whether #GdkEventOwnerChange events will 
be sent.

</return>
</function>

<function name="gdk_display_set_double_click_distance">
<description>
Sets the double click distance (two clicks within this distance
count as a double click and result in a #GDK_2BUTTON_PRESS event).
See also gdk_display_set_double_click_time().
Applications should &lt;emphasis&gt;not&lt;/emphasis&gt; set this, it is a global 
user-configured setting.

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="distance">
<parameter_description> distance in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_set_double_click_time">
<description>
Sets the double click time (two clicks within this time interval
count as a double click and result in a #GDK_2BUTTON_PRESS event).
Applications should &lt;emphasis&gt;not&lt;/emphasis&gt; set this, it is a global 
user-configured setting.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="msec">
<parameter_description> double click time in milliseconds (thousandths of a second) 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_set_pointer_hooks">
<description>
This function allows for hooking into the operation
of getting the current location of the pointer on a particular
display. This is only useful for such low-level tools as an
event recorder. Applications should never have any
reason to use this facility.

Since: 2.2

Deprecated: 2.24: This function will go away in GTK 3 for lack of use cases.

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="new_hooks">
<parameter_description> a table of pointers to functions for getting
quantities related to the current pointer position,
or %NULL to restore the default table.
</parameter_description>
</parameter>
</parameters>
<return> the previous pointer hook table

</return>
</function>

<function name="gdk_display_store_clipboard">
<description>
Issues a request to the clipboard manager to store the
clipboard data. On X11, this is a special program that works
according to the freedesktop clipboard specification, available at
&lt;ulink url=&quot;http://www.freedesktop.org/Standards/clipboard-manager-spec&quot;&gt;
http://www.freedesktop.org/Standards/clipboard-manager-spec&lt;/ulink&gt;.

Since: 2.6

</description>
<parameters>
<parameter name="display">
<parameter_description>          a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="clipboard_window">
<parameter_description> a #GdkWindow belonging to the clipboard owner
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description>            a timestamp
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description>	      an array of targets that should be saved, or %NULL 
if all available targets should be saved.
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description>        length of the @targets array
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_supports_clipboard_persistence">
<description>
Returns whether the speicifed display supports clipboard
persistance; i.e. if it's possible to store the clipboard data after an
application has quit. On X11 this checks if a clipboard daemon is
running.

Since: 2.6

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the display supports clipboard persistance.

</return>
</function>

<function name="gdk_display_supports_composite">
<description>
Returns %TRUE if gdk_window_set_composited() can be used
to redirect drawing on the window using compositing.

Currently this only works on X11 with XComposite and
XDamage extensions available.

Since: 2.12

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if windows may be composited.

</return>
</function>

<function name="gdk_display_supports_cursor_alpha">
<description>
Returns %TRUE if cursors can use an 8bit alpha channel 
on @display. Otherwise, cursors are restricted to bilevel 
alpha (i.e. a mask).

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> whether cursors can have alpha channels.

</return>
</function>

<function name="gdk_display_supports_cursor_color">
<description>
Returns %TRUE if multicolored cursors are supported
on @display. Otherwise, cursors have only a forground
and a background color.

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> whether cursors can have multiple colors.

</return>
</function>

<function name="gdk_display_supports_input_shapes">
<description>
Returns %TRUE if gdk_window_input_shape_combine_mask() can
be used to modify the input shape of windows on @display.

Since: 2.10

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if windows with modified input shape are supported 

</return>
</function>

<function name="gdk_display_supports_selection_notification">
<description>
Returns whether #GdkEventOwnerChange events will be 
sent when the owner of a selection changes.

Since: 2.6

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> whether #GdkEventOwnerChange events will 
be sent.

</return>
</function>

<function name="gdk_display_supports_shapes">
<description>
Returns %TRUE if gdk_window_shape_combine_mask() can
be used to create shaped windows on @display.

Since: 2.10

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if shaped windows are supported 

</return>
</function>

<function name="gdk_display_sync">
<description>
Flushes any requests queued for the windowing system and waits until all
requests have been handled. This is often used for making sure that the
display is synchronized with the current state of the program. Calling
gdk_display_sync() before gdk_error_trap_pop() makes sure that any errors
generated from earlier requests are handled before the error trap is 
removed.

This is most useful for X11. On windowing systems where requests are
handled synchronously, this function will do nothing.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_warp_pointer">
<description>
Warps the pointer of @display to the point @x,@y on 
the screen @screen, unless the pointer is confined
to a window by a grab, in which case it will be moved
as far as allowed by the grab. Warping the pointer 
creates events as if the user had moved the mouse 
instantaneously to the destination.

Note that the pointer should normally be under the
control of the user. This function was added to cover
some rare use cases like keyboard navigation support
for the color picker in the #GtkColorSelectionDialog.

Since: 2.8

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> the screen of @display to warp the pointer to
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of the destination
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of the destination
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_abort">
<description>
Aborts a drag without dropping. 

This function is called by the drag source.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_begin">
<description>
Starts a drag and creates a new drag context for it.

This function is called by the drag source.


</description>
<parameters>
<parameter name="window">
<parameter_description> the source window for this drag.
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> the offered targets,
as list of #GdkAtom&lt;!-- --&gt;s
</parameter_description>
</parameter>
</parameters>
<return> a newly created #GdkDragContext.
</return>
</function>

<function name="gdk_drag_context_get_actions">
<description>
Determines the bitmask of actions proposed by the source if
gdk_drag_context_suggested_action() returns GDK_ACTION_ASK.

Since: 2.22

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDragAction flags

</return>
</function>

<function name="gdk_drag_context_get_dest_window">
<description>
Returns the destination windw for the DND operation.

Since: 2.24

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkWindow

</return>
</function>

<function name="gdk_drag_context_get_protocol">
<description>
Returns the drag protocol thats used by this context.

Since: 2.24

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> the drag protocol

</return>
</function>

<function name="gdk_drag_context_get_selected_action">
<description>
Determines the action chosen by the drag destination.

Since: 2.22

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDragAction value

</return>
</function>

<function name="gdk_drag_context_get_source_window">
<description>
Returns the #GdkWindow where the DND operation started.

Since: 2.22

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkWindow

</return>
</function>

<function name="gdk_drag_context_get_suggested_action">
<description>
Determines the suggested drag action of the context.

Since: 2.22

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDragAction value

</return>
</function>

<function name="gdk_drag_context_list_targets">
<description>
Retrieves the list of targets of the context.

Since: 2.22

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> a #GList of targets

</return>
</function>

<function name="gdk_drag_context_new">
<description>
Creates a new #GdkDragContext.

Deprecated: 2.24: This function is not useful, you always
obtain drag contexts by gdk_drag_begin() or similar.

</description>
<parameters>
</parameters>
<return> the newly created #GdkDragContext.

</return>
</function>

<function name="gdk_drag_context_ref">
<description>
Deprecated function; use g_object_ref() instead.

Deprecated: 2.2: Use g_object_ref() instead.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_context_unref">
<description>
Deprecated function; use g_object_unref() instead.

Deprecated: 2.2: Use g_object_unref() instead.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_drop">
<description>
Drops on the current destination.

This function is called by the drag source.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_drop_succeeded">
<description>
Returns whether the dropped data has been successfully 
transferred. This function is intended to be used while 
handling a %GDK_DROP_FINISHED event, its return value is
meaningless at other times.

Since: 2.6

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the drop was successful.

</return>
</function>

<function name="gdk_drag_find_window">
<description>
Finds the destination window and DND protocol to use at the
given pointer position.

This function is called by the drag source to obtain the 
@dest_window and @protocol parameters for gdk_drag_motion().

Deprecated: 2.24: Use gdk_drag_find_window_for_screen() instead.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
<parameter name="drag_window">
<parameter_description> a window which may be at the pointer position, but
should be ignored, since it is put up by the drag source as an icon.
</parameter_description>
</parameter>
<parameter name="x_root">
<parameter_description> the x position of the pointer in root coordinates.
</parameter_description>
</parameter>
<parameter name="y_root">
<parameter_description> the y position of the pointer in root coordinates.
</parameter_description>
</parameter>
<parameter name="dest_window">
<parameter_description> location to store the destination window in.
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> location to store the DND protocol in.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_find_window_for_screen">
<description>
Finds the destination window and DND protocol to use at the
given pointer position.

This function is called by the drag source to obtain the 
@dest_window and @protocol parameters for gdk_drag_motion().

Since: 2.2

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="drag_window">
<parameter_description> a window which may be at the pointer position, but
should be ignored, since it is put up by the drag source as an icon.
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> the screen where the destination window is sought. 
</parameter_description>
</parameter>
<parameter name="x_root">
<parameter_description> the x position of the pointer in root coordinates.
</parameter_description>
</parameter>
<parameter name="y_root">
<parameter_description> the y position of the pointer in root coordinates.
</parameter_description>
</parameter>
<parameter name="dest_window">
<parameter_description> location to store the destination window in.
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> location to store the DND protocol in.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_get_protocol">
<description>
Finds out the DND protocol supported by a window.

Deprecated: 2.24: Use gdk_drag_get_protocol_for_display() instead

</description>
<parameters>
<parameter name="xid">
<parameter_description> the windowing system id of the destination window.
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> location where the supported DND protocol is returned.
</parameter_description>
</parameter>
</parameters>
<return> the windowing system specific id for the window where
the drop should happen. This may be @xid or the id of a proxy
window, or zero if @xid doesn't support Drag and Drop.

</return>
</function>

<function name="gdk_drag_get_protocol_for_display">
<description>
Finds out the DND protocol supported by a window.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay where the destination window resides
</parameter_description>
</parameter>
<parameter name="xid">
<parameter_description> the windowing system id of the destination window.
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> location where the supported DND protocol is returned.
</parameter_description>
</parameter>
</parameters>
<return> the windowing system id of the window where the drop should happen. This 
may be @xid or the id of a proxy window, or zero if @xid doesn't
support Drag and Drop.
</return>
</function>

<function name="gdk_drag_get_selection">
<description>
Returns the selection atom for the current source window.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
</parameters>
<return> the selection atom.
</return>
</function>

<function name="gdk_drag_motion">
<description>
Updates the drag context when the pointer moves or the 
set of actions changes.

This function is called by the drag source.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
<parameter name="dest_window">
<parameter_description> the new destination window, obtained by 
gdk_drag_find_window().
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> the DND protocol in use, obtained by gdk_drag_find_window().
</parameter_description>
</parameter>
<parameter name="x_root">
<parameter_description> the x position of the pointer in root coordinates.
</parameter_description>
</parameter>
<parameter name="y_root">
<parameter_description> the y position of the pointer in root coordinates.
</parameter_description>
</parameter>
<parameter name="suggested_action">
<parameter_description> the suggested action.
</parameter_description>
</parameter>
<parameter name="possible_actions">
<parameter_description> the possible actions.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation.
</parameter_description>
</parameter>
</parameters>
<return> FIXME
</return>
</function>

<function name="gdk_drag_status">
<description>
Selects one of the actions offered by the drag source.

This function is called by the drag destination in response to
gdk_drag_motion() called by the drag source.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> the selected action which will be taken when a drop happens, 
or 0 to indicate that a drop will not be accepted.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_arc">
<description>
Draws an arc or a filled 'pie slice'. The arc is defined by the bounding
rectangle of the entire ellipse, and the start and end angles of the part 
of the ellipse to be drawn.

Deprecated: 2.22: Use cairo_arc() and cairo_fill() or cairo_stroke()
instead. Note that arcs just like any drawing operation in Cairo are
antialiased unless you call cairo_set_antialias().

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="filled">
<parameter_description> %TRUE if the arc should be filled, producing a 'pie slice'.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of the left edge of the bounding rectangle.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of the top edge of the bounding rectangle.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the bounding rectangle.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the bounding rectangle.
</parameter_description>
</parameter>
<parameter name="angle1">
<parameter_description> the start angle of the arc, relative to the 3 o'clock position,
counter-clockwise, in 1/64ths of a degree.
</parameter_description>
</parameter>
<parameter name="angle2">
<parameter_description> the end angle of the arc, relative to @angle1, in 1/64ths 
of a degree.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_drawable">
<description>
Copies the @width x @height region of @src at coordinates (@xsrc,
@ysrc) to coordinates (@xdest, @ydest) in @drawable.
@width and/or @height may be given as -1, in which case the entire
@src drawable will be copied.

Most fields in @gc are not used for this operation, but notably the
clip mask or clip region will be honored.

The source and destination drawables must have the same visual and
colormap, or errors will result. (On X11, failure to match
visual/colormap results in a BadMatch error from the X server.)
A common cause of this problem is an attempt to draw a bitmap to
a color drawable. The way to draw a bitmap is to set the bitmap as 
the stipple on the #GdkGC, set the fill mode to %GDK_STIPPLED, and 
then draw the rectangle.

Deprecated: 2.22: Use gdk_cairo_set_source_pixmap(), cairo_rectangle()
and cairo_fill() to draw pixmap on top of other drawables. Also keep
in mind that the limitations on allowed sources do not apply to Cairo.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC sharing the drawable's visual and colormap
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> the source #GdkDrawable, which may be the same as @drawable
</parameter_description>
</parameter>
<parameter name="xsrc">
<parameter_description> X position in @src of rectangle to draw
</parameter_description>
</parameter>
<parameter name="ysrc">
<parameter_description> Y position in @src of rectangle to draw
</parameter_description>
</parameter>
<parameter name="xdest">
<parameter_description> X position in @drawable where the rectangle should be drawn
</parameter_description>
</parameter>
<parameter name="ydest">
<parameter_description> Y position in @drawable where the rectangle should be drawn
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of rectangle to draw, or -1 for entire @src width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of rectangle to draw, or -1 for entire @src height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_glyphs">
<description>
This is a low-level function; 99% of text rendering should be done
using gdk_draw_layout() instead.

A glyph is a single image in a font. This function draws a sequence of
glyphs.  To obtain a sequence of glyphs you have to understand a
lot about internationalized text handling, which you don't want to
understand; thus, use gdk_draw_layout() instead of this function,
gdk_draw_layout() handles the details.

Deprecated: 2.22: Use pango_cairo_show_glyphs() instead.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="font">
<parameter_description> font to be used
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of baseline origin
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of baseline origin
</parameter_description>
</parameter>
<parameter name="glyphs">
<parameter_description> the glyph string to draw
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_glyphs_transformed">
<description>
Renders a #PangoGlyphString onto a drawable, possibly
transforming the layed-out coordinates through a transformation
matrix. Note that the transformation matrix for @font is not
changed, so to produce correct rendering results, the @font
must have been loaded using a #PangoContext with an identical
transformation matrix to that passed in to this function.

See also gdk_draw_glyphs(), gdk_draw_layout().

Since: 2.6

Deprecated: 2.22: Use pango_cairo_show_glyphs() instead.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="matrix">
<parameter_description> a #PangoMatrix, or %NULL to use an identity transformation
</parameter_description>
</parameter>
<parameter name="font">
<parameter_description> the font in which to draw the string
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>       the x position of the start of the string (in Pango
units in user space coordinates)
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>       the y position of the baseline (in Pango units
in user space coordinates)
</parameter_description>
</parameter>
<parameter name="glyphs">
<parameter_description>  the glyph string to draw
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_image">
<description>
Draws a #GdkImage onto a drawable.
The depth of the #GdkImage must match the depth of the #GdkDrawable.

Deprecated: 2.22: Do not use #GdkImage anymore, instead use Cairo image
surfaces.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="image">
<parameter_description> the #GdkImage to draw.
</parameter_description>
</parameter>
<parameter name="xsrc">
<parameter_description> the left edge of the source rectangle within @image.
</parameter_description>
</parameter>
<parameter name="ysrc">
<parameter_description> the top of the source rectangle within @image.
</parameter_description>
</parameter>
<parameter name="xdest">
<parameter_description> the x coordinate of the destination within @drawable.
</parameter_description>
</parameter>
<parameter name="ydest">
<parameter_description> the y coordinate of the destination within @drawable.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the area to be copied, or -1 to make the area 
extend to the right edge of @image.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the area to be copied, or -1 to make the area 
extend to the bottom edge of @image.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_layout">
<description>
Render a #PangoLayout onto a GDK drawable

If the layout's #PangoContext has a transformation matrix set, then
@x and @y specify the position of the top left corner of the
bounding box (in device space) of the transformed layout.

If you're using GTK+, the usual way to obtain a #PangoLayout
is gtk_widget_create_pango_layout().

</description>
<parameters>
<parameter name="drawable">
<parameter_description>  the drawable on which to draw string
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description>        base graphics context to use
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>         the X position of the left of the layout (in pixels)
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>         the Y position of the top of the layout (in pixels)
</parameter_description>
</parameter>
<parameter name="layout">
<parameter_description>    a #PangoLayout
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_layout_line">
<description>
Render a #PangoLayoutLine onto an GDK drawable

If the layout's #PangoContext has a transformation matrix set, then
@x and @y specify the position of the left edge of the baseline
(left is in before-tranform user coordinates) in after-transform
device coordinates.

</description>
<parameters>
<parameter name="drawable">
<parameter_description>  the drawable on which to draw the line
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description>        base graphics to use
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>         the x position of start of string (in pixels)
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>         the y position of baseline (in pixels)
</parameter_description>
</parameter>
<parameter name="line">
<parameter_description>      a #PangoLayoutLine
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_layout_line_with_colors">
<description>
Render a #PangoLayoutLine onto a #GdkDrawable, overriding the
layout's normal colors with @foreground and/or @background.
@foreground and @background need not be allocated.

If the layout's #PangoContext has a transformation matrix set, then
@x and @y specify the position of the left edge of the baseline
(left is in before-tranform user coordinates) in after-transform
device coordinates.

</description>
<parameters>
<parameter name="drawable">
<parameter_description>  the drawable on which to draw the line
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description>        base graphics to use
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>         the x position of start of string (in pixels)
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>         the y position of baseline (in pixels)
</parameter_description>
</parameter>
<parameter name="line">
<parameter_description>      a #PangoLayoutLine
</parameter_description>
</parameter>
<parameter name="foreground">
<parameter_description> foreground override color, or %NULL for none
</parameter_description>
</parameter>
<parameter name="background">
<parameter_description> background override color, or %NULL for none
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_layout_with_colors">
<description>
Render a #PangoLayout onto a #GdkDrawable, overriding the
layout's normal colors with @foreground and/or @background.
@foreground and @background need not be allocated.

If the layout's #PangoContext has a transformation matrix set, then
@x and @y specify the position of the top left corner of the
bounding box (in device space) of the transformed layout.

If you're using GTK+, the ususal way to obtain a #PangoLayout
is gtk_widget_create_pango_layout().

</description>
<parameters>
<parameter name="drawable">
<parameter_description>  the drawable on which to draw string
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description>        base graphics context to use
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>         the X position of the left of the layout (in pixels)
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>         the Y position of the top of the layout (in pixels)
</parameter_description>
</parameter>
<parameter name="layout">
<parameter_description>    a #PangoLayout
</parameter_description>
</parameter>
<parameter name="foreground">
<parameter_description> foreground override color, or %NULL for none
</parameter_description>
</parameter>
<parameter name="background">
<parameter_description> background override color, or %NULL for none
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_line">
<description>
Draws a line, using the foreground color and other attributes of 
the #GdkGC.

Deprecated: 2.22: Use cairo_line_to() and cairo_stroke() instead.
Be aware that the default line width in Cairo is 2 pixels and that your
coordinates need to describe the center of the line. To draw a single
pixel wide pixel-aligned line, you would use:
|[cairo_set_line_width (cr, 1.0);
cairo_set_line_cap (cr, CAIRO_LINE_CAP_SQUARE);
cairo_move_to (cr, 0.5, 0.5);
cairo_line_to (cr, 9.5, 0.5);
cairo_stroke (cr);]|
See also &lt;ulink url=&quot;http://cairographics.org/FAQ/#sharp_lines&quot;&gt;the Cairo
FAQ&lt;/ulink&gt; on this topic.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap). 
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="x1_">
<parameter_description> the x coordinate of the start point.
</parameter_description>
</parameter>
<parameter name="y1_">
<parameter_description> the y coordinate of the start point.
</parameter_description>
</parameter>
<parameter name="x2_">
<parameter_description> the x coordinate of the end point.
</parameter_description>
</parameter>
<parameter name="y2_">
<parameter_description> the y coordinate of the end point.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_lines">
<description>
Draws a series of lines connecting the given points.
The way in which joins between lines are draw is determined by the
#GdkCapStyle value in the #GdkGC. This can be set with
gdk_gc_set_line_attributes().

Deprecated: 2.22: Use cairo_line_to() and cairo_stroke() instead. See the
documentation of gdk_draw_line() for notes on line drawing with Cairo.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="points">
<parameter_description> an array of #GdkPoint structures specifying the endpoints of the
</parameter_description>
</parameter>
<parameter name="n_points">
<parameter_description> the size of the @points array.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_pixbuf">
<description>
Renders a rectangular portion of a pixbuf to a drawable.  The destination
drawable must have a colormap. All windows have a colormap, however, pixmaps
only have colormap by default if they were created with a non-%NULL window 
argument. Otherwise a colormap must be set on them with 
gdk_drawable_set_colormap().

On older X servers, rendering pixbufs with an alpha channel involves round 
trips to the X server, and may be somewhat slow.

If GDK is built with the Sun mediaLib library, the gdk_draw_pixbuf
function is accelerated using mediaLib, which provides hardware
acceleration on Intel, AMD, and Sparc chipsets.  If desired, mediaLib
support can be turned off by setting the GDK_DISABLE_MEDIALIB environment
variable.

Since: 2.2

Deprecated: 2.22: Use gdk_cairo_set_source_pixbuf() and cairo_paint() or
cairo_rectangle() and cairo_fill() instead.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> Destination drawable.
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC, used for clipping, or %NULL
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate within pixbuf.
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Source Y coordinates within pixbuf.
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> Destination X coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> Destination Y coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of region to render, in pixels, or -1 to use pixbuf width.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of region to render, in pixels, or -1 to use pixbuf height.
</parameter_description>
</parameter>
<parameter name="dither">
<parameter_description> Dithering mode for #GdkRGB.
</parameter_description>
</parameter>
<parameter name="x_dither">
<parameter_description> X offset for dither.
</parameter_description>
</parameter>
<parameter name="y_dither">
<parameter_description> Y offset for dither.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_point">
<description>
Draws a point, using the foreground color and other attributes of 
the #GdkGC.

Deprecated: 2.22: Use cairo_rectangle() and cairo_fill() or 
cairo_move_to() and cairo_stroke() instead.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of the point.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of the point.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_points">
<description>
Draws a number of points, using the foreground color and other 
attributes of the #GdkGC.

Deprecated: 2.22: Use @n_points calls to cairo_rectangle() and
cairo_fill() instead.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="points">
<parameter_description> an array of #GdkPoint structures.
</parameter_description>
</parameter>
<parameter name="n_points">
<parameter_description> the number of points to be drawn.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_polygon">
<description>
Draws an outlined or filled polygon.

Deprecated: 2.22: Use cairo_line_to() or cairo_append_path() and
cairo_fill() or cairo_stroke() instead.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="filled">
<parameter_description> %TRUE if the polygon should be filled. The polygon is closed
automatically, connecting the last point to the first point if 
necessary.
</parameter_description>
</parameter>
<parameter name="points">
<parameter_description> an array of #GdkPoint structures specifying the points making 
up the polygon.
</parameter_description>
</parameter>
<parameter name="n_points">
<parameter_description> the number of points.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_rectangle">
<description>
Draws a rectangular outline or filled rectangle, using the foreground color
and other attributes of the #GdkGC.

A rectangle drawn filled is 1 pixel smaller in both dimensions than a 
rectangle outlined. Calling 
&lt;literal&gt;gdk_draw_rectangle (window, gc, TRUE, 0, 0, 20, 20)&lt;/literal&gt; 
results in a filled rectangle 20 pixels wide and 20 pixels high. Calling
&lt;literal&gt;gdk_draw_rectangle (window, gc, FALSE, 0, 0, 20, 20)&lt;/literal&gt; 
results in an outlined rectangle with corners at (0, 0), (0, 20), (20, 20),
and (20, 0), which makes it 21 pixels wide and 21 pixels high.

Deprecated: 2.22: Use cairo_rectangle() and cairo_fill() or cairo_stroke()
instead. For stroking, the same caveats for converting code apply as for
gdk_draw_line().

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="filled">
<parameter_description> %TRUE if the rectangle should be filled.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of the left edge of the rectangle.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of the top edge of the rectangle.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_rgb_32_image_dithalign">
<description>
Like gdk_draw_rgb_32_image(), but allows you to specify the dither
offsets. See gdk_draw_rgb_image_dithalign() for more details.

Deprecated: 2.22: Cairo handles colors automatically.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate on @drawable where image should go
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate on @drawable where image should go
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of area of image to draw
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of area of image to draw
</parameter_description>
</parameter>
<parameter name="dith">
<parameter_description> dithering mode
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> RGB image data
</parameter_description>
</parameter>
<parameter name="rowstride">
<parameter_description> rowstride of RGB image data
</parameter_description>
</parameter>
<parameter name="xdith">
<parameter_description> X dither offset
</parameter_description>
</parameter>
<parameter name="ydith">
<parameter_description> Y dither offset
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_segments">
<description>
Draws a number of unconnected lines.

Deprecated: 2.22: Use cairo_move_to(), cairo_line_to() and cairo_stroke()
instead. See the documentation of gdk_draw_line() for notes on line drawing
with Cairo.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="segs">
<parameter_description> an array of #GdkSegment structures specifying the start and 
end points of the lines to be drawn.
</parameter_description>
</parameter>
<parameter name="n_segs">
<parameter_description> the number of line segments to draw, i.e. the size of the 
@segs array.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_string">
<description>
Draws a string of characters in the given font or fontset.

Deprecated: 2.4: Use gdk_draw_layout() instead.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="font">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of the left edge of the text.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of the baseline of the text.
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description>  the string of characters to draw.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_text">
<description>
Draws a number of characters in the given font or fontset.

Deprecated: 2.4: Use gdk_draw_layout() instead.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="font">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of the left edge of the text.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of the baseline of the text.
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description>  the characters to draw.
</parameter_description>
</parameter>
<parameter name="text_length">
<parameter_description> the number of characters of @text to draw.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_text_wc">
<description>
Draws a number of wide characters using the given font of fontset.
If the font is a 1-byte font, the string is converted into 1-byte 
characters (discarding the high bytes) before output.

Deprecated: 2.4: Use gdk_draw_layout() instead.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="font">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of the left edge of the text.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of the baseline of the text.
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the wide characters to draw.
</parameter_description>
</parameter>
<parameter name="text_length">
<parameter_description> the number of characters to draw.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_trapezoids">
<description>
Draws a set of anti-aliased trapezoids. The trapezoids are
combined using saturation addition, then drawn over the background
as a set. This is low level functionality used internally to implement
rotated underlines and backgrouds when rendering a PangoLayout and is
likely not useful for applications.

Since: 2.6

Deprecated: 2.22: Use Cairo path contruction functions and cairo_fill()
instead.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="trapezoids">
<parameter_description> an array of #GdkTrapezoid structures
</parameter_description>
</parameter>
<parameter name="n_trapezoids">
<parameter_description> the number of trapezoids to draw
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drawable_copy_to_image">
<description>
Copies a portion of @drawable into the client side image structure
@image. If @image is %NULL, creates a new image of size @width x @height
and copies into that. See gdk_drawable_get_image() for further details.

Since: 2.4

Deprecated: 2.22: Use @drawable as the source and draw to a Cairo image
surface if you want to download contents to the client.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="image">
<parameter_description> a #GdkDrawable, or %NULL if a new @image should be created.
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> x coordinate on @drawable
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> y coordinate on @drawable
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> x coordinate within @image. Must be 0 if @image is %NULL
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> y coordinate within @image. Must be 0 if @image is %NULL
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of region to get
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height or region to get
</parameter_description>
</parameter>
</parameters>
<return> @image, or a new a #GdkImage containing the contents
of @drawable

</return>
</function>

<function name="gdk_drawable_get_clip_region">
<description>
Computes the region of a drawable that potentially can be written
to by drawing primitives. This region will not take into account
the clip region for the GC, and may also not take into account
other factors such as if the window is obscured by other windows,
but no area outside of this region will be affected by drawing
primitives.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return> a #GdkRegion. This must be freed with gdk_region_destroy()
when you are done.
</return>
</function>

<function name="gdk_drawable_get_colormap">
<description>
Gets the colormap for @drawable, if one is set; returns
%NULL otherwise.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return> the colormap, or %NULL
</return>
</function>

<function name="gdk_drawable_get_data">
<description>
Equivalent to g_object_get_data(); the #GObject variant should be
used instead.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> name the data was stored under
</parameter_description>
</parameter>
</parameters>
<return> the data stored at @key
</return>
</function>

<function name="gdk_drawable_get_depth">
<description>
Obtains the bit depth of the drawable, that is, the number of bits
that make up a pixel in the drawable's visual. Examples are 8 bits
per pixel, 24 bits per pixel, etc.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return> number of bits per pixel
</return>
</function>

<function name="gdk_drawable_get_display">
<description>
Gets the #GdkDisplay associated with a #GdkDrawable.

Since: 2.2

Deprecated: 2.24: Use gdk_window_get_display() instead

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDisplay associated with @drawable

</return>
</function>

<function name="gdk_drawable_get_image">
<description>
A #GdkImage stores client-side image data (pixels). In contrast,
#GdkPixmap and #GdkWindow are server-side
objects. gdk_drawable_get_image() obtains the pixels from a
server-side drawable as a client-side #GdkImage.  The format of a
#GdkImage depends on the #GdkVisual of the current display, which
makes manipulating #GdkImage extremely difficult; therefore, in
most cases you should use gdk_pixbuf_get_from_drawable() instead of
this lower-level function. A #GdkPixbuf contains image data in a
canonicalized RGB format, rather than a display-dependent format.
Of course, there's a convenience vs. speed tradeoff here, so you'll
want to think about what makes sense for your application.

@x, @y, @width, and @height define the region of @drawable to
obtain as an image.

You would usually copy image data to the client side if you intend
to examine the values of individual pixels, for example to darken
an image or add a red tint. It would be prohibitively slow to
make a round-trip request to the windowing system for each pixel,
so instead you get all of them at once, modify them, then copy
them all back at once.

If the X server or other windowing system backend is on the local
machine, this function may use shared memory to avoid copying
the image data.

If the source drawable is a #GdkWindow and partially offscreen
or obscured, then the obscured portions of the returned image
will contain undefined data.

Deprecated: 2.22: Use @drawable as the source and draw to a Cairo image
surface if you want to download contents to the client.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate on @drawable
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate on @drawable
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of region to get
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height or region to get
</parameter_description>
</parameter>
</parameters>
<return> a #GdkImage containing the contents of @drawable

</return>
</function>

<function name="gdk_drawable_get_screen">
<description>
Gets the #GdkScreen associated with a #GdkDrawable.

Since: 2.2

Deprecated: 2.24: Use gdk_window_get_screen() instead

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return> the #GdkScreen associated with @drawable

</return>
</function>

<function name="gdk_drawable_get_size">
<description>
Fills *@width and *@height with the size of @drawable.
@width or @height can be %NULL if you only want the other one.

On the X11 platform, if @drawable is a #GdkWindow, the returned
size is the size reported in the most-recently-processed configure
event, rather than the current size on the X server.

Deprecated: 2.24: Use gdk_window_get_width() and gdk_window_get_height() for
#GdkWindows. Use gdk_pixmap_get_size() for #GdkPixmaps.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to store drawable's width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to store drawable's height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drawable_get_visible_region">
<description>
Computes the region of a drawable that is potentially visible.
This does not necessarily take into account if the window is
obscured by other windows, but no area outside of this region
is visible.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return> a #GdkRegion. This must be freed with gdk_region_destroy()
when you are done.
</return>
</function>

<function name="gdk_drawable_get_visual">
<description>
Gets the #GdkVisual describing the pixel format of @drawable.

Deprecated: 2.24: Use gdk_window_get_visual()

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return> a #GdkVisual

</return>
</function>

<function name="gdk_drawable_ref">
<description>
Deprecated equivalent of calling g_object_ref() on @drawable.
(Drawables were not objects in previous versions of GDK.)

Deprecated: 2.0: Use g_object_ref() instead.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return> the same @drawable passed in

</return>
</function>

<function name="gdk_drawable_set_colormap">
<description>
Sets the colormap associated with @drawable. Normally this will
happen automatically when the drawable is created; you only need to
use this function if the drawable-creating function did not have a
way to determine the colormap, and you then use drawable operations
that require a colormap. The colormap for all drawables and
graphics contexts you intend to use together should match. i.e.
when using a #GdkGC to draw to a drawable, or copying one drawable
to another, the colormaps should match.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drawable_set_data">
<description>
This function is equivalent to g_object_set_data(),
the #GObject variant should be used instead.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> name to store the data under
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> arbitrary data
</parameter_description>
</parameter>
<parameter name="destroy_func">
<parameter_description> function to free @data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drawable_unref">
<description>
Deprecated equivalent of calling g_object_unref() on @drawable.

Deprecated: 2.0: Use g_object_unref() instead.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drop_finish">
<description>
Ends the drag operation after a drop.

This function is called by the drag destination.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkDragContext.
</parameter_description>
</parameter>
<parameter name="success">
<parameter_description> %TRUE if the data was successfully received.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drop_reply">
<description>
Accepts or rejects a drop. 

This function is called by the drag destination in response
to a drop initiated by the drag source.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
<parameter name="ok">
<parameter_description> %TRUE if the drop is accepted.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_copy">
<description>
Copies a #GdkEvent, copying or incrementing the reference count of the
resources associated with it (e.g. #GdkWindow's and strings).


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> a copy of @event. The returned #GdkEvent should be freed with
gdk_event_free().
</return>
</function>

<function name="gdk_event_free">
<description>
Frees a #GdkEvent, freeing or decrementing any resources associated with it.
Note that this function should only be called with events returned from
functions such as gdk_event_peek(), gdk_event_get(),
gdk_event_get_graphics_expose() and gdk_event_copy() and gdk_event_new().

</description>
<parameters>
<parameter name="event">
<parameter_description>  a #GdkEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_get">
<description>
Checks all open displays for a #GdkEvent to process,to be processed
on, fetching events from the windowing system if necessary.
See gdk_display_get_event().


</description>
<parameters>
</parameters>
<return> the next #GdkEvent to be processed, or %NULL if no events
are pending. The returned #GdkEvent should be freed with gdk_event_free().
</return>
</function>

<function name="gdk_event_get_axis">
<description>
Extract the axis value for a particular axis use from
an event structure.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="axis_use">
<parameter_description> the axis use to look for
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the value found
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the specified axis was found, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_coords">
<description>
Extract the event window relative x/y coordinates from an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="x_win">
<parameter_description> location to put event window x coordinate
</parameter_description>
</parameter>
<parameter name="y_win">
<parameter_description> location to put event window y coordinate
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered event window coordinates
</return>
</function>

<function name="gdk_event_get_graphics_expose">
<description>
Waits for a GraphicsExpose or NoExpose event from the X server.
This is used in the #GtkText and #GtkCList widgets in GTK+ to make sure any
GraphicsExpose events are handled before the widget is scrolled.

Deprecated: 2.18:

</description>
<parameters>
<parameter name="window">
<parameter_description> the #GdkWindow to wait for the events for.
</parameter_description>
</parameter>
</parameters>
<return>  a #GdkEventExpose if a GraphicsExpose was received, or %NULL if a
NoExpose event was received.

</return>
</function>

<function name="gdk_event_get_root_coords">
<description>
Extract the root window relative x/y coordinates from an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="x_root">
<parameter_description> location to put root window x coordinate
</parameter_description>
</parameter>
<parameter name="y_root">
<parameter_description> location to put root window y coordinate
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered root window coordinates
</return>
</function>

<function name="gdk_event_get_screen">
<description>
Returns the screen for the event. The screen is
typically the screen for &lt;literal&gt;event-&gt;any.window&lt;/literal&gt;, but
for events such as mouse events, it is the screen
where the pointer was when the event occurs -
that is, the screen which has the root window 
to which &lt;literal&gt;event-&gt;motion.x_root&lt;/literal&gt; and
&lt;literal&gt;event-&gt;motion.y_root&lt;/literal&gt; are relative.

Since: 2.2

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> the screen for the event

</return>
</function>

<function name="gdk_event_get_state">
<description>
If the event contains a &quot;state&quot; field, puts that field in @state. Otherwise
stores an empty state (0). Returns %TRUE if there was a state field
in the event. @event may be %NULL, in which case it's treated
as if the event had no state field.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent or NULL
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> return location for state
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was a state field in the event 
</return>
</function>

<function name="gdk_event_get_time">
<description>
Returns the time stamp from @event, if there is one; otherwise
returns #GDK_CURRENT_TIME. If @event is %NULL, returns #GDK_CURRENT_TIME.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> time stamp field from @event
</return>
</function>

<function name="gdk_event_handler_set">
<description>
Sets the function to call to handle all events from GDK.

Note that GTK+ uses this to install its own event handler, so it is
usually not useful for GTK+ applications. (Although an application
can call this function then call gtk_main_do_event() to pass
events to GTK+.)

</description>
<parameters>
<parameter name="func">
<parameter_description> the function to call to handle events from GDK.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to the function. 
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> the function to call when the handler function is removed, i.e. when
gdk_event_handler_set() is called with another event handler.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_new">
<description>
Creates a new event of the given type. All fields are set to 0.

Since: 2.2

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GdkEventType 
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated #GdkEvent. The returned #GdkEvent 
should be freed with gdk_event_free().

</return>
</function>

<function name="gdk_event_peek">
<description>
If there is an event waiting in the event queue of some open
display, returns a copy of it. See gdk_display_peek_event().


</description>
<parameters>
</parameters>
<return> a copy of the first #GdkEvent on some event queue, or %NULL if no
events are in any queues. The returned #GdkEvent should be freed with
gdk_event_free().
</return>
</function>

<function name="gdk_event_put">
<description>
Appends a copy of the given event onto the front of the event
queue for event-&gt;any.window's display, or the default event
queue if event-&gt;any.window is %NULL. See gdk_display_put_event().

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_request_motions">
<description>
Request more motion notifies if @event is a motion notify hint event.
This function should be used instead of gdk_window_get_pointer() to
request further motion notifies, because it also works for extension
events where motion notifies are provided for devices other than the
core pointer. Coordinate extraction, processing and requesting more
motion events from a %GDK_MOTION_NOTIFY event usually works like this:

|[
{ 
/ * motion_event handler * /
x = motion_event-&gt;x;
y = motion_event-&gt;y;
/ * handle (x,y) motion * /
gdk_event_request_motions (motion_event); / * handles is_hint events * /
}
]|

Since: 2.12

</description>
<parameters>
<parameter name="event">
<parameter_description> a valid #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_send_client_message">
<description>
Sends an X ClientMessage event to a given window (which must be
on the default #GdkDisplay.)
This could be used for communicating between different applications,
though the amount of data is limited to 20 bytes.


</description>
<parameters>
<parameter name="event">
<parameter_description> the #GdkEvent to send, which should be a #GdkEventClient.
</parameter_description>
</parameter>
<parameter name="winid">
<parameter_description>  the window to send the X ClientMessage event to.
</parameter_description>
</parameter>
</parameters>
<return> non-zero on success.
</return>
</function>

<function name="gdk_event_send_client_message_for_display">
<description>
On X11, sends an X ClientMessage event to a given window. On
Windows, sends a message registered with the name
GDK_WIN32_CLIENT_MESSAGE.

This could be used for communicating between different
applications, though the amount of data is limited to 20 bytes on
X11, and to just four bytes on Windows.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay for the window where the message is to be sent.
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the #GdkEvent to send, which should be a #GdkEventClient.
</parameter_description>
</parameter>
<parameter name="winid">
<parameter_description> the window to send the client message to.
</parameter_description>
</parameter>
</parameters>
<return> non-zero on success.

</return>
</function>

<function name="gdk_event_send_clientmessage_toall">
<description>
Sends an X ClientMessage event to all toplevel windows on the default
#GdkScreen.

Toplevel windows are determined by checking for the WM_STATE property, as
described in the Inter-Client Communication Conventions Manual (ICCCM).
If no windows are found with the WM_STATE property set, the message is sent
to all children of the root window.

</description>
<parameters>
<parameter name="event">
<parameter_description> the #GdkEvent to send, which should be a #GdkEventClient.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_set_screen">
<description>
Sets the screen for @event to @screen. The event must
have been allocated by GTK+, for instance, by
gdk_event_copy().

Since: 2.2

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_events_pending">
<description>
Checks if any events are ready to be processed for any display.


</description>
<parameters>
</parameters>
<return>  %TRUE if any events are pending.
</return>
</function>

<function name="gdk_font_equal">
<description>
Compares two fonts for equality. Single fonts compare equal
if they have the same X font ID. This operation does
not currently work correctly for fontsets.


</description>
<parameters>
<parameter name="fonta">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
<parameter name="fontb">
<parameter_description> another #GdkFont.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the fonts are equal.
</return>
</function>

<function name="gdk_font_from_description">
<description>
Load a #GdkFont based on a Pango font description. This font will
only be an approximation of the Pango font, and
internationalization will not be handled correctly. This function
should only be used for legacy code that cannot be easily converted
to use Pango. Using Pango directly will produce better results.


</description>
<parameters>
<parameter name="font_desc">
<parameter_description> a #PangoFontDescription.
</parameter_description>
</parameter>
</parameters>
<return> the newly loaded font, or %NULL if the font
cannot be loaded.
</return>
</function>

<function name="gdk_font_from_description_for_display">
<description>
Loads a #GdkFont based on a Pango font description for use on @display. 
This font will only be an approximation of the Pango font, and
internationalization will not be handled correctly. This function
should only be used for legacy code that cannot be easily converted
to use Pango. Using Pango directly will produce better results.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="font_desc">
<parameter_description> a #PangoFontDescription.
</parameter_description>
</parameter>
</parameters>
<return> the newly loaded font, or %NULL if the font
cannot be loaded.

</return>
</function>

<function name="gdk_font_get_display">
<description>
Returns the #GdkDisplay for @font.

Since: 2.2

</description>
<parameters>
<parameter name="font">
<parameter_description> the #GdkFont.
</parameter_description>
</parameter>
</parameters>
<return> the corresponding #GdkDisplay.

</return>
</function>

<function name="gdk_font_id">
<description>
Returns the X Font ID for the given font. 


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
</parameters>
<return> the numeric X Font ID
</return>
</function>

<function name="gdk_font_load">
<description>
Loads a font.

The font may be newly loaded or looked up the font in a cache. 
You should make no assumptions about the initial reference count.


</description>
<parameters>
<parameter name="font_name">
<parameter_description> a XLFD describing the font to load.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkFont, or %NULL if the font could not be loaded.
</return>
</function>

<function name="gdk_font_load_for_display">
<description>
Loads a font for use on @display.

The font may be newly loaded or looked up the font in a cache. 
You should make no assumptions about the initial reference count.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="font_name">
<parameter_description> a XLFD describing the font to load.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkFont, or %NULL if the font could not be loaded.
</return>
</function>

<function name="gdk_font_ref">
<description>
Increases the reference count of a font by one.


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
</parameters>
<return> @font
</return>
</function>

<function name="gdk_font_unref">
<description>
Decreases the reference count of a font by one.
If the result is zero, destroys the font.

</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_fontset_load">
<description>
Loads a fontset.

The fontset may be newly loaded or looked up in a cache. 
You should make no assumptions about the initial reference count.


</description>
<parameters>
<parameter name="fontset_name">
<parameter_description> a comma-separated list of XLFDs describing
the component fonts of the fontset to load.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkFont, or %NULL if the fontset could not be loaded.
</return>
</function>

<function name="gdk_fontset_load_for_display">
<description>
Loads a fontset for use on @display.

The fontset may be newly loaded or looked up in a cache. 
You should make no assumptions about the initial reference count.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="fontset_name">
<parameter_description> a comma-separated list of XLFDs describing
the component fonts of the fontset to load.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkFont, or %NULL if the fontset could not be loaded.
</return>
</function>

<function name="gdk_gc_copy">
<description>
Copy the set of values from one graphics context
onto another graphics context.

Deprecated: 2.22: Use Cairo for drawing. cairo_save() and cairo_restore()
can be helpful in cases where you'd have copied a #GdkGC.

</description>
<parameters>
<parameter name="dst_gc">
<parameter_description> the destination graphics context.
</parameter_description>
</parameter>
<parameter name="src_gc">
<parameter_description> the source graphics context.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_get_colormap">
<description>
Retrieves the colormap for a given GC, if it exists.
A GC will have a colormap if the drawable for which it was created
has a colormap, or if a colormap was set explicitely with
gdk_gc_set_colormap.

Deprecated: 2.22: There is no replacement. Cairo handles colormaps
automatically, so there is no need to care about them.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
</parameters>
<return> the colormap of @gc, or %NULL if @gc doesn't have one.

</return>
</function>

<function name="gdk_gc_get_screen">
<description>
Gets the #GdkScreen for which @gc was created

Since: 2.2

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkScreen for @gc.

</return>
</function>

<function name="gdk_gc_get_values">
<description>
Retrieves the current values from a graphics context. Note that 
only the pixel values of the @values-&gt;foreground and @values-&gt;background
are filled, use gdk_colormap_query_color() to obtain the rgb values
if you need them.

Deprecated: 2.22: Use Cairo for rendering.

</description>
<parameters>
<parameter name="gc">
<parameter_description>  a #GdkGC.
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> the #GdkGCValues structure in which to store the results.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_new">
<description>
Create a new graphics context with default values. 

Deprecated: 2.22: Use Cairo for rendering.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable. The created GC must always be used
with drawables of the same depth as this one.
</parameter_description>
</parameter>
</parameters>
<return> the new graphics context.

</return>
</function>

<function name="gdk_gc_new_with_values">
<description>
Create a new GC with the given initial values.

Deprecated: 2.22: Use Cairo for rendering.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable. The created GC must always be used
with drawables of the same depth as this one.
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a structure containing initial values for the GC.
</parameter_description>
</parameter>
<parameter name="values_mask">
<parameter_description> a bit mask indicating which fields in @values
are set.
</parameter_description>
</parameter>
</parameters>
<return> the new graphics context.

</return>
</function>

<function name="gdk_gc_offset">
<description>
Offset attributes such as the clip and tile-stipple origins
of the GC so that drawing at x - x_offset, y - y_offset with
the offset GC  has the same effect as drawing at x, y with the original
GC.

Deprecated: 2.22: There is no direct replacement, as this is just a
convenience function for gdk_gc_set_ts_origin and gdk_gc_set_clip_origin().

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="x_offset">
<parameter_description> amount by which to offset the GC in the X direction
</parameter_description>
</parameter>
<parameter name="y_offset">
<parameter_description> amount by which to offset the GC in the Y direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_ref">
<description>
Deprecated function; use g_object_ref() instead.

Deprecated: 2.0: Use g_object_ref() instead.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
</parameters>
<return> the gc.

</return>
</function>

<function name="gdk_gc_set_background">
<description>
Sets the background color for a graphics context.
Note that this function uses @color-&gt;pixel, use 
gdk_gc_set_rgb_bg_color() to specify the background 
color as red, green, blue components.

Deprecated: 2.22: Use gdk_cairo_set_source_color() to use a #GdkColor
as the source in Cairo. Note that if you want to draw a background and a
foreground in Cairo, you need to call drawing functions (like cairo_fill())
twice.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the new background color.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_clip_mask">
<description>
Sets the clip mask for a graphics context from a bitmap.
The clip mask is interpreted relative to the clip
origin. (See gdk_gc_set_clip_origin()).

Deprecated: 2.22: Use cairo_mask() instead.

</description>
<parameters>
<parameter name="gc">
<parameter_description> the #GdkGC.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a bitmap.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_clip_origin">
<description>
Sets the origin of the clip mask. The coordinates are
interpreted relative to the upper-left corner of
the destination drawable of the current operation.

Deprecated: 2.22: Use cairo_translate() before applying the clip path in
Cairo.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x-coordinate of the origin.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y-coordinate of the origin.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_clip_rectangle">
<description>
Sets the clip mask for a graphics context from a
rectangle. The clip mask is interpreted relative to the clip
origin. (See gdk_gc_set_clip_origin()).

Deprecated: 2.22: Use cairo_rectangle() and cairo_clip() in Cairo.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="rectangle">
<parameter_description> the rectangle to clip to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_clip_region">
<description>
Sets the clip mask for a graphics context from a region structure.
The clip mask is interpreted relative to the clip origin. (See
gdk_gc_set_clip_origin()).

Deprecated: 2.22: Use gdk_cairo_region() and cairo_clip() in Cairo.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> the #GdkRegion. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_colormap">
<description>
Sets the colormap for the GC to the given colormap. The depth
of the colormap's visual must match the depth of the drawable
for which the GC was created.

Deprecated: 2.22: There is no replacement. Cairo handles colormaps
automatically, so there is no need to care about them.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_dashes">
<description>
Sets the way dashed-lines are drawn. Lines will be
drawn with alternating on and off segments of the
lengths specified in @dash_list. The manner in
which the on and off segments are drawn is determined
by the @line_style value of the GC. (This can
be changed with gdk_gc_set_line_attributes().)

The @dash_offset defines the phase of the pattern, 
specifying how many pixels into the dash-list the pattern 
should actually begin.

Deprecated: 2.22: Use cairo_set_dash() to set the dash in Cairo.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="dash_offset">
<parameter_description> the phase of the dash pattern.
</parameter_description>
</parameter>
<parameter name="dash_list">
<parameter_description> an array of dash lengths.
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the number of elements in @dash_list.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_exposures">
<description>
Sets whether copying non-visible portions of a drawable
using this graphics context generate exposure events
for the corresponding regions of the destination
drawable. (See gdk_draw_drawable()).

Deprecated: 2.22: There is no replacement. If you need to control
exposures, you must use drawing operations of the underlying window
system or use gdk_window_invalidate_rect(). Cairo will never
generate exposures.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="exposures">
<parameter_description> if %TRUE, exposure events will be generated.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_fill">
<description>
Set the fill mode for a graphics context.

Deprecated: 2.22: You can achieve tiling in Cairo by using
cairo_pattern_set_extend() on the source. For stippling, see the
deprecation comments on gdk_gc_set_stipple().

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="fill">
<parameter_description> the new fill mode.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_font">
<description>
Sets the font for a graphics context. (Note that
all text-drawing functions in GDK take a @font
argument; the value set here is used when that
argument is %NULL.)

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="font">
<parameter_description> the new font. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_foreground">
<description>
Sets the foreground color for a graphics context.
Note that this function uses @color-&gt;pixel, use 
gdk_gc_set_rgb_fg_color() to specify the foreground 
color as red, green, blue components.

Deprecated: 2.22: Use gdk_cairo_set_source_color() to use a #GdkColor
as the source in Cairo.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the new foreground color.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_function">
<description>
Determines how the current pixel values and the
pixel values being drawn are combined to produce
the final pixel values.

Deprecated: 2.22: Use cairo_set_operator() with Cairo.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> the #GdkFunction to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_line_attributes">
<description>
Sets various attributes of how lines are drawn. See
the corresponding members of #GdkGCValues for full
explanations of the arguments.

Deprecated: 2.22: Use the Cairo functions cairo_set_line_width(),
cairo_set_line_join(), cairo_set_line_cap() and cairo_set_dash()
to affect the stroking behavior in Cairo. Keep in mind that the default
attributes of a #cairo_t are different from the default attributes of
a #GdkGC.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="line_width">
<parameter_description> the width of lines.
</parameter_description>
</parameter>
<parameter name="line_style">
<parameter_description> the dash-style for lines.
</parameter_description>
</parameter>
<parameter name="cap_style">
<parameter_description> the manner in which the ends of lines are drawn.
</parameter_description>
</parameter>
<parameter name="join_style">
<parameter_description> the in which lines are joined together.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_rgb_bg_color">
<description>
Set the background color of a GC using an unallocated color. The
pixel value for the color will be determined using GdkRGB. If the
colormap for the GC has not previously been initialized for GdkRGB,
then for pseudo-color colormaps (colormaps with a small modifiable
number of colors), a colorcube will be allocated in the colormap.

Calling this function for a GC without a colormap is an error.

Deprecated: 2.22: Use gdk_cairo_set_source_color() instead.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> an unallocated #GdkColor.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_rgb_fg_color">
<description>
Set the foreground color of a GC using an unallocated color. The
pixel value for the color will be determined using GdkRGB. If the
colormap for the GC has not previously been initialized for GdkRGB,
then for pseudo-color colormaps (colormaps with a small modifiable
number of colors), a colorcube will be allocated in the colormap.

Calling this function for a GC without a colormap is an error.

Deprecated: 2.22: Use gdk_cairo_set_source_color() instead.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> an unallocated #GdkColor.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_stipple">
<description>
Set the stipple bitmap for a graphics context. The
stipple will only be used if the fill mode is
%GDK_STIPPLED or %GDK_OPAQUE_STIPPLED.

Deprecated: 2.22: Stippling has no direct replacement in Cairo. If you
want to achieve an identical look, you can use the stipple bitmap as a
mask. Most likely, this involves rendering the source to an intermediate
surface using cairo_push_group() first, so that you can then use
cairo_mask() to achieve the stippled look.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="stipple">
<parameter_description> the new stipple bitmap.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_subwindow">
<description>
Sets how drawing with this GC on a window will affect child
windows of that window. 

Deprecated: 2.22: There is no replacement. If you need to control
subwindows, you must use drawing operations of the underlying window
system manually. Cairo will always use %GDK_INCLUDE_INFERIORS on sources
and masks and %GDK_CLIP_BY_CHILDREN on targets.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the subwindow mode.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_tile">
<description>
Set a tile pixmap for a graphics context.
This will only be used if the fill mode
is %GDK_TILED.

Deprecated: 2.22: The following code snippet sets a tiling #GdkPixmap
as the source in Cairo:
|[gdk_cairo_set_source_pixmap (cr, tile, ts_origin_x, ts_origin_y);
cairo_pattern_set_extend (cairo_get_source (cr), CAIRO_EXTEND_REPEAT);]|

</description>
<parameters>
<parameter name="gc">
<parameter_description>  a #GdkGC.
</parameter_description>
</parameter>
<parameter name="tile">
<parameter_description>  the new tile pixmap.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_ts_origin">
<description>
Set the origin when using tiles or stipples with
the GC. The tile or stipple will be aligned such
that the upper left corner of the tile or stipple
will coincide with this point.

Deprecated: 2.22: You can set the origin for tiles and stipples in Cairo
by changing the source's matrix using cairo_pattern_set_matrix(). Or you
can specify it with gdk_cairo_set_source_pixmap() as shown in the example
for gdk_gc_set_tile().

</description>
<parameters>
<parameter name="gc">
<parameter_description>  a #GdkGC.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x-coordinate of the origin.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y-coordinate of the origin.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_values">
<description>
Sets attributes of a graphics context in bulk. For each flag set in
@values_mask, the corresponding field will be read from @values and
set as the new value for @gc. If you're only setting a few values
on @gc, calling individual &quot;setter&quot; functions is likely more
convenient.

Deprecated: 2.22: Use Cairo for rendering.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> struct containing the new values
</parameter_description>
</parameter>
<parameter name="values_mask">
<parameter_description> mask indicating which struct fields are to be used
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_unref">
<description>
Decrement the reference count of @gc.

Deprecated: 2.0: Use g_object_unref() instead.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_get_default_root_window">
<description>
Obtains the root window (parent all other windows are inside)
for the default display and screen.


</description>
<parameters>
</parameters>
<return> the default root window
</return>
</function>

<function name="gdk_get_display_arg_name">
<description>
Gets the display name specified in the command line arguments passed
to gdk_init() or gdk_parse_args(), if any.

Since: 2.2

</description>
<parameters>
</parameters>
<return> the display name, if specified explicitely, otherwise %NULL
this string is owned by GTK+ and must not be modified or freed.

</return>
</function>

<function name="gdk_get_show_events">
<description>
Gets whether event debugging output is enabled.


</description>
<parameters>
</parameters>
<return> %TRUE if event debugging output is enabled.
</return>
</function>

<function name="gdk_image_get">
<description>
This is a deprecated wrapper for gdk_drawable_get_image();
gdk_drawable_get_image() should be used instead. Or even better: in
most cases gdk_pixbuf_get_from_drawable() is the most convenient
choice.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate in @window
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate in @window
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of area in @window
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of area in @window
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkImage or %NULL
</return>
</function>

<function name="gdk_image_get_bits_per_pixel">
<description>
Determines the number of bits per pixel of the image.

Since: 2.22

Deprecated: 2.22: #GdkImage should not be used anymore.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
</parameters>
<return> the bits per pixel

</return>
</function>

<function name="gdk_image_get_byte_order">
<description>
Determines the byte order of the image.

Since: 2.22

Deprecated: 2.22: #GdkImage should not be used anymore.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
</parameters>
<return> a #GdkVisual

</return>
</function>

<function name="gdk_image_get_bytes_per_line">
<description>
Determines the number of bytes per line of the image.

Since: 2.22

Deprecated: 2.22: #GdkImage should not be used anymore.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
</parameters>
<return> the bytes per line

</return>
</function>

<function name="gdk_image_get_bytes_per_pixel">
<description>
Determines the number of bytes per pixel of the image.

Since: 2.22

Deprecated: 2.22: #GdkImage should not be used anymore.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
</parameters>
<return> the bytes per pixel

</return>
</function>

<function name="gdk_image_get_colormap">
<description>
Retrieves the colormap for a given image, if it exists.  An image
will have a colormap if the drawable from which it was created has
a colormap, or if a colormap was set explicitely with
gdk_image_set_colormap().

Deprecated: 2.22: #GdkImage should not be used anymore.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
</parameters>
<return> colormap for the image

</return>
</function>

<function name="gdk_image_get_depth">
<description>
Determines the depth of the image.

Since: 2.22

Deprecated: 2.22: #GdkImage should not be used anymore.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
</parameters>
<return> the depth

</return>
</function>

<function name="gdk_image_get_height">
<description>
Determines the height of the image.

Since: 2.22

Deprecated: 2.22: #GdkImage should not be used anymore.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
</parameters>
<return> the height

</return>
</function>

<function name="gdk_image_get_image_type">
<description>
Determines the type of a given image.

Since: 2.22

Deprecated: 2.22: #GdkImage should not be used anymore.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
</parameters>
<return> the #GdkImageType of the image

</return>
</function>

<function name="gdk_image_get_pixels">
<description>
Returns a pointer to the pixel data of the image.

Since: 2.22

Deprecated: 2.22: #GdkImage should not be used anymore.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
</parameters>
<return> the pixel data of the image

</return>
</function>

<function name="gdk_image_get_visual">
<description>
Determines the visual that was used to create the image.

Since: 2.22

Deprecated: 2.22: #GdkImage should not be used anymore.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
</parameters>
<return> a #GdkVisual

</return>
</function>

<function name="gdk_image_get_width">
<description>
Determines the width of the image.

Since: 2.22

Deprecated: 2.22: #GdkImage should not be used anymore.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
</parameters>
<return> the width

</return>
</function>

<function name="gdk_image_new_bitmap">
<description>
Creates a new #GdkImage with a depth of 1 from the given data.
&lt;warning&gt;&lt;para&gt;THIS FUNCTION IS INCREDIBLY BROKEN. The passed-in data must 
be allocated by malloc() (NOT g_malloc()) and will be freed when the 
image is freed.&lt;/para&gt;&lt;/warning&gt;


</description>
<parameters>
<parameter name="visual">
<parameter_description> the #GdkVisual to use for the image.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the pixel data. 
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the image in pixels. 
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the image in pixels. 
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkImage.
</return>
</function>

<function name="gdk_image_ref">
<description>
Deprecated function; use g_object_ref() instead.

Deprecated: 2.0: Use g_object_ref() instead.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
</parameters>
<return> the image

</return>
</function>

<function name="gdk_image_set_colormap">
<description>
Sets the colormap for the image to the given colormap.  Normally
there's no need to use this function, images are created with the
correct colormap if you get the image from a drawable. If you
create the image from scratch, use the colormap of the drawable you
intend to render the image to.

Deprecated: 2.22: #GdkImage should not be used anymore.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_image_unref">
<description>
Deprecated function; use g_object_unref() instead.

Deprecated: 2.0: Use g_object_unref() instead.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_init">
<description>

</description>
<parameters>
<parameter name="argc">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_init_check">
<description>
Initialize the library for use.

Arguments:
&quot;argc&quot; is the number of arguments.
&quot;argv&quot; is an array of strings.

Results:
&quot;argc&quot; and &quot;argv&quot; are modified to reflect any arguments
which were not handled. (Such arguments should either
be handled by the application or dismissed). If initialization
fails, returns FALSE, otherwise TRUE.

Side effects:
The library is initialized.

--------------------------------------------------------------

</description>
<parameters>
<parameter name="argc">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_input_add">
<description>
Establish a callback when a condition becomes true on
a file descriptor.

Deprecated: 2.14: Use g_io_add_watch() on a #GIOChannel

</description>
<parameters>
<parameter name="source">
<parameter_description> a file descriptor.
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> the condition.
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> the callback function.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> callback data passed to @function.
</parameter_description>
</parameter>
</parameters>
<return> a tag that can later be used as an argument to
gdk_input_remove().

</return>
</function>

<function name="gdk_input_add_full">
<description>
Establish a callback when a condition becomes true on
a file descriptor.

Deprecated: 2.14: Use g_io_add_watch_full() on a #GIOChannel

</description>
<parameters>
<parameter name="source">
<parameter_description> a file descriptor.
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> the condition.
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> the callback function.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> callback data passed to @function.
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> callback function to call with @data when the input
handler is removed.
</parameter_description>
</parameter>
</parameters>
<return> a tag that can later be used as an argument to
gdk_input_remove().

</return>
</function>

<function name="gdk_keyboard_grab_info_libgtk_only">
<description>
Determines information about the current keyboard grab.
This is not public API and must not be used by applications.


</description>
<parameters>
<parameter name="display">
<parameter_description> the display for which to get the grab information
</parameter_description>
</parameter>
<parameter name="grab_window">
<parameter_description> location to store current grab window
</parameter_description>
</parameter>
<parameter name="owner_events">
<parameter_description> location to store boolean indicating whether
the @owner_events flag to gdk_keyboard_grab() was %TRUE.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if this application currently has the
keyboard grabbed.
</return>
</function>

<function name="gdk_keyboard_ungrab">
<description>
Ungrabs the keyboard on the default display, if it is grabbed by this 
application.

</description>
<parameters>
<parameter name="time_">
<parameter_description> a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no
timestamp is available.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_keymap_add_virtual_modifiers">
<description>
Adds virtual modifiers (i.e. Super, Hyper and Meta) which correspond
to the real modifiers (i.e Mod2, Mod3, ...) in @modifiers.
are set in @state to their non-virtual counterparts (i.e. Mod2,
Mod3,...) and set the corresponding bits in @state.

GDK already does this before delivering key events, but for
compatibility reasons, it only sets the first virtual modifier
it finds, whereas this function sets all matching virtual modifiers.

This function is useful when matching key events against
accelerators.

Since: 2.20

</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> pointer to the modifier mask to change
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_keymap_get_caps_lock_state">
<description>
Returns whether the Caps Lock modifer is locked. 

Since: 2.16

</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if Caps Lock is on

</return>
</function>

<function name="gdk_keymap_get_default">
<description>
Returns the #GdkKeymap attached to the default display.

</description>
<parameters>
</parameters>
<return> the #GdkKeymap attached to the default display.
</return>
</function>

<function name="gdk_keymap_get_direction">
<description>
Returns the direction of effective layout of the keymap.

Note that passing %NULL for @keymap is deprecated and will stop
to work in GTK+ 3.0. Use gdk_keymap_get_for_display() instead.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap or %NULL to use the default keymap
</parameter_description>
</parameter>
</parameters>
<return> %PANGO_DIRECTION_LTR or %PANGO_DIRECTION_RTL
if it can determine the direction. %PANGO_DIRECTION_NEUTRAL
otherwise.
</return>
</function>

<function name="gdk_keymap_get_entries_for_keycode">
<description>
Returns the keyvals bound to @hardware_keycode.
The Nth #GdkKeymapKey in @keys is bound to the Nth
keyval in @keyvals. Free the returned arrays with g_free().
When a keycode is pressed by the user, the keyval from
this list of entries is selected by considering the effective
keyboard group and level. See gdk_keymap_translate_keyboard_state().

Note that passing %NULL for @keymap is deprecated and will stop
to work in GTK+ 3.0. Use gdk_keymap_get_for_display() instead.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap or %NULL to use the default keymap
</parameter_description>
</parameter>
<parameter name="hardware_keycode">
<parameter_description> a keycode
</parameter_description>
</parameter>
<parameter name="keys">
<parameter_description> return location for array of #GdkKeymapKey, or %NULL
</parameter_description>
</parameter>
<parameter name="keyvals">
<parameter_description> return location for array of keyvals, or %NULL
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description> length of @keys and @keyvals
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there were any entries
</return>
</function>

<function name="gdk_keymap_get_entries_for_keyval">
<description>
Obtains a list of keycode/group/level combinations that will
generate @keyval. Groups and levels are two kinds of keyboard mode;
in general, the level determines whether the top or bottom symbol
on a key is used, and the group determines whether the left or
right symbol is used. On US keyboards, the shift key changes the
keyboard level, and there are no groups. A group switch key might
convert a keyboard between Hebrew to English modes, for example.
#GdkEventKey contains a %group field that indicates the active
keyboard group. The level is computed from the modifier mask.
The returned array should be freed
with g_free().

Note that passing %NULL for @keymap is deprecated and will stop
to work in GTK+ 3.0. Use gdk_keymap_get_for_display() instead.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap, or %NULL to use the default keymap
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> a keyval, such as %GDK_a, %GDK_Up, %GDK_Return, etc.
</parameter_description>
</parameter>
<parameter name="keys">
<parameter_description> return location for an array of #GdkKeymapKey
</parameter_description>
</parameter>
<parameter name="n_keys">
<parameter_description> return location for number of elements in returned array
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if keys were found and returned
</return>
</function>

<function name="gdk_keymap_get_for_display">
<description>
Returns the #GdkKeymap attached to @display.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkKeymap attached to @display.
</return>
</function>

<function name="gdk_keymap_have_bidi_layouts">
<description>
Determines if keyboard layouts for both right-to-left and left-to-right
languages are in use.

Note that passing %NULL for @keymap is deprecated and will stop
to work in GTK+ 3.0. Use gdk_keymap_get_for_display() instead.

Since: 2.12

</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap or %NULL to use the default keymap
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there are layouts in both directions, %FALSE otherwise

</return>
</function>

<function name="gdk_keymap_lookup_key">
<description>
Looks up the keyval mapped to a keycode/group/level triplet.
If no keyval is bound to @key, returns 0. For normal user input,
you want to use gdk_keymap_translate_keyboard_state() instead of
this function, since the effective group/level may not be
the same as the current keyboard state.

Note that passing %NULL for @keymap is deprecated and will stop
to work in GTK+ 3.0. Use gdk_keymap_get_for_display() instead.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap or %NULL to use the default keymap
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a #GdkKeymapKey with keycode, group, and level initialized
</parameter_description>
</parameter>
</parameters>
<return> a keyval, or 0 if none was mapped to the given @key
</return>
</function>

<function name="gdk_keymap_map_virtual_modifiers">
<description>
Maps the virtual modifiers (i.e. Super, Hyper and Meta) which
are set in @state to their non-virtual counterparts (i.e. Mod2,
Mod3,...) and set the corresponding bits in @state.

This function is useful when matching key events against
accelerators.

Since: 2.20

</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> pointer to the modifier state to map
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if no virtual modifiers were mapped to the
same non-virtual modifier. Note that %FALSE is also returned
if a virtual modifier is mapped to a non-virtual modifier that
was already set in @state.

</return>
</function>

<function name="gdk_keymap_translate_keyboard_state">
<description>
Translates the contents of a #GdkEventKey into a keyval, effective
group, and level. Modifiers that affected the translation and
are thus unavailable for application use are returned in
@consumed_modifiers.  See &lt;xref linkend=&quot;key-group-explanation&quot;/&gt; for an explanation of
groups and levels.  The @effective_group is the group that was
actually used for the translation; some keys such as Enter are not
affected by the active keyboard group. The @level is derived from
@state. For convenience, #GdkEventKey already contains the translated
keyval, so this function isn't as useful as you might think.

&lt;note&gt;&lt;para&gt;
@consumed_modifiers gives modifiers that should be masked out
from @state when comparing this key press to a hot key. For
instance, on a US keyboard, the &lt;literal&gt;plus&lt;/literal&gt;
symbol is shifted, so when comparing a key press to a
&lt;literal&gt;&lt;Control&gt;plus&lt;/literal&gt; accelerator &lt;Shift&gt; should
be masked out.
&lt;/para&gt;
&lt;informalexample&gt;&lt;programlisting&gt;
 / * We want to ignore irrelevant modifiers like ScrollLock * / 
&#35;define ALL_ACCELS_MASK (GDK_CONTROL_MASK | GDK_SHIFT_MASK | GDK_MOD1_MASK)
gdk_keymap_translate_keyboard_state (keymap, event-&gt;hardware_keycode,
event-&gt;state, event-&gt;group,
&amp;keyval, NULL, NULL, &amp;consumed);
if (keyval == GDK_PLUS &amp;&amp;
(event-&gt;state &amp; ~consumed &amp; ALL_ACCELS_MASK) == GDK_CONTROL_MASK)
 / * Control was pressed * / 
&lt;/programlisting&gt;&lt;/informalexample&gt;
&lt;para&gt;
An older interpretation @consumed_modifiers was that it contained
all modifiers that might affect the translation of the key;
this allowed accelerators to be stored with irrelevant consumed
modifiers, by doing:&lt;/para&gt;
&lt;informalexample&gt;&lt;programlisting&gt;
 / * XXX Don't do this XXX * / 
if (keyval == accel_keyval &amp;&amp;
(event-&gt;state &amp; ~consumed &amp; ALL_ACCELS_MASK) == (accel_mods &amp; ~consumed))
 / * Accelerator was pressed * / 
&lt;/programlisting&gt;&lt;/informalexample&gt;
&lt;para&gt;
However, this did not work if multi-modifier combinations were
used in the keymap, since, for instance, &lt;literal&gt;&lt;Control&gt;&lt;/literal&gt;
would be masked out even if only &lt;literal&gt;&lt;Control&gt;&lt;Alt&gt;&lt;/literal&gt;
was used in the keymap. To support this usage as well as well as
possible, all &lt;emphasis&gt;single modifier&lt;/emphasis&gt; combinations
that could affect the key for any combination of modifiers will
be returned in @consumed_modifiers; multi-modifier combinations
are returned only when actually found in @state. When you store
accelerators, you should always store them with consumed modifiers
removed. Store &lt;literal&gt;&lt;Control&gt;plus&lt;/literal&gt;,
not &lt;literal&gt;&lt;Control&gt;&lt;Shift&gt;plus&lt;/literal&gt;,
&lt;/para&gt;&lt;/note&gt;

Note that passing %NULL for @keymap is deprecated and will stop
to work in GTK+ 3.0. Use gdk_keymap_get_for_display() instead.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap, or %NULL to use the default
</parameter_description>
</parameter>
<parameter name="hardware_keycode">
<parameter_description> a keycode
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> a modifier state
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> active keyboard group
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> return location for keyval, or %NULL
</parameter_description>
</parameter>
<parameter name="effective_group">
<parameter_description> return location for effective group, or %NULL
</parameter_description>
</parameter>
<parameter name="level">
<parameter_description>  return location for level, or %NULL
</parameter_description>
</parameter>
<parameter name="consumed_modifiers">
<parameter_description>  return location for modifiers that were used to
determine the group or level, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was a keyval bound to the keycode/state/group
</return>
</function>

<function name="gdk_keyval_convert_case">
<description>
Obtains the upper- and lower-case versions of the keyval @symbol.
Examples of keyvals are #GDK_a, #GDK_Enter, #GDK_F1, etc.


</description>
<parameters>
<parameter name="symbol">
<parameter_description> a keyval
</parameter_description>
</parameter>
<parameter name="lower">
<parameter_description> return location for lowercase version of @symbol
</parameter_description>
</parameter>
<parameter name="upper">
<parameter_description> return location for uppercase version of @symbol
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_keyval_to_unicode">
<description>
Convert from a GDK key symbol to the corresponding ISO10646 (Unicode)
character.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a GDK key symbol 
</parameter_description>
</parameter>
</parameters>
<return> the corresponding unicode character, or 0 if there
is no corresponding character.
</return>
</function>

<function name="gdk_list_visuals">
<description>
Lists the available visuals for the default screen.
(See gdk_screen_list_visuals())
A visual describes a hardware image data format.
For example, a visual might support 24-bit color, or 8-bit color,
and might expect pixels to be in a certain format.

Call g_list_free() on the return value when you're finished with it.


</description>
<parameters>
</parameters>
<return>
a list of visuals; the list must be freed, but not its contents
</return>
</function>

<function name="gdk_mbstowcs">
<description>
Converts a multi-byte string to a wide character string.
(The function name comes from an acronym of 'Multi-Byte String TO Wide
Character String').


</description>
<parameters>
<parameter name="dest">
<parameter_description> the space to place the converted wide character string into.
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> the multi-byte string to convert, which must be nul-terminated.
</parameter_description>
</parameter>
<parameter name="dest_max">
<parameter_description> the maximum number of wide characters to place in @dest.
</parameter_description>
</parameter>
</parameters>
<return> the number of wide characters written into @dest, or -1 if 
the conversion failed.
</return>
</function>

<function name="gdk_net_wm_supports">
<description>
This function is specific to the X11 backend of GDK, and indicates
whether the window manager for the default screen supports a certain
hint from the Extended Window Manager Hints Specification. See
gdk_x11_screen_supports_net_wm_hint() for complete details.

Deprecated:2.24: Use gdk_x11_screen_supports_net_wm_hint() instead

</description>
<parameters>
<parameter name="property">
<parameter_description> a property atom.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window manager supports @property

</return>
</function>

<function name="gdk_notify_startup_complete">
<description>
Indicates to the GUI environment that the application has finished
loading. If the applications opens windows, this function is
normally called after opening the application's initial set of
windows.

GTK+ will call this function automatically after opening the first
#GtkWindow unless gtk_window_set_auto_startup_notification() is called 
to disable that feature.

Since: 2.2

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_notify_startup_complete_with_id">
<description>
Indicates to the GUI environment that the application has finished
loading, using a given identifier.

GTK+ will call this function automatically for #GtkWindow with custom
startup-notification identifier unless
gtk_window_set_auto_startup_notification() is called to disable
that feature.

Since: 2.12

</description>
<parameters>
<parameter name="startup_id">
<parameter_description> a startup-notification identifier, for which notification
process should be completed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_offscreen_window_get_embedder">
<description>
Gets the window that @window is embedded in.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the embedding #GdkWindow, or %NULL if @window is not an
embedded offscreen window

</return>
</function>

<function name="gdk_offscreen_window_get_pixmap">
<description>
Gets the offscreen pixmap that an offscreen window renders into.
If you need to keep this around over window resizes, you need to
add a reference to it.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> The offscreen pixmap, or %NULL if not offscreen

</return>
</function>

<function name="gdk_offscreen_window_set_embedder">
<description>
Sets @window to be embedded in @embedder.

To fully embed an offscreen window, in addition to calling this
function, it is also necessary to handle the #GdkWindow::pick-embedded-child
signal on the @embedder and the #GdkWindow::to-embedder and
#GdkWindow::from-embedder signals on @window.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="embedder">
<parameter_description> the #GdkWindow that @window gets embedded in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pango_attr_emboss_color_new">
<description>
Creates a new attribute specifying the color to emboss text with.

Since: 2.12

</description>
<parameters>
<parameter name="color">
<parameter_description> a GdkColor representing the color to emboss with
</parameter_description>
</parameter>
</parameters>
<return> new #PangoAttribute

</return>
</function>

<function name="gdk_pango_attr_embossed_new">
<description>
Creates a new attribute flagging a region as embossed or not.


</description>
<parameters>
<parameter name="embossed">
<parameter_description> if the region should be embossed
</parameter_description>
</parameter>
</parameters>
<return> new #PangoAttribute
</return>
</function>

<function name="gdk_pango_attr_stipple_new">
<description>
Creates a new attribute containing a stipple bitmap to be used when
rendering the text.


</description>
<parameters>
<parameter name="stipple">
<parameter_description> a bitmap to be set as stipple
</parameter_description>
</parameter>
</parameters>
<return> new #PangoAttribute
</return>
</function>

<function name="gdk_pango_context_get">
<description>
Creates a #PangoContext for the default GDK screen.

The context must be freed when you're finished with it.

When using GTK+, normally you should use gtk_widget_get_pango_context()
instead of this function, to get the appropriate context for
the widget you intend to render text onto.

The newly created context will have the default font options (see
#cairo_font_options_t) for the default screen; if these options
change it will not be updated. Using gtk_widget_get_pango_context()
is more convenient if you want to keep a context around and track
changes to the screen's font rendering settings.


</description>
<parameters>
</parameters>
<return> a new #PangoContext for the default display
</return>
</function>

<function name="gdk_pango_context_get_for_screen">
<description>
Creates a #PangoContext for @screen.

The context must be freed when you're finished with it.

When using GTK+, normally you should use gtk_widget_get_pango_context()
instead of this function, to get the appropriate context for
the widget you intend to render text onto.

The newly created context will have the default font options
(see #cairo_font_options_t) for the screen; if these options
change it will not be updated. Using gtk_widget_get_pango_context()
is more convenient if you want to keep a context around and track
changes to the screen's font rendering settings.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> the #GdkScreen for which the context is to be created.
</parameter_description>
</parameter>
</parameters>
<return> a new #PangoContext for @screen

</return>
</function>

<function name="gdk_pango_context_set_colormap">
<description>
This function used to set the colormap to be used for drawing with
@context. The colormap is now always derived from the graphics
context used for drawing, so calling this function is no longer
necessary.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #PangoContext
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pango_layout_get_clip_region">
<description>
Obtains a clip region which contains the areas where the given ranges
of text would be drawn. @x_origin and @y_origin are the same position
you would pass to gdk_draw_layout_line(). @index_ranges should contain
ranges of bytes in the layout's text.

Note that the regions returned correspond to logical extents of the text
ranges, not ink extents. So the drawn layout may in fact touch areas out of
the clip region.  The clip region is mainly useful for highlightling parts
of text, such as when text is selected.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #PangoLayout 
</parameter_description>
</parameter>
<parameter name="x_origin">
<parameter_description> X pixel where you intend to draw the layout with this clip
</parameter_description>
</parameter>
<parameter name="y_origin">
<parameter_description> Y pixel where you intend to draw the layout with this clip
</parameter_description>
</parameter>
<parameter name="index_ranges">
<parameter_description> array of byte indexes into the layout, where even members of array are start indexes and odd elements are end indexes
</parameter_description>
</parameter>
<parameter name="n_ranges">
<parameter_description> number of ranges in @index_ranges, i.e. half the size of @index_ranges
</parameter_description>
</parameter>
</parameters>
<return> a clip region containing the given ranges
</return>
</function>

<function name="gdk_pango_layout_line_get_clip_region">
<description>
Obtains a clip region which contains the areas where the given
ranges of text would be drawn. @x_origin and @y_origin are the same
position you would pass to gdk_draw_layout_line(). @index_ranges
should contain ranges of bytes in the layout's text. The clip
region will include space to the left or right of the line (to the
layout bounding box) if you have indexes above or below the indexes
contained inside the line. This is to draw the selection all the way
to the side of the layout. However, the clip region is in line coordinates,
not layout coordinates.

Note that the regions returned correspond to logical extents of the text
ranges, not ink extents. So the drawn line may in fact touch areas out of
the clip region.  The clip region is mainly useful for highlightling parts
of text, such as when text is selected.


</description>
<parameters>
<parameter name="line">
<parameter_description> a #PangoLayoutLine 
</parameter_description>
</parameter>
<parameter name="x_origin">
<parameter_description> X pixel where you intend to draw the layout line with this clip
</parameter_description>
</parameter>
<parameter name="y_origin">
<parameter_description> baseline pixel where you intend to draw the layout line with this clip
</parameter_description>
</parameter>
<parameter name="index_ranges">
<parameter_description> array of byte indexes into the layout, where even members of array are start indexes and odd elements are end indexes
</parameter_description>
</parameter>
<parameter name="n_ranges">
<parameter_description> number of ranges in @index_ranges, i.e. half the size of @index_ranges
</parameter_description>
</parameter>
</parameters>
<return> a clip region containing the given ranges
</return>
</function>

<function name="gdk_pango_renderer_get_default">
<description>
Gets the default #PangoRenderer for a screen. This default renderer
is shared by all users of the display, so properties such as the color
or transformation matrix set for the renderer may be overwritten
by functions such as gdk_draw_layout().

Before using the renderer, you need to call gdk_pango_renderer_set_drawable()
and gdk_pango_renderer_set_gc() to set the drawable and graphics context
to use for drawing.

Since: 2.6

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the default #PangoRenderer for @screen. The
renderer is owned by GTK+ and will be kept around until the
screen is closed.

</return>
</function>

<function name="gdk_pango_renderer_new">
<description>
Creates a new #PangoRenderer for @screen. Normally you can use the
results of gdk_pango_renderer_get_default() rather than creating a new
renderer.

Since: 2.6

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> a newly created #PangoRenderer. Free with g_object_unref().

</return>
</function>

<function name="gdk_pango_renderer_set_drawable">
<description>
Sets the drawable the renderer draws to.

Since: 2.6

</description>
<parameters>
<parameter name="gdk_renderer">
<parameter_description> a #GdkPangoRenderer
</parameter_description>
</parameter>
<parameter name="drawable">
<parameter_description> the new target drawable, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pango_renderer_set_gc">
<description>
Sets the GC the renderer draws with. Note that the GC must not be
modified until it is unset by calling the function again with
%NULL for the @gc parameter, since GDK may make internal copies
of the GC which won't be updated to follow changes to the
original GC.

Since: 2.6

</description>
<parameters>
<parameter name="gdk_renderer">
<parameter_description> a #GdkPangoRenderer
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> the new GC to use for drawing, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pango_renderer_set_override_color">
<description>
Sets the color for a particular render part (foreground,
background, underline, etc.), overriding any attributes on the layouts
renderered with this renderer.

Since: 2.6

</description>
<parameters>
<parameter name="gdk_renderer">
<parameter_description> a #GdkPangoRenderer
</parameter_description>
</parameter>
<parameter name="part">
<parameter_description> the part to render to set the color of
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to use, or %NULL to unset a previously
set override color.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pango_renderer_set_stipple">
<description>
Sets the stipple for one render part (foreground, background, underline,
etc.) Note that this is overwritten when iterating through the individual
styled runs of a #PangoLayout or #PangoLayoutLine. This function is thus
only useful when you call low level functions like pango_renderer_draw_glyphs()
directly, or in the 'prepare_run' virtual function of a subclass of
#GdkPangoRenderer.

Since: 2.6

</description>
<parameters>
<parameter name="gdk_renderer">
<parameter_description> a #GdkPangoRenderer
</parameter_description>
</parameter>
<parameter name="part">
<parameter_description> the part to render with the stipple
</parameter_description>
</parameter>
<parameter name="stipple">
<parameter_description> the new stipple value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_parse_args">
<description>
Parse command line arguments, and store for future
use by calls to gdk_display_open().

Any arguments used by GDK are removed from the array and @argc and @argv are
updated accordingly.

You shouldn't call this function explicitely if you are using
gtk_init(), gtk_init_check(), gdk_init(), or gdk_init_check().

Since: 2.2

</description>
<parameters>
<parameter name="argc">
<parameter_description> the number of command line arguments.
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> the array of command line arguments.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_get_from_drawable">
<description>
Transfers image data from a #GdkDrawable and converts it to an RGB(A)
representation inside a #GdkPixbuf. In other words, copies
image data from a server-side drawable to a client-side RGB(A) buffer.
This allows you to efficiently read individual pixels on the client side.

If the drawable @src has no colormap (gdk_drawable_get_colormap()
returns %NULL), then a suitable colormap must be specified.
Typically a #GdkWindow or a pixmap created by passing a #GdkWindow
to gdk_pixmap_new() will already have a colormap associated with
it.  If the drawable has a colormap, the @cmap argument will be
ignored.  If the drawable is a bitmap (1 bit per pixel pixmap),
then a colormap is not required; pixels with a value of 1 are
assumed to be white, and pixels with a value of 0 are assumed to be
black. For taking screenshots, gdk_colormap_get_system() returns
the correct colormap to use.

If the specified destination pixbuf @dest is %NULL, then this
function will create an RGB pixbuf with 8 bits per channel and no
alpha, with the same size specified by the @width and @height
arguments.  In this case, the @dest_x and @dest_y arguments must be
specified as 0.  If the specified destination pixbuf is not %NULL
and it contains alpha information, then the filled pixels will be
set to full opacity (alpha = 255).

If the specified drawable is a pixmap, then the requested source
rectangle must be completely contained within the pixmap, otherwise
the function will return %NULL. For pixmaps only (not for windows)
passing -1 for width or height is allowed to mean the full width
or height of the pixmap.

If the specified drawable is a window, and the window is off the
screen, then there is no image data in the obscured/offscreen
regions to be placed in the pixbuf. The contents of portions of the
pixbuf corresponding to the offscreen region are undefined.

If the window you're obtaining data from is partially obscured by
other windows, then the contents of the pixbuf areas corresponding
to the obscured regions are undefined.

If the target drawable is not mapped (typically because it's
iconified/minimized or not on the current workspace), then %NULL
will be returned.

If memory can't be allocated for the return value, %NULL will be returned
instead.

(In short, there are several ways this function can fail, and if it fails
it returns %NULL; so check the return value.)

This function calls gdk_drawable_get_image() internally and
converts the resulting image to a #GdkPixbuf, so the
documentation for gdk_drawable_get_image() may also be relevant.


</description>
<parameters>
<parameter name="dest">
<parameter_description> Destination pixbuf, or %NULL if a new pixbuf should be created.
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> Source drawable.
</parameter_description>
</parameter>
<parameter name="cmap">
<parameter_description> A colormap if @src doesn't have one set.
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Source Y coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> Destination X coordinate in pixbuf, or 0 if @dest is NULL.
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> Destination Y coordinate in pixbuf, or 0 if @dest is NULL.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width in pixels of region to get.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height in pixels of region to get.
</parameter_description>
</parameter>
</parameters>
<return> The same pixbuf as @dest if it was non-%NULL, or a newly-created
pixbuf with a reference count of 1 if no destination pixbuf was specified, or %NULL on error
</return>
</function>

<function name="gdk_pixbuf_get_from_image">
<description>
Same as gdk_pixbuf_get_from_drawable() but gets the pixbuf from
an image.


</description>
<parameters>
<parameter name="dest">
<parameter_description> Destination pixbuf, or %NULL if a new pixbuf should be created.
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> Source #GdkImage.
</parameter_description>
</parameter>
<parameter name="cmap">
<parameter_description> A colormap, or %NULL to use the one for @src
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Source Y coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> Destination X coordinate in pixbuf, or 0 if @dest is NULL.
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> Destination Y coordinate in pixbuf, or 0 if @dest is NULL.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width in pixels of region to get.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height in pixels of region to get.
</parameter_description>
</parameter>
</parameters>
<return> @dest, newly-created pixbuf if @dest was %NULL, %NULL on error
</return>
</function>

<function name="gdk_pixbuf_render_pixmap_and_mask">
<description>
Creates a pixmap and a mask bitmap which are returned in the @pixmap_return
and @mask_return arguments, respectively, and renders a pixbuf and its
corresponding thresholded alpha mask to them.  This is merely a convenience
function; applications that need to render pixbufs with dither offsets or to
given drawables should use gdk_draw_pixbuf() and gdk_pixbuf_render_threshold_alpha().

The pixmap that is created is created for the colormap returned
by gdk_rgb_get_colormap(). You normally will want to instead use
the actual colormap for a widget, and use
gdk_pixbuf_render_pixmap_and_mask_for_colormap().

If the pixbuf does not have an alpha channel, then *@mask_return will be set
to %NULL.

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
<parameter name="pixmap_return">
<parameter_description> Location to store a pointer to the created pixmap,
or %NULL if the pixmap is not needed.
</parameter_description>
</parameter>
<parameter name="mask_return">
<parameter_description> Location to store a pointer to the created mask,
or %NULL if the mask is not needed.
</parameter_description>
</parameter>
<parameter name="alpha_threshold">
<parameter_description> Threshold value for opacity values.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_render_pixmap_and_mask_for_colormap">
<description>
Creates a pixmap and a mask bitmap which are returned in the @pixmap_return
and @mask_return arguments, respectively, and renders a pixbuf and its
corresponding tresholded alpha mask to them.  This is merely a convenience
function; applications that need to render pixbufs with dither offsets or to
given drawables should use gdk_draw_pixbuf(), and gdk_pixbuf_render_threshold_alpha().

The pixmap that is created uses the #GdkColormap specified by @colormap.
This colormap must match the colormap of the window where the pixmap
will eventually be used or an error will result.

If the pixbuf does not have an alpha channel, then *@mask_return will be set
to %NULL.

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> A #GdkColormap
</parameter_description>
</parameter>
<parameter name="pixmap_return">
<parameter_description> Location to store a pointer to the created pixmap,
or %NULL if the pixmap is not needed.
</parameter_description>
</parameter>
<parameter name="mask_return">
<parameter_description> Location to store a pointer to the created mask,
or %NULL if the mask is not needed.
</parameter_description>
</parameter>
<parameter name="alpha_threshold">
<parameter_description> Threshold value for opacity values.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_render_threshold_alpha">
<description>
Takes the opacity values in a rectangular portion of a pixbuf and thresholds
them to produce a bi-level alpha mask that can be used as a clipping mask for
a drawable.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
<parameter name="bitmap">
<parameter_description> Bitmap where the bilevel mask will be painted to.
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate.
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> source Y coordinate.
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> Destination X coordinate.
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> Destination Y coordinate.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of region to threshold, or -1 to use pixbuf width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of region to threshold, or -1 to use pixbuf height
</parameter_description>
</parameter>
<parameter name="alpha_threshold">
<parameter_description> Opacity values below this will be painted as zero; all
other values will be painted as one.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_render_to_drawable">
<description>
Renders a rectangular portion of a pixbuf to a drawable while using the
specified GC.  This is done using GdkRGB, so the specified drawable must have
the GdkRGB visual and colormap.  Note that this function will ignore the
opacity information for images with an alpha channel; the GC must already
have the clipping mask set if you want transparent regions to show through.

For an explanation of dither offsets, see the GdkRGB documentation.  In
brief, the dither offset is important when re-rendering partial regions of an
image to a rendered version of the full image, or for when the offsets to a
base position change, as in scrolling.  The dither matrix has to be shifted
for consistent visual results.  If you do not have any of these cases, the
dither offsets can be both zero.

Deprecated: 2.4: This function is obsolete. Use gdk_draw_pixbuf() instead.

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
<parameter name="drawable">
<parameter_description> Destination drawable.
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> GC used for rendering.
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate within pixbuf.
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Source Y coordinate within pixbuf.
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> Destination X coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> Destination Y coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of region to render, in pixels, or -1 to use pixbuf width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of region to render, in pixels, or -1 to use pixbuf height
</parameter_description>
</parameter>
<parameter name="dither">
<parameter_description> Dithering mode for GdkRGB.
</parameter_description>
</parameter>
<parameter name="x_dither">
<parameter_description> X offset for dither.
</parameter_description>
</parameter>
<parameter name="y_dither">
<parameter_description> Y offset for dither.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_render_to_drawable_alpha">
<description>
Renders a rectangular portion of a pixbuf to a drawable.  The destination
drawable must have a colormap. All windows have a colormap, however, pixmaps
only have colormap by default if they were created with a non-%NULL window argument.
Otherwise a colormap must be set on them with gdk_drawable_set_colormap.

On older X servers, rendering pixbufs with an alpha channel involves round trips
to the X server, and may be somewhat slow.

Deprecated: 2.4: This function is obsolete. Use gdk_draw_pixbuf() instead.

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
<parameter name="drawable">
<parameter_description> Destination drawable.
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate within pixbuf.
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Source Y coordinates within pixbuf.
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> Destination X coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> Destination Y coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of region to render, in pixels, or -1 to use pixbuf width.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of region to render, in pixels, or -1 to use pixbuf height.
</parameter_description>
</parameter>
<parameter name="alpha_mode">
<parameter_description> Ignored. Present for backwards compatibility.
</parameter_description>
</parameter>
<parameter name="alpha_threshold">
<parameter_description> Ignored. Present for backwards compatibility
</parameter_description>
</parameter>
<parameter name="dither">
<parameter_description> Dithering mode for GdkRGB.
</parameter_description>
</parameter>
<parameter name="x_dither">
<parameter_description> X offset for dither.
</parameter_description>
</parameter>
<parameter name="y_dither">
<parameter_description> Y offset for dither.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixmap_colormap_create_from_xpm">
<description>
Create a pixmap from a XPM file using a particular colormap.

Deprecated: 2.22: Use a #GdkPixbuf instead. You can use
gdk_pixbuf_new_from_file() to create it.
If you must use a pixmap, use gdk_pixmap_new() to
create it and Cairo to draw the pixbuf onto it.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable, used to determine default values
for the new pixmap. Can be %NULL if @colormap is given.
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> the #GdkColormap that the new pixmap will be use.
If omitted, the colormap for @window will be used.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a pointer to a place to store a bitmap representing
the transparency mask of the XPM file. Can be %NULL,
in which case transparency will be ignored.
</parameter_description>
</parameter>
<parameter name="transparent_color">
<parameter_description> the color to be used for the pixels
that are transparent in the input file. Can be %NULL,
in which case a default color will be used.
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the filename of a file containing XPM data.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkPixmap.

</return>
</function>

<function name="gdk_pixmap_colormap_create_from_xpm_d">
<description>
Create a pixmap from data in XPM format using a particular
colormap.

Deprecated: 2.22: Use a #GdkPixbuf instead. You can use
gdk_pixbuf_new_from_xpm_data() to create it.
If you must use a pixmap, use gdk_pixmap_new() to
create it and Cairo to draw the pixbuf onto it.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable, used to determine default values
for the new pixmap. Can be %NULL if @colormap is given.
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> the #GdkColormap that the new pixmap will be use.
If omitted, the colormap for @window will be used.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a pointer to a place to store a bitmap representing
the transparency mask of the XPM file. Can be %NULL,
in which case transparency will be ignored.
</parameter_description>
</parameter>
<parameter name="transparent_color">
<parameter_description> the color to be used for the pixels
that are transparent in the input file. Can be %NULL,
in which case a default color will be used.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Pointer to a string containing the XPM data.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkPixmap.

</return>
</function>

<function name="gdk_pixmap_create_from_xpm">
<description>
Create a pixmap from a XPM file.

Deprecated: 2.22: Use a #GdkPixbuf instead. You can use
gdk_pixbuf_new_from_file() to create it.
If you must use a pixmap, use gdk_pixmap_new() to
create it and Cairo to draw the pixbuf onto it.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable, used to determine default values
for the new pixmap.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> (out) a pointer to a place to store a bitmap representing
the transparency mask of the XPM file. Can be %NULL,
in which case transparency will be ignored.
</parameter_description>
</parameter>
<parameter name="transparent_color">
<parameter_description> the color to be used for the pixels
that are transparent in the input file. Can be %NULL,
in which case a default color will be used.
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the filename of a file containing XPM data.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkPixmap

</return>
</function>

<function name="gdk_pixmap_create_from_xpm_d">
<description>
Create a pixmap from data in XPM format.

Deprecated: 2.22: Use a #GdkPixbuf instead. You can use
gdk_pixbuf_new_from_xpm_data() to create it.
If you must use a pixmap, use gdk_pixmap_new() to
create it and Cairo to draw the pixbuf onto it.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable, used to determine default values
for the new pixmap.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> Pointer to a place to store a bitmap representing
the transparency mask of the XPM file. Can be %NULL,
in which case transparency will be ignored.
</parameter_description>
</parameter>
<parameter name="transparent_color">
<parameter_description> This color will be used for the pixels
that are transparent in the input file. Can be %NULL
in which case a default color will be used.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Pointer to a string containing the XPM data.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkPixmap.

</return>
</function>

<function name="gdk_pixmap_foreign_new">
<description>
Wraps a native window for the default display in a #GdkPixmap.
This may fail if the pixmap has been destroyed.

For example in the X backend, a native pixmap handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.


</description>
<parameters>
<parameter name="anid">
<parameter_description> a native pixmap handle.
</parameter_description>
</parameter>
</parameters>
<return> the newly-created #GdkPixmap wrapper for the 
native pixmap or %NULL if the pixmap has been destroyed.
</return>
</function>

<function name="gdk_pixmap_foreign_new_for_display">
<description>
Wraps a native pixmap in a #GdkPixmap.
This may fail if the pixmap has been destroyed.

For example in the X backend, a native pixmap handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> The #GdkDisplay where @anid is located.
</parameter_description>
</parameter>
<parameter name="anid">
<parameter_description> a native pixmap handle.
</parameter_description>
</parameter>
</parameters>
<return> the newly-created #GdkPixmap wrapper for the 
native pixmap or %NULL if the pixmap has been destroyed.

</return>
</function>

<function name="gdk_pixmap_foreign_new_for_screen">
<description>
Wraps a native pixmap in a #GdkPixmap.
This may fail if the pixmap has been destroyed.

For example in the X backend, a native pixmap handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.

This function is an alternative to gdk_pixmap_foreign_new_for_display()
for cases where the dimensions of the pixmap are known. For the X
backend, this avoids a roundtrip to the server.

Since: 2.10

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="anid">
<parameter_description> a native pixmap handle
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the pixmap identified by @anid
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the pixmap identified by @anid
</parameter_description>
</parameter>
<parameter name="depth">
<parameter_description> the depth of the pixmap identified by @anid
</parameter_description>
</parameter>
</parameters>
<return> the newly-created #GdkPixmap wrapper for the 
native pixmap or %NULL if the pixmap has been destroyed.

</return>
</function>

<function name="gdk_pixmap_get_size">
<description>
This function is purely to make it possible to query the size of pixmaps
even when compiling without deprecated symbols and you must use pixmaps.
It is identical to gdk_drawable_get_size(), but for pixmaps.

Since: 2.24

</description>
<parameters>
<parameter name="pixmap">
<parameter_description> a #GdkPixmap
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to store @pixmap's width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to store @pixmap's height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixmap_lookup">
<description>
Looks up the #GdkPixmap that wraps the given native pixmap handle.

For example in the X backend, a native pixmap handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.


</description>
<parameters>
<parameter name="anid">
<parameter_description> a native pixmap handle.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkPixmap wrapper for the native pixmap,
or %NULL if there is none.
</return>
</function>

<function name="gdk_pixmap_lookup_for_display">
<description>
Looks up the #GdkPixmap that wraps the given native pixmap handle.

For example in the X backend, a native pixmap handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay associated with @anid
</parameter_description>
</parameter>
<parameter name="anid">
<parameter_description> a native pixmap handle.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkPixmap wrapper for the native pixmap,
or %NULL if there is none.

</return>
</function>

<function name="gdk_pointer_grab_info_libgtk_only">
<description>
Determines information about the current pointer grab.
This is not public API and must not be used by applications.


</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay for which to get the grab information
</parameter_description>
</parameter>
<parameter name="grab_window">
<parameter_description> location to store current grab window
</parameter_description>
</parameter>
<parameter name="owner_events">
<parameter_description> location to store boolean indicating whether
the @owner_events flag to gdk_pointer_grab() was %TRUE.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if this application currently has the
pointer grabbed.
</return>
</function>

<function name="gdk_pointer_is_grabbed">
<description>
Returns %TRUE if the pointer on the default display is currently 
grabbed by this application.

Note that this does not take the inmplicit pointer grab on button
presses into account.


</description>
<parameters>
</parameters>
<return> %TRUE if the pointer is currently grabbed by this application.* 
</return>
</function>

<function name="gdk_pointer_ungrab">
<description>
Ungrabs the pointer on the default display, if it is grabbed by this 
application.

</description>
<parameters>
<parameter name="time_">
<parameter_description> a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no 
timestamp is available.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_query_depths">
<description>
This function returns the available bit depths for the default
screen. It's equivalent to listing the visuals
(gdk_list_visuals()) and then looking at the depth field in each
visual, removing duplicates.

The array returned by this function should not be freed.


</description>
<parameters>
<parameter name="depths">
<parameter_description> return location for available depths
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> return location for number of available depths
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_query_visual_types">
<description>
This function returns the available visual types for the default
screen. It's equivalent to listing the visuals
(gdk_list_visuals()) and then looking at the type field in each
visual, removing duplicates.

The array returned by this function should not be freed.

</description>
<parameters>
<parameter name="visual_types">
<parameter_description> return location for the available visual types
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> return location for the number of available visual types
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_rectangle_intersect">
<description>
Calculates the intersection of two rectangles. It is allowed for
@dest to be the same as either @src1 or @src2. If the rectangles 
do not intersect, @dest's width and height is set to 0 and its x 
and y values are undefined. If you are only interested in whether
the rectangles intersect, but not in the intersecting area itself,
pass %NULL for @dest.


</description>
<parameters>
<parameter name="src1">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
<parameter name="src2">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> return location for the
intersection of @src1 and @src2, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the rectangles intersect.
</return>
</function>

<function name="gdk_rectangle_union">
<description>
Calculates the union of two rectangles.
The union of rectangles @src1 and @src2 is the smallest rectangle which
includes both @src1 and @src2 within it.
It is allowed for @dest to be the same as either @src1 or @src2.

</description>
<parameters>
<parameter name="src1">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
<parameter name="src2">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> return location for the union of @src1 and @src2
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_region_copy">
<description>
Copies @region, creating an identical new region.


</description>
<parameters>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
</parameters>
<return> a new region identical to @region
</return>
</function>

<function name="gdk_region_destroy">
<description>
Destroys a #GdkRegion.

</description>
<parameters>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_region_empty">
<description>
Finds out if the #GdkRegion is empty.


</description>
<parameters>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @region is empty.
</return>
</function>

<function name="gdk_region_equal">
<description>
Finds out if the two regions are the same.


</description>
<parameters>
<parameter name="region1">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="region2">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @region1 and @region2 are equal.
</return>
</function>

<function name="gdk_region_get_clipbox">
<description>
Obtains the smallest rectangle which includes the entire #GdkRegion.


</description>
<parameters>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="rectangle">
<parameter_description> return location for the clipbox
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_region_get_rectangles">
<description>
Obtains the area covered by the region as a list of rectangles.
The array returned in @rectangles must be freed with g_free().

</description>
<parameters>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="rectangles">
<parameter_description> return location for an array of rectangles
</parameter_description>
</parameter>
<parameter name="n_rectangles">
<parameter_description> length of returned array
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_region_intersect">
<description>
Sets the area of @source1 to the intersection of the areas of @source1
and @source2. The resulting area is the set of pixels contained in
both @source1 and @source2.

</description>
<parameters>
<parameter name="source1">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="source2">
<parameter_description> another #GdkRegion
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_region_new">
<description>
Creates a new empty #GdkRegion.


</description>
<parameters>
</parameters>
<return> a new empty #GdkRegion
</return>
</function>

<function name="gdk_region_offset">
<description>
Moves a region the specified distance.

</description>
<parameters>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="dx">
<parameter_description> the distance to move the region horizontally
</parameter_description>
</parameter>
<parameter name="dy">
<parameter_description> the distance to move the region vertically
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_region_point_in">
<description>
Finds out if a point is in a region.


</description>
<parameters>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of a point
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of a point
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the point is in @region.
</return>
</function>

<function name="gdk_region_polygon">
<description>
Creates a new #GdkRegion using the polygon defined by a 
number of points.

Deprecated: 2.22: There is no replacement. For working with paths, please
use Cairo.

</description>
<parameters>
<parameter name="points">
<parameter_description> an array of #GdkPoint structs
</parameter_description>
</parameter>
<parameter name="n_points">
<parameter_description> the number of elements in the @points array
</parameter_description>
</parameter>
<parameter name="fill_rule">
<parameter_description> specifies which pixels are included in the region when the 
polygon overlaps itself.
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkRegion based on the given polygon

</return>
</function>

<function name="gdk_region_rect_equal">
<description>
Finds out if a regions is the same as a rectangle.

Since: 2.18

Deprecated: 2.22: Use gdk_region_new_rect() and gdk_region_equal() to 
achieve the same effect.

</description>
<parameters>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="rectangle">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @region and @rectangle are equal.

</return>
</function>

<function name="gdk_region_rect_in">
<description>
Tests whether a rectangle is within a region.


</description>
<parameters>
<parameter name="region">
<parameter_description> a #GdkRegion.
</parameter_description>
</parameter>
<parameter name="rectangle">
<parameter_description> a #GdkRectangle.
</parameter_description>
</parameter>
</parameters>
<return> %GDK_OVERLAP_RECTANGLE_IN, %GDK_OVERLAP_RECTANGLE_OUT, or
%GDK_OVERLAP_RECTANGLE_PART, depending on whether the rectangle is inside,
outside, or partly inside the #GdkRegion, respectively.
</return>
</function>

<function name="gdk_region_rectangle">
<description>
Creates a new region containing the area @rectangle.


</description>
<parameters>
<parameter name="rectangle">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
</parameters>
<return> a new region
</return>
</function>

<function name="gdk_region_shrink">
<description>
Resizes a region by the specified amount.
Positive values shrink the region. Negative values expand it.

Deprecated: 2.22: There is no replacement for this function.

</description>
<parameters>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="dx">
<parameter_description> the number of pixels to shrink the region horizontally
</parameter_description>
</parameter>
<parameter name="dy">
<parameter_description> the number of pixels to shrink the region vertically
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_region_spans_intersect_foreach">
<description>
Calls a function on each span in the intersection of @region and @spans.

Deprecated: 2.22: There is no replacement.

</description>
<parameters>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="spans">
<parameter_description> an array of #GdkSpans
</parameter_description>
</parameter>
<parameter name="n_spans">
<parameter_description> the length of @spans
</parameter_description>
</parameter>
<parameter name="sorted">
<parameter_description> %TRUE if @spans is sorted wrt. the y coordinate
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call on each span in the intersection
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_region_subtract">
<description>
Subtracts the area of @source2 from the area @source1. The resulting
area is the set of pixels contained in @source1 but not in @source2.

</description>
<parameters>
<parameter name="source1">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="source2">
<parameter_description> another #GdkRegion
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_region_union">
<description>
Sets the area of @source1 to the union of the areas of @source1 and
@source2. The resulting area is the set of pixels contained in
either @source1 or @source2.

</description>
<parameters>
<parameter name="source1">
<parameter_description>  a #GdkRegion
</parameter_description>
</parameter>
<parameter name="source2">
<parameter_description> a #GdkRegion 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_region_union_with_rect">
<description>
Sets the area of @region to the union of the areas of @region and
@rect. The resulting area is the set of pixels contained in
either @region or @rect.

</description>
<parameters>
<parameter name="region">
<parameter_description> a #GdkRegion.
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> a #GdkRectangle.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_region_xor">
<description>
Sets the area of @source1 to the exclusive-OR of the areas of @source1
and @source2. The resulting area is the set of pixels contained in one
or the other of the two sources but not in both.

</description>
<parameters>
<parameter name="source1">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="source2">
<parameter_description> another #GdkRegion
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_rgb_find_color">
<description>
@colormap should be the colormap for the graphics context and
drawable you're using to draw. If you're drawing to a #GtkWidget,
call gtk_widget_get_colormap().

@color should have its %red, %green, and %blue fields initialized;
gdk_rgb_find_color() will fill in the %pixel field with the best
matching pixel from a color cube. The color is then ready to be
used for drawing, e.g. you can call gdk_gc_set_foreground() which
expects %pixel to be initialized.

In many cases, you can avoid this whole issue by calling
gdk_gc_set_rgb_fg_color() or gdk_gc_set_rgb_bg_color(), which
do not expect %pixel to be initialized in advance. If you use those
functions, there's no need for gdk_rgb_find_color().

Deprecated: 2.22: Cairo handles colors automatically.

</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #GdkColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_rgb_get_colormap">
<description>
Get the preferred colormap for rendering image data.  Not a
very useful function; historically, GDK could only render RGB image
data to one colormap and visual, but in the current version it can
render to any colormap and visual. So there's no need to call this
function.

Deprecated: 2.22: Use gdk_screen_get_system_colormap (gdk_screen_get_default ()) instead.

</description>
<parameters>
</parameters>
<return> the preferred colormap

</return>
</function>

<function name="gdk_rgb_get_visual">
<description>
Gets a &quot;preferred visual&quot; chosen by GdkRGB for rendering image data
on the default screen. In previous versions of GDK, this was the
only visual GdkRGB could use for rendering. In current versions,
it's simply the visual GdkRGB would have chosen as the optimal one
in those previous versions. GdkRGB can now render to drawables with
any visual.

Deprecated: 2.22: Use gdk_visual_get_system_visual (gdk_screen_get_default ()) instead.

</description>
<parameters>
</parameters>
<return> The #GdkVisual chosen by GdkRGB.

</return>
</function>

<function name="gdk_screen_broadcast_client_message">
<description>
On X11, sends an X ClientMessage event to all toplevel windows on
@screen. 

Toplevel windows are determined by checking for the WM_STATE property, 
as described in the Inter-Client Communication Conventions Manual (ICCCM).
If no windows are found with the WM_STATE property set, the message is 
sent to all children of the root window.

On Windows, broadcasts a message registered with the name
GDK_WIN32_CLIENT_MESSAGE to all top-level windows. The amount of
data is limited to one long, i.e. four bytes.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> the #GdkScreen where the event will be broadcasted.
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the #GdkEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_get_active_window">
<description>
Returns the screen's currently active window.

On X11, this is done by inspecting the _NET_ACTIVE_WINDOW property
on the root window, as described in the &lt;ulink
url=&quot;http://www.freedesktop.org/Standards/wm-spec&quot;&gt;Extended Window
Manager Hints&lt;/ulink&gt;. If there is no currently currently active
window, or the window manager does not support the
_NET_ACTIVE_WINDOW hint, this function returns %NULL.

On other platforms, this function may return %NULL, depending on whether
it is implementable on that platform.

The returned window should be unrefed using g_object_unref() when
no longer needed.

Since: 2.10

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the currently active window, or %NULL.

</return>
</function>

<function name="gdk_screen_get_default">
<description>
Gets the default screen for the default display. (See
gdk_display_get_default ()).

Since: 2.2

</description>
<parameters>
</parameters>
<return> a #GdkScreen, or %NULL if there is no default display.

</return>
</function>

<function name="gdk_screen_get_default_colormap">
<description>
Gets the default colormap for @screen.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the default #GdkColormap.

</return>
</function>

<function name="gdk_screen_get_display">
<description>
Gets the display to which the @screen belongs.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the display to which @screen belongs

</return>
</function>

<function name="gdk_screen_get_font_options">
<description>
Gets any options previously set with gdk_screen_set_font_options().

Since: 2.10

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the current font options, or %NULL if no default
font options have been set.

</return>
</function>

<function name="gdk_screen_get_height">
<description>
Gets the height of @screen in pixels

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the height of @screen in pixels.

</return>
</function>

<function name="gdk_screen_get_height_mm">
<description>
Returns the height of @screen in millimeters. 
Note that on some X servers this value will not be correct.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the heigth of @screen in millimeters.

</return>
</function>

<function name="gdk_screen_get_monitor_at_point">
<description>
Returns the monitor number in which the point (@x,@y) is located.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate in the virtual screen.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate in the virtual screen.
</parameter_description>
</parameter>
</parameters>
<return> the monitor number in which the point (@x,@y) lies, or
a monitor close to (@x,@y) if the point is not in any monitor.

</return>
</function>

<function name="gdk_screen_get_monitor_at_window">
<description>
Returns the number of the monitor in which the largest area of the 
bounding rectangle of @window resides.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the monitor number in which most of @window is located,
or if @window does not intersect any monitors, a monitor,
close to @window.
</return>
</function>

<function name="gdk_screen_get_monitor_geometry">
<description>
Retrieves the #GdkRectangle representing the size and position of
the individual monitor within the entire screen area.

Note that the size of the entire screen area can be retrieved via
gdk_screen_get_width() and gdk_screen_get_height().

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="monitor_num">
<parameter_description> the monitor number, between 0 and gdk_screen_get_n_monitors (screen)
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> a #GdkRectangle to be filled with the monitor geometry
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_get_monitor_height_mm">
<description>
Gets the height in millimeters of the specified monitor.

Since: 2.14

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="monitor_num">
<parameter_description> number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)
</parameter_description>
</parameter>
</parameters>
<return> the height of the monitor, or -1 if not available

</return>
</function>

<function name="gdk_screen_get_monitor_plug_name">
<description>
Returns the output name of the specified monitor.
Usually something like VGA, DVI, or TV, not the actual
product name of the display device.

Since: 2.14

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="monitor_num">
<parameter_description> number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string containing the name of the monitor,
or %NULL if the name cannot be determined

</return>
</function>

<function name="gdk_screen_get_monitor_width_mm">
<description>
Gets the width in millimeters of the specified monitor, if available.

Since: 2.14

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="monitor_num">
<parameter_description> number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)
</parameter_description>
</parameter>
</parameters>
<return> the width of the monitor, or -1 if not available

</return>
</function>

<function name="gdk_screen_get_n_monitors">
<description>
Returns the number of monitors which @screen consists of.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> number of monitors which @screen consists of

</return>
</function>

<function name="gdk_screen_get_number">
<description>
Gets the index of @screen among the screens in the display
to which it belongs. (See gdk_screen_get_display())

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the index

</return>
</function>

<function name="gdk_screen_get_primary_monitor">
<description>
Gets the primary monitor for @screen.  The primary monitor
is considered the monitor where the 'main desktop' lives.
While normal application windows typically allow the window
manager to place the windows, specialized desktop applications
such as panels should place themselves on the primary monitor.

If no primary monitor is configured by the user, the return value
will be 0, defaulting to the first monitor.

Since: 2.20

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return> An integer index for the primary monitor, or 0 if none is configured.

</return>
</function>

<function name="gdk_screen_get_resolution">
<description>
Gets the resolution for font handling on the screen; see
gdk_screen_set_resolution() for full details.

Since: 2.10

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the current resolution, or -1 if no resolution
has been set.

</return>
</function>

<function name="gdk_screen_get_rgb_colormap">
<description>
Gets the preferred colormap for rendering image data on @screen.
Not a very useful function; historically, GDK could only render RGB
image data to one colormap and visual, but in the current version
it can render to any colormap and visual. So there's no need to
call this function.

Since: 2.2

Deprecated: 2.22: Use gdk_screen_get_system_colormap()

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return> the preferred colormap

</return>
</function>

<function name="gdk_screen_get_rgb_visual">
<description>
Gets a &quot;preferred visual&quot; chosen by GdkRGB for rendering image data
on @screen. In previous versions of
GDK, this was the only visual GdkRGB could use for rendering. In
current versions, it's simply the visual GdkRGB would have chosen as 
the optimal one in those previous versions. GdkRGB can now render to 
drawables with any visual.

Since: 2.2

Deprecated: 2.22: Use gdk_screen_get_system_visual()

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> The #GdkVisual chosen by GdkRGB.

</return>
</function>

<function name="gdk_screen_get_rgba_colormap">
<description>
Gets a colormap to use for creating windows or pixmaps with an
alpha channel. The windowing system on which GTK+ is running
may not support this capability, in which case %NULL will
be returned. Even if a non-%NULL value is returned, its
possible that the window's alpha channel won't be honored
when displaying the window on the screen: in particular, for
X an appropriate windowing manager and compositing manager
must be running to provide appropriate display.

This functionality is not implemented in the Windows backend.

For setting an overall opacity for a top-level window, see
gdk_window_set_opacity().

Since: 2.8

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return> a colormap to use for windows with
an alpha channel or %NULL if the capability is not available.

</return>
</function>

<function name="gdk_screen_get_rgba_visual">
<description>
Gets a visual to use for creating windows or pixmaps with an
alpha channel. See the docs for gdk_screen_get_rgba_colormap()
for caveats.

Since: 2.8

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> a visual to use for windows with an
alpha channel or %NULL if the capability is not available.

</return>
</function>

<function name="gdk_screen_get_root_window">
<description>
Gets the root window of @screen.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the root window

</return>
</function>

<function name="gdk_screen_get_setting">
<description>
Retrieves a desktop-wide setting such as double-click time
for the #GdkScreen @screen. 

FIXME needs a list of valid settings here, or a link to 
more information.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> the #GdkScreen where the setting is located
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the setting
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the value of the setting
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the setting existed and a value was stored
in @value, %FALSE otherwise.

</return>
</function>

<function name="gdk_screen_get_system_colormap">
<description>
Gets the system's default colormap for @screen

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the default colormap for @screen.

</return>
</function>

<function name="gdk_screen_get_system_visual">
<description>
Get the system's default visual for @screen.
This is the visual for the root window of the display.
The return value should not be freed.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return> the system visual

</return>
</function>

<function name="gdk_screen_get_toplevel_windows">
<description>
Obtains a list of all toplevel windows known to GDK on the screen @screen.
A toplevel window is a child of the root window (see
gdk_get_default_root_window()).

The returned list should be freed with g_list_free(), but
its elements need not be freed.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> The #GdkScreen where the toplevels are located.
</parameter_description>
</parameter>
</parameters>
<return>
list of toplevel windows, free with g_list_free()

</return>
</function>

<function name="gdk_screen_get_width">
<description>
Gets the width of @screen in pixels

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the width of @screen in pixels.

</return>
</function>

<function name="gdk_screen_get_width_mm">
<description>
Gets the width of @screen in millimeters. 
Note that on some X servers this value will not be correct.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the width of @screen in millimeters.

</return>
</function>

<function name="gdk_screen_get_window_stack">
<description>
Returns a #GList of #GdkWindow&lt;!-- --&gt;s representing the current
window stack.

On X11, this is done by inspecting the _NET_CLIENT_LIST_STACKING
property on the root window, as described in the &lt;ulink
url=&quot;http://www.freedesktop.org/Standards/wm-spec&quot;&gt;Extended Window
Manager Hints&lt;/ulink&gt;. If the window manager does not support the
_NET_CLIENT_LIST_STACKING hint, this function returns %NULL.

On other platforms, this function may return %NULL, depending on whether
it is implementable on that platform.

The returned list is newly allocated and owns references to the
windows it contains, so it should be freed using g_list_free() and
its windows unrefed using g_object_unref() when no longer needed.

Since: 2.10

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return>
a list of #GdkWindow&lt;!-- --&gt;s for the current window stack,
or %NULL.

</return>
</function>

<function name="gdk_screen_height">
<description>
Returns the height of the default screen in pixels.


</description>
<parameters>
</parameters>
<return> the height of the default screen in pixels.
</return>
</function>

<function name="gdk_screen_height_mm">
<description>
Returns the height of the default screen in millimeters.
Note that on many X servers this value will not be correct.


</description>
<parameters>
</parameters>
<return> the height of the default screen in millimeters,
though it is not always correct.
</return>
</function>

<function name="gdk_screen_is_composited">
<description>
Returns whether windows with an RGBA visual can reasonably
be expected to have their alpha channel drawn correctly on
the screen.

On X11 this function returns whether a compositing manager is
compositing @screen.

Since: 2.10

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> Whether windows with RGBA visuals can reasonably be
expected to have their alpha channels drawn correctly on the screen.

</return>
</function>

<function name="gdk_screen_list_visuals">
<description>
Lists the available visuals for the specified @screen.
A visual describes a hardware image data format.
For example, a visual might support 24-bit color, or 8-bit color,
and might expect pixels to be in a certain format.

Call g_list_free() on the return value when you're finished with it.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> the relevant #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return>
a list of visuals; the list must be freed, but not its contents

</return>
</function>

<function name="gdk_screen_make_display_name">
<description>
Determines the name to pass to gdk_display_open() to get
a #GdkDisplay with this screen as the default screen.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string, free with g_free()

</return>
</function>

<function name="gdk_screen_set_default_colormap">
<description>
Sets the default @colormap for @screen.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_set_font_options">
<description>
Sets the default font options for the screen. These
options will be set on any #PangoContext's newly created
with gdk_pango_context_get_for_screen(). Changing the
default set of font options does not affect contexts that
have already been created.

Since: 2.10

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> a #cairo_font_options_t, or %NULL to unset any
previously set default font options.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_set_resolution">
<description>
Sets the resolution for font handling on the screen. This is a
scale factor between points specified in a #PangoFontDescription
and cairo units. The default value is 96, meaning that a 10 point
font will be 13 units high. (10 * 96. / 72. = 13.3).

Since: 2.10

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="dpi">
<parameter_description> the resolution in &quot;dots per inch&quot;. (Physical inches aren't actually
involved; the terminology is conventional.)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_width">
<description>
Returns the width of the default screen in pixels.


</description>
<parameters>
</parameters>
<return> the width of the default screen in pixels.
</return>
</function>

<function name="gdk_screen_width_mm">
<description>
Returns the width of the default screen in millimeters.
Note that on many X servers this value will not be correct.


</description>
<parameters>
</parameters>
<return> the width of the default screen in millimeters,
though it is not always correct.
</return>
</function>

<function name="gdk_selection_owner_get_for_display">
<description>
Determine the owner of the given selection.

Note that the return value may be owned by a different 
process if a foreign window was previously created for that
window, but a new foreign window will never be created by this call. 

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay.
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> an atom indentifying a selection.
</parameter_description>
</parameter>
</parameters>
<return> if there is a selection owner for this window, and it is a 
window known to the current process, the #GdkWindow that owns the 
selection, otherwise %NULL.

</return>
</function>

<function name="gdk_selection_owner_set_for_display">
<description>
Sets the #GdkWindow @owner as the current owner of the selection @selection.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay.
</parameter_description>
</parameter>
<parameter name="owner">
<parameter_description> a #GdkWindow or %NULL to indicate that the owner for
the given should be unset.
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> an atom identifying a selection.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> timestamp to use when setting the selection. 
If this is older than the timestamp given last time the owner was 
set for the given selection, the request will be ignored.
</parameter_description>
</parameter>
<parameter name="send_event">
<parameter_description> if %TRUE, and the new owner is different from the current
owner, the current owner will be sent a SelectionClear event.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the selection owner was successfully changed to owner,
otherwise %FALSE. 

</return>
</function>

<function name="gdk_selection_property_get">
<description>
Retrieves selection data that was stored by the selection
data in response to a call to gdk_selection_convert(). This function
will not be used by applications, who should use the #GtkClipboard
API instead.


</description>
<parameters>
<parameter name="requestor">
<parameter_description> the window on which the data is stored
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location to store a pointer to the retrieved data.
       If the retrieval failed, %NULL we be stored here, otherwise, it
       will be non-%NULL and the returned data should be freed with g_free()
       when you are finished using it. The length of the
       allocated memory is one more than the length
       of the returned data, and the final byte will always
       be zero, to ensure nul-termination of strings.
</parameter_description>
</parameter>
<parameter name="prop_type">
<parameter_description> location to store the type of the property.
</parameter_description>
</parameter>
<parameter name="prop_format">
<parameter_description> location to store the format of the property.
</parameter_description>
</parameter>
</parameters>
<return> the length of the retrieved data.
</return>
</function>

<function name="gdk_selection_send_notify_for_display">
<description>
Send a response to SelectionRequest event.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay where @requestor is realized
</parameter_description>
</parameter>
<parameter name="requestor">
<parameter_description> window to which to deliver response.
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> selection that was requested.
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> target that was selected.
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> property in which the selection owner stored the data,
or %GDK_NONE to indicate that the request was rejected.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> timestamp. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_set_double_click_time">
<description>
Set the double click time for the default display. See
gdk_display_set_double_click_time(). 
See also gdk_display_set_double_click_distance().
Applications should &lt;emphasis&gt;not&lt;/emphasis&gt; set this, it is a 
global user-configured setting.

</description>
<parameters>
<parameter name="msec">
<parameter_description> double click time in milliseconds (thousandths of a second)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_set_pointer_hooks">
<description>
This function allows for hooking into the operation
of getting the current location of the pointer. This
is only useful for such low-level tools as an
event recorder. Applications should never have any
reason to use this facility.

This function is not multihead safe. For multihead operation,
see gdk_display_set_pointer_hooks().

Deprecated: 2.24: This function will go away in GTK 3 for lack of use cases.

</description>
<parameters>
<parameter name="new_hooks">
<parameter_description> a table of pointers to functions for getting
quantities related to the current pointer position,
or %NULL to restore the default table.
</parameter_description>
</parameter>
</parameters>
<return> the previous pointer hook table

</return>
</function>

<function name="gdk_set_show_events">
<description>
Sets whether a trace of received events is output.
Note that GTK+ must be compiled with debugging (that is,
configured using the &lt;option&gt;--enable-debug&lt;/option&gt; option)
to use this option.

</description>
<parameters>
<parameter name="show_events">
<parameter_description>  %TRUE to output event debugging information.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_set_sm_client_id">
<description>
Sets the &lt;literal&gt;SM_CLIENT_ID&lt;/literal&gt; property on the application's leader window so that
the window manager can save the application's state using the X11R6 ICCCM
session management protocol.

See the X Session Management Library documentation for more information on
session management and the Inter-Client Communication Conventions Manual
(ICCCM) for information on the &lt;literal&gt;WM_CLIENT_LEADER&lt;/literal&gt; property. 
(Both documents are part of the X Window System distribution.)

Deprecated:2.24: Use gdk_x11_set_sm_client_id() instead

</description>
<parameters>
<parameter name="sm_client_id">
<parameter_description> the client id assigned by the session manager when the
connection was opened, or %NULL to remove the property.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_setting_get">
<description>
Obtains a desktop-wide setting, such as the double-click time,
for the default screen. See gdk_screen_get_setting().


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the setting.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the value of the setting.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the setting existed and a value was stored
in @value, %FALSE otherwise.
</return>
</function>

<function name="gdk_spawn_command_line_on_screen">
<description>
Like g_spawn_command_line_async(), except the child process is
spawned in such an environment that on calling gdk_display_open()
it would be returned a #GdkDisplay with @screen as the default
screen.

This is useful for applications which wish to launch an application
on a specific screen.

Since: 2.4

Deprecated: 2.24: This function is being removed in 3.0. Use
either g_spawn_command_line_sync(), g_spawn_command_line_async() or 
#GdkAppLaunchContext instead.

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="command_line">
<parameter_description> a command line
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for errors
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if error is set.

</return>
</function>

<function name="gdk_spawn_on_screen">
<description>
Like g_spawn_async(), except the child process is spawned in such
an environment that on calling gdk_display_open() it would be
returned a #GdkDisplay with @screen as the default screen.

This is useful for applications which wish to launch an application
on a specific screen.

Since: 2.4

Deprecated: 2.24: This function is being removed in 3.0. Use
either g_spawn_sync(), g_spawn_async(), or #GdkAppLaunchContext instead.

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="working_directory">
<parameter_description> child's current working directory, or %NULL to 
inherit parent's
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> child's argument vector
</parameter_description>
</parameter>
<parameter name="envp">
<parameter_description> child's environment, or %NULL to inherit parent's
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags from #GSpawnFlags
</parameter_description>
</parameter>
<parameter name="child_setup">
<parameter_description> function to run in the child just before exec()
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for @child_setup
</parameter_description>
</parameter>
<parameter name="child_pid">
<parameter_description> return location for child process ID, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if error is set

</return>
</function>

<function name="gdk_spawn_on_screen_with_pipes">
<description>
Like g_spawn_async_with_pipes(), except the child process is
spawned in such an environment that on calling gdk_display_open()
it would be returned a #GdkDisplay with @screen as the default
screen.

This is useful for applications which wish to launch an application
on a specific screen.

Since: 2.4

Deprecated: 2.24: This function is being removed in 3.0. Use
either g_spawn_async_with_pipes() or #GdkAppLaunchContext instead.

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="working_directory">
<parameter_description> child's current working directory, or %NULL to 
inherit parent's
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> child's argument vector
</parameter_description>
</parameter>
<parameter name="envp">
<parameter_description> child's environment, or %NULL to inherit parent's
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags from #GSpawnFlags
</parameter_description>
</parameter>
<parameter name="child_setup">
<parameter_description> function to run in the child just before exec()
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for @child_setup
</parameter_description>
</parameter>
<parameter name="child_pid">
<parameter_description> return location for child process ID, or %NULL
</parameter_description>
</parameter>
<parameter name="standard_input">
<parameter_description> return location for file descriptor to write to 
child's stdin, or %NULL
</parameter_description>
</parameter>
<parameter name="standard_output">
<parameter_description> return location for file descriptor to read child's 
stdout, or %NULL
</parameter_description>
</parameter>
<parameter name="standard_error">
<parameter_description> return location for file descriptor to read child's 
stderr, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if an error was set

</return>
</function>

<function name="gdk_string_extents">
<description>
Gets the metrics of a nul-terminated string.

</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the nul-terminated string to measure.
</parameter_description>
</parameter>
<parameter name="lbearing">
<parameter_description> the left bearing of the string.
</parameter_description>
</parameter>
<parameter name="rbearing">
<parameter_description> the right bearing of the string.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the string.
</parameter_description>
</parameter>
<parameter name="ascent">
<parameter_description> the ascent of the string.
</parameter_description>
</parameter>
<parameter name="descent">
<parameter_description> the descent of the string.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_string_height">
<description>
Determines the total height of a given nul-terminated
string. This value is not generally useful, because you
cannot determine how this total height will be drawn in
relation to the baseline. See gdk_string_extents().


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the nul-terminated string to measure.
</parameter_description>
</parameter>
</parameters>
<return> the height of the string in pixels.
</return>
</function>

<function name="gdk_string_measure">
<description>
Determines the distance from the origin to the rightmost
portion of a nul-terminated string when drawn. This is not the
correct value for determining the origin of the next
portion when drawing text in multiple pieces.
See gdk_string_width().


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the nul-terminated string to measure.
</parameter_description>
</parameter>
</parameters>
<return> the right bearing of the string in pixels.
</return>
</function>

<function name="gdk_string_to_compound_text_for_display">
<description>
Convert a string from the encoding of the current 
locale into a form suitable for storing in a window property.

Since: 2.2

Deprecated:2.24: Use gdk_x11_display_string_to_compound_text()

</description>
<parameters>
<parameter name="display">
<parameter_description>  the #GdkDisplay where the encoding is defined.
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description>      a nul-terminated string.
</parameter_description>
</parameter>
<parameter name="encoding">
<parameter_description> location to store the encoding atom 
(to be used as the type for the property).
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description>   location to store the format of the property
</parameter_description>
</parameter>
<parameter name="ctext">
<parameter_description>    location to store newly allocated data for the property.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description>   the length of @text, in bytes
</parameter_description>
</parameter>
</parameters>
<return> 0 upon success, non-zero upon failure. 

</return>
</function>

<function name="gdk_string_width">
<description>
Determines the width of a nul-terminated string.
(The distance from the origin of the string to the 
point where the next string in a sequence of strings
should be drawn)


</description>
<parameters>
<parameter name="font">
<parameter_description>  a #GdkFont
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the nul-terminated string to measure
</parameter_description>
</parameter>
</parameters>
<return> the width of the string in pixels.
</return>
</function>

<function name="gdk_test_render_sync">
<description>
This function retrieves a pixel from @window to force the windowing
system to carry out any pending rendering commands.
This function is intended to be used to syncronize with rendering
pipelines, to benchmark windowing system rendering operations.

Since: 2.14

</description>
<parameters>
<parameter name="window">
<parameter_description> a mapped #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_test_simulate_button">
<description>
This function is intended to be used in GTK+ test programs.
It will warp the mouse pointer to the given (@x,@y) corrdinates
within @window and simulate a button press or release event.
Because the mouse pointer needs to be warped to the target
location, use of this function outside of test programs that
run in their own virtual windowing system (e.g. Xvfb) is not
recommended.

Also, gtk_test_simulate_button() is a fairly low level function,
for most testing purposes, gtk_test_widget_click() is the right
function to call which will generate a button press event followed
by its accompanying button release event.

Since: 2.14

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow to simulate a button event for.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>      x coordinate within @window for the button event.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>      y coordinate within @window for the button event.
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> Number of the pointer button for the event, usually 1, 2 or 3.
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> Keyboard modifiers the event is setup with.
</parameter_description>
</parameter>
<parameter name="button_pressrelease">
<parameter_description> either %GDK_BUTTON_PRESS or %GDK_BUTTON_RELEASE
</parameter_description>
</parameter>
</parameters>
<return> whether all actions neccessary for a button event simulation 
were carried out successfully.

</return>
</function>

<function name="gdk_test_simulate_key">
<description>
This function is intended to be used in GTK+ test programs.
If (@x,@y) are &gt; (-1,-1), it will warp the mouse pointer to
the given (@x,@y) corrdinates within @window and simulate a
key press or release event.

When the mouse pointer is warped to the target location, use
of this function outside of test programs that run in their
own virtual windowing system (e.g. Xvfb) is not recommended.
If (@x,@y) are passed as (-1,-1), the mouse pointer will not
be warped and @window origin will be used as mouse pointer
location for the event.

Also, gtk_test_simulate_key() is a fairly low level function,
for most testing purposes, gtk_test_widget_send_key() is the
right function to call which will generate a key press event
followed by its accompanying key release event.

Since: 2.14

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow to simulate a key event for.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>      x coordinate within @window for the key event.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>      y coordinate within @window for the key event.
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> A GDK keyboard value.
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> Keyboard modifiers the event is setup with.
</parameter_description>
</parameter>
<parameter name="key_pressrelease">
<parameter_description> either %GDK_KEY_PRESS or %GDK_KEY_RELEASE
</parameter_description>
</parameter>
</parameters>
<return> whether all actions neccessary for a key event simulation 
were carried out successfully.

</return>
</function>

<function name="gdk_text_extents">
<description>
Gets the metrics of a string.

</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to measure
</parameter_description>
</parameter>
<parameter name="text_length">
<parameter_description> the length of the text in bytes. (If the
font is a 16-bit font, this is twice the length
of the text in characters.)
</parameter_description>
</parameter>
<parameter name="lbearing">
<parameter_description> the left bearing of the string.
</parameter_description>
</parameter>
<parameter name="rbearing">
<parameter_description> the right bearing of the string.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the string.
</parameter_description>
</parameter>
<parameter name="ascent">
<parameter_description> the ascent of the string.
</parameter_description>
</parameter>
<parameter name="descent">
<parameter_description> the descent of the string.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_text_extents_wc">
<description>
Gets the metrics of a string of wide characters.

</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to measure.
</parameter_description>
</parameter>
<parameter name="text_length">
<parameter_description> the length of the text in character.
</parameter_description>
</parameter>
<parameter name="lbearing">
<parameter_description> the left bearing of the string.
</parameter_description>
</parameter>
<parameter name="rbearing">
<parameter_description> the right bearing of the string.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the string.
</parameter_description>
</parameter>
<parameter name="ascent">
<parameter_description> the ascent of the string.
</parameter_description>
</parameter>
<parameter name="descent">
<parameter_description> the descent of the string.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_text_height">
<description>
Determines the total height of a given string.
This value is not generally useful, because you cannot
determine how this total height will be drawn in
relation to the baseline. See gdk_text_extents().


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to measure.
</parameter_description>
</parameter>
<parameter name="text_length">
<parameter_description> the length of the text in bytes.
</parameter_description>
</parameter>
</parameters>
<return> the height of the string in pixels.
</return>
</function>

<function name="gdk_text_measure">
<description>
Determines the distance from the origin to the rightmost
portion of a string when drawn. This is not the
correct value for determining the origin of the next
portion when drawing text in multiple pieces. 
See gdk_text_width().


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to measure.
</parameter_description>
</parameter>
<parameter name="text_length">
<parameter_description> the length of the text in bytes.
</parameter_description>
</parameter>
</parameters>
<return> the right bearing of the string in pixels.
</return>
</function>

<function name="gdk_text_property_to_text_list_for_display">
<description>
Convert a text string from the encoding as it is stored 
in a property into an array of strings in the encoding of
the current locale. (The elements of the array represent the
nul-separated elements of the original text string.)

Since: 2.2

Deprecated:2.24: Use gdk_x11_display_text_property_to_text_list()

</description>
<parameters>
<parameter name="display">
<parameter_description> The #GdkDisplay where the encoding is defined.
</parameter_description>
</parameter>
<parameter name="encoding">
<parameter_description> an atom representing the encoding. The most 
common values for this are STRING, or COMPOUND_TEXT. 
This is value used as the type for the property.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the property.
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> The text data.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> The number of items to transform.
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> location to store a terminated array of strings in 
the encoding of the current locale. This array should be 
freed using gdk_free_text_list().
</parameter_description>
</parameter>
</parameters>
<return> the number of strings stored in list, or 0, 
if the conversion failed. 

</return>
</function>

<function name="gdk_text_property_to_utf8_list">
<description>
Convert a text property in the giving encoding to
a list of UTF-8 strings. 


</description>
<parameters>
<parameter name="encoding">
<parameter_description> an atom representing the encoding of the text
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description>   the format of the property
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description>     the text to convert
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description>   the length of @text, in bytes
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description>     location to store the list of strings or %NULL. The
list should be freed with g_strfreev().
</parameter_description>
</parameter>
</parameters>
<return> the number of strings in the resulting
list.
</return>
</function>

<function name="gdk_text_property_to_utf8_list_for_display">
<description>
Converts a text property in the given encoding to
a list of UTF-8 strings. 

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description>  a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="encoding">
<parameter_description> an atom representing the encoding of the text
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description>   the format of the property
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description>     the text to convert
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description>   the length of @text, in bytes
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description>     location to store the list of strings or %NULL. The
list should be freed with g_strfreev().
</parameter_description>
</parameter>
</parameters>
<return> the number of strings in the resulting
list.

</return>
</function>

<function name="gdk_text_width">
<description>
Determines the width of a given string.


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to measure.
</parameter_description>
</parameter>
<parameter name="text_length">
<parameter_description> the length of the text in bytes.
</parameter_description>
</parameter>
</parameters>
<return> the width of the string in pixels.
</return>
</function>

<function name="gdk_text_width_wc">
<description>
Determines the width of a given wide-character string.


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to measure.
</parameter_description>
</parameter>
<parameter name="text_length">
<parameter_description> the length of the text in characters.
</parameter_description>
</parameter>
</parameters>
<return> the width of the string in pixels.
</return>
</function>

<function name="gdk_threads_add_idle">
<description>
A wrapper for the common usage of gdk_threads_add_idle_full() 
assigning the default priority, #G_PRIORITY_DEFAULT_IDLE.

See gdk_threads_add_idle_full().

Since: 2.12

</description>
<parameters>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="gdk_threads_add_idle_full">
<description>
Adds a function to be called whenever there are no higher priority
events pending.  If the function returns %FALSE it is automatically
removed from the list of event sources and will not be called again.

This variant of g_idle_add_full() calls @function with the GDK lock
held. It can be thought of a MT-safe version for GTK+ widgets for the 
following use case, where you have to worry about idle_callback()
running in thread A and accessing @self after it has been finalized
in thread B:

|[
static gboolean
idle_callback (gpointer data)
{
/ * gdk_threads_enter(); would be needed for g_idle_add() * /

SomeWidget *self = data;
/ * do stuff with self * /

self-&gt;idle_id = 0;

/ * gdk_threads_leave(); would be needed for g_idle_add() * /
return FALSE;
}

static void
some_widget_do_stuff_later (SomeWidget *self)
{
self-&gt;idle_id = gdk_threads_add_idle (idle_callback, self)
/ * using g_idle_add() here would require thread protection in the callback * /
}

static void
some_widget_finalize (GObject *object)
{
SomeWidget *self = SOME_WIDGET (object);
if (self-&gt;idle_id)
g_source_remove (self-&gt;idle_id);
G_OBJECT_CLASS (parent_class)-&gt;finalize (object);
}
]|

Since: 2.12

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the idle source. Typically this will be in the
range btweeen #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description>   function to call when the idle is removed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="gdk_threads_add_timeout">
<description>
A wrapper for the common usage of gdk_threads_add_timeout_full() 
assigning the default priority, #G_PRIORITY_DEFAULT.

See gdk_threads_add_timeout_full().

Since: 2.12

</description>
<parameters>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
(1/1000ths of a second)
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="gdk_threads_add_timeout_full">
<description>
Sets a function to be called at regular intervals holding the GDK lock,
with the given priority.  The function is called repeatedly until it 
returns %FALSE, at which point the timeout is automatically destroyed 
and the function will not be called again.  The @notify function is
called when the timeout is destroyed.  The first call to the
function will be at the end of the first @interval.

Note that timeout functions may be delayed, due to the processing of other
event sources. Thus they should not be relied on for precise timing.
After each call to the timeout function, the time of the next
timeout is recalculated based on the current time and the given interval
(it does not try to 'catch up' time lost in delays).

This variant of g_timeout_add_full() can be thought of a MT-safe version 
for GTK+ widgets for the following use case:

|[
static gboolean timeout_callback (gpointer data)
{
SomeWidget *self = data;

/ * do stuff with self * /

self-&gt;timeout_id = 0;

return FALSE;
}

static void some_widget_do_stuff_later (SomeWidget *self)
{
self-&gt;timeout_id = g_timeout_add (timeout_callback, self)
}

static void some_widget_finalize (GObject *object)
{
SomeWidget *self = SOME_WIDGET (object);

if (self-&gt;timeout_id)
g_source_remove (self-&gt;timeout_id);

G_OBJECT_CLASS (parent_class)-&gt;finalize (object);
}
]|

Since: 2.12

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the timeout source. Typically this will be in the
range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE.
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
(1/1000ths of a second)
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description>   function to call when the timeout is removed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="gdk_threads_add_timeout_seconds">
<description>
A wrapper for the common usage of gdk_threads_add_timeout_seconds_full() 
assigning the default priority, #G_PRIORITY_DEFAULT.

For details, see gdk_threads_add_timeout_full().

Since: 2.14

</description>
<parameters>
<parameter name="interval">
<parameter_description> the time between calls to the function, in seconds
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="gdk_threads_add_timeout_seconds_full">
<description>
A variant of gdk_threads_add_timout_full() with second-granularity.
See g_timeout_add_seconds_full() for a discussion of why it is
a good idea to use this function if you don't need finer granularity.

Since: 2.14

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the timeout source. Typically this will be in the
range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE.
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> the time between calls to the function, in seconds
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description>   function to call when the timeout is removed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="gdk_threads_init">
<description>
Initializes GDK so that it can be used from multiple threads
in conjunction with gdk_threads_enter() and gdk_threads_leave().
g_thread_init() must be called previous to this function.

This call must be made before any use of the main loop from
GTK+; to be safe, call it before gtk_init().

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_threads_set_lock_functions">
<description>
Allows the application to replace the standard method that
GDK uses to protect its data structures. Normally, GDK
creates a single #GMutex that is locked by gdk_threads_enter(),
and released by gdk_threads_leave(); using this function an
application provides, instead, a function @enter_fn that is
called by gdk_threads_enter() and a function @leave_fn that is
called by gdk_threads_leave().

The functions must provide at least same locking functionality
as the default implementation, but can also do extra application
specific processing.

As an example, consider an application that has its own recursive
lock that when held, holds the GTK+ lock as well. When GTK+ unlocks
the GTK+ lock when entering a recursive main loop, the application
must temporarily release its lock as well.

Most threaded GTK+ apps won't need to use this method.

This method must be called before gdk_threads_init(), and cannot
be called multiple times.

Since: 2.4

</description>
<parameters>
<parameter name="enter_fn">
<parameter_description>   function called to guard GDK
</parameter_description>
</parameter>
<parameter name="leave_fn">
<parameter_description> function called to release the guard
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_unicode_to_keyval">
<description>
Convert from a ISO10646 character to a key symbol.


</description>
<parameters>
<parameter name="wc">
<parameter_description> a ISO10646 encoded character
</parameter_description>
</parameter>
</parameters>
<return> the corresponding GDK key symbol, if one exists.
or, if there is no corresponding symbol, 
wc | 0x01000000
</return>
</function>

<function name="gdk_utf8_to_compound_text">
<description>
Convert from UTF-8 to compound text. 


</description>
<parameters>
<parameter name="str">
<parameter_description>      a UTF-8 string
</parameter_description>
</parameter>
<parameter name="encoding">
<parameter_description> location to store resulting encoding
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description>   location to store format of the result
</parameter_description>
</parameter>
<parameter name="ctext">
<parameter_description>    location to store the data of the result
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description>   location to store the length of the data
stored in @ctext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the conversion succeeded, otherwise
false.
</return>
</function>

<function name="gdk_utf8_to_compound_text_for_display">
<description>
Converts from UTF-8 to compound text. 

Since: 2.2

Deprecated:2.24: Use gdk_x11_display_utf8_to_compound_text()

</description>
<parameters>
<parameter name="display">
<parameter_description>  a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description>      a UTF-8 string
</parameter_description>
</parameter>
<parameter name="encoding">
<parameter_description> location to store resulting encoding
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description>   location to store format of the result
</parameter_description>
</parameter>
<parameter name="ctext">
<parameter_description>    location to store the data of the result
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description>   location to store the length of the data
stored in @ctext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the conversion succeeded, otherwise
%FALSE.

</return>
</function>

<function name="gdk_utf8_to_string_target">
<description>
Converts an UTF-8 string into the best possible representation
as a STRING. The representation of characters not in STRING
is not specified; it may be as pseudo-escape sequences
\x{ABCD}, or it may be in some other form of approximation.


</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 string
</parameter_description>
</parameter>
</parameters>
<return> the newly-allocated string, or %NULL if the
conversion failed. (It should not fail for
any properly formed UTF-8 string unless system
limits like memory or file descriptors are exceeded.)
</return>
</function>

<function name="gdk_visual_get_best">
<description>
Get the visual with the most available colors for the default
GDK screen. The return value should not be freed.


</description>
<parameters>
</parameters>
<return> best visual
</return>
</function>

<function name="gdk_visual_get_best_depth">
<description>
Get the best available depth for the default GDK screen.  &quot;Best&quot;
means &quot;largest,&quot; i.e. 32 preferred over 24 preferred over 8 bits
per pixel.


</description>
<parameters>
</parameters>
<return> best available depth
</return>
</function>

<function name="gdk_visual_get_best_type">
<description>
Return the best available visual type for the default GDK screen.


</description>
<parameters>
</parameters>
<return> best visual type
</return>
</function>

<function name="gdk_visual_get_best_with_both">
<description>
Combines gdk_visual_get_best_with_depth() and gdk_visual_get_best_with_type().


</description>
<parameters>
<parameter name="depth">
<parameter_description> a bit depth
</parameter_description>
</parameter>
<parameter name="visual_type">
<parameter_description> a visual type
</parameter_description>
</parameter>
</parameters>
<return> best visual with both @depth and
@visual_type, or %NULL if none
</return>
</function>

<function name="gdk_visual_get_best_with_depth">
<description>
Get the best visual with depth @depth for the default GDK screen.
Color visuals and visuals with mutable colormaps are preferred
over grayscale or fixed-colormap visuals. The return value should not
be freed. %NULL may be returned if no visual supports @depth.


</description>
<parameters>
<parameter name="depth">
<parameter_description> a bit depth
</parameter_description>
</parameter>
</parameters>
<return> best visual for the given depth
</return>
</function>

<function name="gdk_visual_get_best_with_type">
<description>
Get the best visual of the given @visual_type for the default GDK screen.
Visuals with higher color depths are considered better. The return value
should not be freed. %NULL may be returned if no visual has type
@visual_type.


</description>
<parameters>
<parameter name="visual_type">
<parameter_description> a visual type
</parameter_description>
</parameter>
</parameters>
<return> best visual of the given type
</return>
</function>

<function name="gdk_visual_get_bits_per_rgb">
<description>
Returns the number of significant bits per red, green and blue value.

Since: 2.22

</description>
<parameters>
<parameter name="visual">
<parameter_description> a #GdkVisual
</parameter_description>
</parameter>
</parameters>
<return> The number of significant bits per color value for @visual.

</return>
</function>

<function name="gdk_visual_get_blue_pixel_details">
<description>
Obtains values that are needed to calculate blue pixel values in TrueColor
and DirectColor.  The &quot;mask&quot; is the significant bits within the pixel.
The &quot;shift&quot; is the number of bits left we must shift a primary for it
to be in position (according to the &quot;mask&quot;).  Finally, &quot;precision&quot; refers
to how much precision the pixel value contains for a particular primary.

Since: 2.22

</description>
<parameters>
<parameter name="visual">
<parameter_description> a #GdkVisual
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> A pointer to a #guint32 to be filled in, or %NULL.
</parameter_description>
</parameter>
<parameter name="shift">
<parameter_description> A pointer to a #gint to be filled in, or %NULL.
</parameter_description>
</parameter>
<parameter name="precision">
<parameter_description> A pointer to a #gint to be filled in, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_visual_get_byte_order">
<description>
Returns the byte order of this visual.

Since: 2.22

</description>
<parameters>
<parameter name="visual">
<parameter_description> A #GdkVisual.
</parameter_description>
</parameter>
</parameters>
<return> A #GdkByteOrder stating the byte order of @visual.

</return>
</function>

<function name="gdk_visual_get_colormap_size">
<description>
Returns the size of a colormap for this visual.

Since: 2.22

</description>
<parameters>
<parameter name="visual">
<parameter_description> A #GdkVisual.
</parameter_description>
</parameter>
</parameters>
<return> The size of a colormap that is suitable for @visual.

</return>
</function>

<function name="gdk_visual_get_depth">
<description>
Returns the bit depth of this visual.

Since: 2.22

</description>
<parameters>
<parameter name="visual">
<parameter_description> A #GdkVisual.
</parameter_description>
</parameter>
</parameters>
<return> The bit depth of this visual.

</return>
</function>

<function name="gdk_visual_get_green_pixel_details">
<description>
Obtains values that are needed to calculate green pixel values in TrueColor
and DirectColor.  The &quot;mask&quot; is the significant bits within the pixel.
The &quot;shift&quot; is the number of bits left we must shift a primary for it
to be in position (according to the &quot;mask&quot;).  Finally, &quot;precision&quot; refers
to how much precision the pixel value contains for a particular primary.

Since: 2.22

</description>
<parameters>
<parameter name="visual">
<parameter_description> a #GdkVisual
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> A pointer to a #guint32 to be filled in, or %NULL.
</parameter_description>
</parameter>
<parameter name="shift">
<parameter_description> A pointer to a #gint to be filled in, or %NULL.
</parameter_description>
</parameter>
<parameter name="precision">
<parameter_description> A pointer to a #gint to be filled in, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_visual_get_red_pixel_details">
<description>
Obtains values that are needed to calculate red pixel values in TrueColor
and DirectColor.  The &quot;mask&quot; is the significant bits within the pixel.
The &quot;shift&quot; is the number of bits left we must shift a primary for it
to be in position (according to the &quot;mask&quot;).  Finally, &quot;precision&quot; refers
to how much precision the pixel value contains for a particular primary.

Since: 2.22

</description>
<parameters>
<parameter name="visual">
<parameter_description> A #GdkVisual.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> A pointer to a #guint32 to be filled in, or %NULL.
</parameter_description>
</parameter>
<parameter name="shift">
<parameter_description> A pointer to a #gint to be filled in, or %NULL.
</parameter_description>
</parameter>
<parameter name="precision">
<parameter_description> A pointer to a #gint to be filled in, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_visual_get_screen">
<description>
Gets the screen to which this visual belongs

Since: 2.2

</description>
<parameters>
<parameter name="visual">
<parameter_description> a #GdkVisual
</parameter_description>
</parameter>
</parameters>
<return> the screen to which this visual belongs.

</return>
</function>

<function name="gdk_visual_get_system">
<description>
Get the system's default visual for the default GDK screen.
This is the visual for the root window of the display.
The return value should not be freed.


</description>
<parameters>
</parameters>
<return> system visual
</return>
</function>

<function name="gdk_visual_get_visual_type">
<description>
Returns the type of visual this is (PseudoColor, TrueColor, etc).

Since: 2.22

</description>
<parameters>
<parameter name="visual">
<parameter_description> A #GdkVisual.
</parameter_description>
</parameter>
</parameters>
<return> A #GdkVisualType stating the type of @visual.

</return>
</function>

<function name="gdk_wcstombs">
<description>
Converts a wide character string to a multi-byte string.
(The function name comes from an acronym of 'Wide Character String TO
Multi-Byte String').


</description>
<parameters>
<parameter name="src">
<parameter_description> a wide character string.
</parameter_description>
</parameter>
</parameters>
<return> the multi-byte string corresponding to @src, or %NULL if the
conversion failed. The returned string should be freed with g_free() when no
longer needed.
</return>
</function>

<function name="gdk_win32_hdc_get">
<description>
Allocates a Windows device context handle (HDC) for drawing into
@drawable, and sets it up appropriately according to @usage.

Each #GdkGC can at one time have only one HDC associated with it.

The following flags in @mask are handled:

If %GDK_GC_FOREGROUND is set in @mask, a solid brush of the
foreground color in @gc is selected into the HDC. The text color of
the HDC is also set. If the @drawable has a palette (256-color
mode), the palette is selected and realized.

If any of the line attribute flags (%GDK_GC_LINE_WIDTH,
%GDK_GC_LINE_STYLE, %GDK_GC_CAP_STYLE and %GDK_GC_JOIN_STYLE) is
set in @mask, a solid pen of the foreground color and appropriate
width and stule is created and selected into the HDC. Note that the
dash properties are not completely implemented.

If the %GDK_GC_FONT flag is set, the background mix mode is set to
%TRANSPARENT. and the text alignment is set to
%TA_BASELINE|%TA_LEFT. Note that no font gets selected into the HDC
by this function.

Some things are done regardless of @mask: If the function in @gc is
any other than %GDK_COPY, the raster operation of the HDC is
set. If @gc has a clip mask, the clip region of the HDC is set.

Note that the fill style, tile, stipple, and tile and stipple
origins in the @gc are ignored by this function. (In general, tiles
and stipples can't be implemented directly on Win32; you need to do
multiple pass drawing and blitting to implement tiles or
stipples. GDK does just that when you call the GDK drawing
functions with a GC that asks for tiles or stipples.)

When the HDC is no longer used, it should be released by calling
&lt;function&gt;gdk_win32_hdc_release()&lt;/function&gt; with the same
parameters.

If you modify the HDC by calling &lt;function&gt;SelectObject&lt;/function&gt;
you should undo those modifications before calling
&lt;function&gt;gdk_win32_hdc_release()&lt;/function&gt;.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> destination #GdkDrawable
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> #GdkGC to use for drawing on @drawable
</parameter_description>
</parameter>
<parameter name="usage">
<parameter_description> mask indicating what properties needs to be set up
</parameter_description>
</parameter>
</parameters>
<return> The HDC.
</return>
</function>

<function name="gdk_win32_hdc_release">
<description>
This function deallocates the Windows device context allocated by
&lt;funcion&gt;gdk_win32_hdc_get()&lt;/function&gt;. It should be called with
the same parameters.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> destination #GdkDrawable
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> #GdkGC to use for drawing on @drawable
</parameter_description>
</parameter>
<parameter name="usage">
<parameter_description> mask indicating what properties were set up
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_add_filter">
<description>
Adds an event filter to @window, allowing you to intercept events
before they reach GDK. This is a low-level operation and makes it
easy to break GDK and/or GTK+, so you have to know what you're
doing. Pass %NULL for @window to get all events for all windows,
instead of events for a specific window.

See gdk_display_add_client_message_filter() if you are interested
in X ClientMessage events.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> filter callback
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to filter callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_at_pointer">
<description>
Obtains the window underneath the mouse pointer, returning the
location of that window in @win_x, @win_y. Returns %NULL if the
window under the mouse pointer is not known to GDK (if the window
belongs to another application and a #GdkWindow hasn't been created
for it with gdk_window_foreign_new())

NOTE: For multihead-aware widgets or applications use
gdk_display_get_window_at_pointer() instead.


</description>
<parameters>
<parameter name="win_x">
<parameter_description> return location for origin of the window under the pointer
</parameter_description>
</parameter>
<parameter name="win_y">
<parameter_description> return location for origin of the window under the pointer
</parameter_description>
</parameter>
</parameters>
<return> window under the mouse pointer
</return>
</function>

<function name="gdk_window_beep">
<description>
Emits a short beep associated to @window in the appropriate
display, if supported. Otherwise, emits a short beep on
the display just as gdk_display_beep().

Since: 2.12

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_begin_move_drag">
<description>
Begins a window move operation (for a toplevel window).  You might
use this function to implement a &quot;window move grip,&quot; for
example. The function works best with window managers that support
the &lt;ulink url=&quot;http://www.freedesktop.org/Standards/wm-spec&quot;&gt;Extended 
Window Manager Hints&lt;/ulink&gt;, but has a fallback implementation for
other window managers.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> the button being used to drag
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> root window X coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> root window Y coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp of mouse click that began the drag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_begin_paint_rect">
<description>
A convenience wrapper around gdk_window_begin_paint_region() which
creates a rectangular region for you. See
gdk_window_begin_paint_region() for details.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="rectangle">
<parameter_description> rectangle you intend to draw to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_begin_paint_region">
<description>
Indicates that you are beginning the process of redrawing @region.
A backing store (offscreen buffer) large enough to contain @region
will be created. The backing store will be initialized with the
background color or background pixmap for @window. Then, all
drawing operations performed on @window will be diverted to the
backing store.  When you call gdk_window_end_paint(), the backing
store will be copied to @window, making it visible onscreen. Only
the part of @window contained in @region will be modified; that is,
drawing operations are clipped to @region.

The net result of all this is to remove flicker, because the user
sees the finished product appear all at once when you call
gdk_window_end_paint(). If you draw to @window directly without
calling gdk_window_begin_paint_region(), the user may see flicker
as individual drawing operations are performed in sequence.  The
clipping and background-initializing features of
gdk_window_begin_paint_region() are conveniences for the
programmer, so you can avoid doing that work yourself.

When using GTK+, the widget system automatically places calls to
gdk_window_begin_paint_region() and gdk_window_end_paint() around
emissions of the expose_event signal. That is, if you're writing an
expose event handler, you can assume that the exposed area in
#GdkEventExpose has already been cleared to the window background,
is already set as the clip region, and already has a backing store.
Therefore in most cases, application code need not call
gdk_window_begin_paint_region(). (You can disable the automatic
calls around expose events on a widget-by-widget basis by calling
gtk_widget_set_double_buffered().)

If you call this function multiple times before calling the
matching gdk_window_end_paint(), the backing stores are pushed onto
a stack. gdk_window_end_paint() copies the topmost backing store
onscreen, subtracts the topmost region from all other regions in
the stack, and pops the stack. All drawing operations affect only
the topmost backing store in the stack. One matching call to
gdk_window_end_paint() is required for each call to
gdk_window_begin_paint_region().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> region you intend to draw to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_begin_resize_drag">
<description>
Begins a window resize operation (for a toplevel window).
You might use this function to implement a &quot;window resize grip,&quot; for
example; in fact #GtkStatusbar uses it. The function works best
with window managers that support the &lt;ulink url=&quot;http://www.freedesktop.org/Standards/wm-spec&quot;&gt;Extended Window Manager Hints&lt;/ulink&gt;, but has a 
fallback implementation for other window managers.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="edge">
<parameter_description> the edge or corner from which the drag is started
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> the button being used to drag
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> root window X coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> root window Y coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp of mouse click that began the drag (use gdk_event_get_time())
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_clear">
<description>
Clears an entire @window to the background color or background pixmap.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_clear_area">
<description>
Clears an area of @window to the background color or background pixmap.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate of rectangle to clear
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate of rectangle to clear
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of rectangle to clear
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of rectangle to clear
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_clear_area_e">
<description>
Like gdk_window_clear_area(), but also generates an expose event for
the cleared area.

This function has a stupid name because it dates back to the mists
time, pre-GDK-1.0.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate of rectangle to clear
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate of rectangle to clear
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of rectangle to clear
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of rectangle to clear
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_configure_finished">
<description>
Signal to the window system that the application has finished
handling Configure events it has received. Window Managers can
use this to better synchronize the frame repaint with the
application. GTK+ applications will automatically call this
function when appropriate.

This function can only be called if gdk_window_enable_synchronized_configure()
was called previously.

Since: 2.6

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_constrain_size">
<description>
Constrains a desired width and height according to a
set of geometry hints (such as minimum and maximum size).

</description>
<parameters>
<parameter name="geometry">
<parameter_description> a #GdkGeometry structure
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a mask indicating what portions of @geometry are set
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> desired width of window
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> desired height of the window
</parameter_description>
</parameter>
<parameter name="new_width">
<parameter_description> location to store resulting width
</parameter_description>
</parameter>
<parameter name="new_height">
<parameter_description> location to store resulting height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_coords_from_parent">
<description>
Transforms window coordinates from a parent window to a child
window, where the parent window is the normal parent as returned by
gdk_window_get_parent() for normal windows, and the window's
embedder as returned by gdk_offscreen_window_get_embedder() for
offscreen windows.

For normal windows, calling this function is equivalent to subtracting
the return values of gdk_window_get_position() from the parent coordinates.
For offscreen windows however (which can be arbitrarily transformed),
this function calls the GdkWindow::from-embedder: signal to translate
the coordinates.

You should always use this function when writing generic code that
walks down a window hierarchy.

See also: gdk_window_coords_to_parent()

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a child window
</parameter_description>
</parameter>
<parameter name="parent_x">
<parameter_description> X coordinate in parent's coordinate system
</parameter_description>
</parameter>
<parameter name="parent_y">
<parameter_description> Y coordinate in parent's coordinate system
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X coordinate in child's coordinate system
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y coordinate in child's coordinate system
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_coords_to_parent">
<description>
Transforms window coordinates from a child window to its parent
window, where the parent window is the normal parent as returned by
gdk_window_get_parent() for normal windows, and the window's
embedder as returned by gdk_offscreen_window_get_embedder() for
offscreen windows.

For normal windows, calling this function is equivalent to adding
the return values of gdk_window_get_position() to the child coordinates.
For offscreen windows however (which can be arbitrarily transformed),
this function calls the GdkWindow::to-embedder: signal to translate
the coordinates.

You should always use this function when writing generic code that
walks up a window hierarchy.

See also: gdk_window_coords_from_parent()

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a child window
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate in child's coordinate system
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate in child's coordinate system
</parameter_description>
</parameter>
<parameter name="parent_x">
<parameter_description> return location for X coordinate
in parent's coordinate system, or %NULL
</parameter_description>
</parameter>
<parameter name="parent_y">
<parameter_description> return location for Y coordinate
in parent's coordinate system, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_create_similar_surface">
<description>
Create a new surface that is as compatible as possible with the
given @window. For example the new surface will have the same
fallback resolution and font options as @window. Generally, the new
surface will also use the same backend as @window, unless that is
not possible for some reason. The type of the returned surface may
be examined with cairo_surface_get_type().

Initially the surface contents are all 0 (transparent if contents
have transparency, black otherwise.)

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> window to make new surface similar to
</parameter_description>
</parameter>
<parameter name="content">
<parameter_description> the content for the new surface
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the new surface
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the new surface
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly allocated surface. The caller
owns the surface and should call cairo_surface_destroy() when done
with it.

This function always returns a valid pointer, but it will return a
pointer to a &quot;nil&quot; surface if @other is already in an error state
or any other error occurs.

</return>
</function>

<function name="gdk_window_deiconify">
<description>
Attempt to deiconify (unminimize) @window. On X11 the window manager may
choose to ignore the request to deiconify. When using GTK+,
use gtk_window_deiconify() instead of the #GdkWindow variant. Or better yet,
you probably want to use gtk_window_present(), which raises the window, focuses it,
unminimizes it, and puts it on the current desktop.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_destroy">
<description>
Destroys the window system resources associated with @window and decrements @window's
reference count. The window system resources for all children of @window are also
destroyed, but the children's reference counts are not decremented.

Note that a window will not be destroyed automatically when its reference count
reaches zero. You must call this function yourself before that happens.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_enable_synchronized_configure">
<description>
Indicates that the application will cooperate with the window
system in synchronizing the window repaint with the window
manager during resizing operations. After an application calls
this function, it must call gdk_window_configure_finished() every
time it has finished all processing associated with a set of
Configure events. Toplevel GTK+ windows automatically use this
protocol.

On X, calling this function makes @window participate in the
_NET_WM_SYNC_REQUEST window manager protocol.

Since: 2.6

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_end_paint">
<description>
Indicates that the backing store created by the most recent call to
gdk_window_begin_paint_region() should be copied onscreen and
deleted, leaving the next-most-recent backing store or no backing
store at all as the active paint region. See
gdk_window_begin_paint_region() for full details. It is an error to
call this function without a matching
gdk_window_begin_paint_region() first.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_ensure_native">
<description>
Tries to ensure that there is a window-system native window for this
GdkWindow. This may fail in some situations, returning %FALSE.

Offscreen window and children of them can never have native windows.

Some backends may not support native child windows.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window has a native window, %FALSE otherwise

</return>
</function>

<function name="gdk_window_flush">
<description>
Flush all outstanding cached operations on a window, leaving the
window in a state which reflects all that has been drawn before.

Gdk uses multiple kinds of caching to get better performance and
nicer drawing. For instance, during exposes all paints to a window
using double buffered rendering are keep on a pixmap until the last
window has been exposed. It also delays window moves/scrolls until
as long as possible until next update to avoid tearing when moving
windows.

Normally this should be completely invisible to applications, as
we automatically flush the windows when required, but this might
be needed if you for instance mix direct native drawing with
gdk drawing. For Gtk widgets that don't use double buffering this
will be called automatically before sending the expose event.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_focus">
<description>
Sets keyboard focus to @window. In most cases, gtk_window_present() 
should be used on a #GtkWindow, rather than calling this function.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp of the event triggering the window focus
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_foreign_new">
<description>
Wraps a native window for the default display in a #GdkWindow.
This may fail if the window has been destroyed.

For example in the X backend, a native window handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.


</description>
<parameters>
<parameter name="anid">
<parameter_description> a native window handle.
</parameter_description>
</parameter>
</parameters>
<return> the newly-created #GdkWindow wrapper for the
native window or %NULL if the window has been destroyed.
</return>
</function>

<function name="gdk_window_foreign_new_for_display">
<description>
Wraps a native window in a #GdkWindow.
This may fail if the window has been destroyed. If the window
was already known to GDK, a new reference to the existing 
#GdkWindow is returned.

For example in the X backend, a native window handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.

Since: 2.2

Deprecated:2.24: Use gdk_x11_window_foreign_new_for_display() or
equivalent backend-specific API instead

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay where the window handle comes from.
</parameter_description>
</parameter>
<parameter name="anid">
<parameter_description> a native window handle.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkWindow wrapper for the native window or
%NULL if the window has been destroyed. The wrapper will be
newly created, if one doesn't exist already.

</return>
</function>

<function name="gdk_window_freeze_toplevel_updates_libgtk_only">
<description>
Temporarily freezes a window and all its descendants such that it won't
receive expose events.  The window will begin receiving expose events
again when gdk_window_thaw_toplevel_updates_libgtk_only() is called. If
gdk_window_freeze_toplevel_updates_libgtk_only()
has been called more than once,
gdk_window_thaw_toplevel_updates_libgtk_only() must be called
an equal number of times to begin processing exposes.

This function is not part of the GDK public API and is only
for use by GTK+.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_freeze_updates">
<description>
Temporarily freezes a window such that it won't receive expose
events.  The window will begin receiving expose events again when
gdk_window_thaw_updates() is called. If gdk_window_freeze_updates()
has been called more than once, gdk_window_thaw_updates() must be called
an equal number of times to begin processing exposes.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_fullscreen">
<description>
Moves the window into fullscreen mode. This means the
window covers the entire screen and is above any panels
or task bars.

If the window was already fullscreen, then this function does nothing.

On X11, asks the window manager to put @window in a fullscreen
state, if the window manager supports this operation. Not all
window managers support this, and some deliberately ignore it or
don't have a concept of &quot;fullscreen&quot;; so you can't rely on the
fullscreenification actually happening. But it will happen with
most standard window managers, and GDK makes a best effort to get
it to happen.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_geometry_changed">
<description>
This function informs GDK that the geometry of an embedded
offscreen window has changed. This is necessary for GDK to keep
track of which offscreen window the pointer is in.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> an embedded offscreen #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_accept_focus">
<description>
Determines whether or not the desktop environment shuld be hinted that
the window does not want to receive input focus.

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow.
</parameter_description>
</parameter>
</parameters>
<return> whether or not the window should receive input focus.

</return>
</function>

<function name="gdk_window_get_background_pattern">
<description>
Gets the pattern used to clear the background on @window. If @window
does not have its own background and reuses the parent's, %NULL is
returned and you'll have to query it yourself.

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a window
</parameter_description>
</parameter>
</parameters>
<return> The pattern to use for the background or
%NULL to use the parent's background.

</return>
</function>

<function name="gdk_window_get_children">
<description>
Gets the list of children of @window known to GDK.
This function only returns children created via GDK,
so for example it's useless when used with the root window;
it only returns windows an application created itself.

The returned list must be freed, but the elements in the
list need not be.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return>
list of child windows inside @window
</return>
</function>

<function name="gdk_window_get_composited">
<description>
Determines whether @window is composited.

See gdk_window_set_composited().

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window is composited.

</return>
</function>

<function name="gdk_window_get_cursor">
<description>
Retrieves a #GdkCursor pointer for the cursor currently set on the
specified #GdkWindow, or %NULL.  If the return value is %NULL then
there is no custom cursor set on the specified window, and it is
using the cursor for its parent window.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> a #GdkCursor, or %NULL. The returned
object is owned by the #GdkWindow and should not be unreferenced
directly. Use gdk_window_set_cursor() to unset the cursor of the
window

</return>
</function>

<function name="gdk_window_get_decorations">
<description>
Returns the decorations set on the GdkWindow with #gdk_window_set_decorations

</description>
<parameters>
<parameter name="window">
<parameter_description> The toplevel #GdkWindow to get the decorations from
</parameter_description>
</parameter>
<parameter name="decorations">
<parameter_description> The window decorations will be written here
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the window has decorations set, FALSE otherwise.
</return>
</function>

<function name="gdk_window_get_deskrelative_origin">
<description>
This gets the origin of a #GdkWindow relative to
an Enlightenment-window-manager desktop. As long as you don't
assume that the user's desktop/workspace covers the entire
root window (i.e. you don't assume that the desktop begins
at root window coordinate 0,0) this function is not necessary.
It's deprecated for that reason.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y coordinate
</parameter_description>
</parameter>
</parameters>
<return> not meaningful
</return>
</function>

<function name="gdk_window_get_display">
<description>
Gets the #GdkDisplay associated with a #GdkWindow.

Since: 2.24

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDisplay associated with @window

</return>
</function>

<function name="gdk_window_get_effective_parent">
<description>
Obtains the parent of @window, as known to GDK. Works like
gdk_window_get_parent() for normal windows, but returns the
window's embedder for offscreen windows.

See also: gdk_offscreen_window_get_embedder()

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> effective parent of @window

</return>
</function>

<function name="gdk_window_get_effective_toplevel">
<description>
Gets the toplevel window that's an ancestor of @window.

Works like gdk_window_get_toplevel(), but treats an offscreen window's
embedder as its parent, using gdk_window_get_effective_parent().

See also: gdk_offscreen_window_get_embedder()

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the effective toplevel window containing @window

</return>
</function>

<function name="gdk_window_get_events">
<description>
Gets the event mask for @window. See gdk_window_set_events().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> event mask for @window
</return>
</function>

<function name="gdk_window_get_focus_on_map">
<description>
Determines whether or not the desktop environment should be hinted that the
window does not want to receive input focus when it is mapped.

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow.
</parameter_description>
</parameter>
</parameters>
<return> whether or not the window wants to receive input focus when
it is mapped.

</return>
</function>

<function name="gdk_window_get_frame_extents">
<description>
Obtains the bounding box of the window, including window manager
titlebar/borders if any. The frame position is given in root window
coordinates. To get the position of the window itself (rather than
the frame) in root window coordinates, use gdk_window_get_origin().


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> rectangle to fill with bounding box of the window frame
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_geometry">
<description>
Any of the return location arguments to this function may be %NULL,
if you aren't interested in getting the value of that field.

The X and Y coordinates returned are relative to the parent window
of @window, which for toplevels usually means relative to the
window decorations (titlebar, etc.) rather than relative to the
root window (screen-size background window).

On the X11 platform, the geometry is obtained from the X server,
so reflects the latest position of @window; this may be out-of-sync
with the position of @window delivered in the most-recently-processed
#GdkEventConfigure. gdk_window_get_position() in contrast gets the
position from the most recent configure event.

&lt;note&gt;
If @window is not a toplevel, it is &lt;emphasis&gt;much&lt;/emphasis&gt; better
to call gdk_window_get_position() and gdk_drawable_get_size() instead,
because it avoids the roundtrip to the X server and because
gdk_drawable_get_size() supports the full 32-bit coordinate space,
whereas gdk_window_get_geometry() is restricted to the 16-bit
coordinates of X11.
&lt;/note&gt;

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X coordinate of window (relative to its parent)
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y coordinate of window (relative to its parent)
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for width of window
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for height of window
</parameter_description>
</parameter>
<parameter name="depth">
<parameter_description> return location for bit depth of window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_group">
<description>
Returns the group leader window for @window. See gdk_window_set_group().

Since: 2.4

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the group leader window for @window

</return>
</function>

<function name="gdk_window_get_height">
<description>
Returns the height of the given @window.

On the X11 platform the returned size is the size reported in the
most-recently-processed configure event, rather than the current
size on the X server.

Since: 2.24

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> The height of @window

</return>
</function>

<function name="gdk_window_get_internal_paint_info">
<description>
If you bypass the GDK layer and use windowing system primitives to
draw directly onto a #GdkWindow, then you need to deal with two
details: there may be an offset between GDK coordinates and windowing
system coordinates, and GDK may have redirected drawing to a offscreen
pixmap as the result of a gdk_window_begin_paint_region() calls.
This function allows retrieving the information you need to compensate
for these effects.

This function exposes details of the GDK implementation, and is thus
likely to change in future releases of GDK.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="real_drawable">
<parameter_description> location to store the drawable to which drawing should be
done.
</parameter_description>
</parameter>
<parameter name="x_offset">
<parameter_description> location to store the X offset between coordinates in @window,
and the underlying window system primitive coordinates for
*@real_drawable.
</parameter_description>
</parameter>
<parameter name="y_offset">
<parameter_description> location to store the Y offset between coordinates in @window,
and the underlying window system primitive coordinates for
*@real_drawable.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_modal_hint">
<description>
Determines whether or not the window manager is hinted that @window
has modal behaviour.

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> A toplevel #GdkWindow.
</parameter_description>
</parameter>
</parameters>
<return> whether or not the window has the modal hint set.

</return>
</function>

<function name="gdk_window_get_origin">
<description>
Obtains the position of a window in root window coordinates.
(Compare with gdk_window_get_position() and
gdk_window_get_geometry() which return the position of a window
relative to its parent window.)


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y coordinate
</parameter_description>
</parameter>
</parameters>
<return> not meaningful, ignore
</return>
</function>

<function name="gdk_window_get_parent">
<description>
Obtains the parent of @window, as known to GDK. Does not query the
X server; thus this returns the parent as passed to gdk_window_new(),
not the actual parent. This should never matter unless you're using
Xlib calls mixed with GDK calls on the X11 platform. It may also
matter for toplevel windows, because the window manager may choose
to reparent them.

Note that you should use gdk_window_get_effective_parent() when
writing generic code that walks up a window hierarchy, because
gdk_window_get_parent() will most likely not do what you expect if
there are offscreen windows in the hierarchy.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> parent of @window
</return>
</function>

<function name="gdk_window_get_pointer">
<description>
Obtains the current pointer position and modifier state.
The position is given in coordinates relative to the upper left
corner of @window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X coordinate of pointer or %NULL to not
return the X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>  return location for Y coordinate of pointer or %NULL to not
return the Y coordinate
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> return location for modifier mask or %NULL to not return the
modifier mask
</parameter_description>
</parameter>
</parameters>
<return> the window containing the pointer (as with
gdk_window_at_pointer()), or %NULL if the window containing the
pointer isn't known to GDK
</return>
</function>

<function name="gdk_window_get_position">
<description>
Obtains the position of the window as reported in the
most-recently-processed #GdkEventConfigure. Contrast with
gdk_window_get_geometry() which queries the X server for the
current window position, regardless of which events have been
received or processed.

The position coordinates are relative to the window's parent window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of window
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_root_coords">
<description>
Obtains the position of a window position in root
window coordinates. This is similar to
gdk_window_get_origin() but allows you go pass
in any position in the window, not just the origin.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate in window
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate in window
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> return location for X coordinate
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> return location for Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_root_origin">
<description>
Obtains the top-left corner of the window manager frame in root
window coordinates.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X position of window frame
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y position of window frame
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_screen">
<description>
Gets the #GdkScreen associated with a #GdkWindow.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the #GdkScreen associated with @window
</return>
</function>

<function name="gdk_window_get_state">
<description>
Gets the bitwise OR of the currently active window state flags,
from the #GdkWindowState enumeration.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> window state bitfield
</return>
</function>

<function name="gdk_window_get_toplevel">
<description>
Gets the toplevel window that's an ancestor of @window.

Any window type but %GDK_WINDOW_CHILD is considered a
toplevel window, as is a %GDK_WINDOW_CHILD window that
has a root window as parent.

Note that you should use gdk_window_get_effective_toplevel() when
you want to get to a window's toplevel as seen on screen, because
gdk_window_get_toplevel() will most likely not do what you expect
if there are offscreen windows in the hierarchy.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the toplevel window containing @window
</return>
</function>

<function name="gdk_window_get_toplevels">
<description>
Obtains a list of all toplevel windows known to GDK on the default
screen (see gdk_screen_get_toplevel_windows()).
A toplevel window is a child of the root window (see
gdk_get_default_root_window()).

The returned list should be freed with g_list_free(), but
its elements need not be freed.

Deprecated: 2.16: Use gdk_screen_get_toplevel_windows() instead.

</description>
<parameters>
</parameters>
<return> list of toplevel windows, free with g_list_free()

</return>
</function>

<function name="gdk_window_get_type_hint">
<description>
This function returns the type hint set for a window.

Since: 2.10

</description>
<parameters>
<parameter name="window">
<parameter_description> A toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> The type hint set for @window

</return>
</function>

<function name="gdk_window_get_update_area">
<description>
Transfers ownership of the update area from @window to the caller
of the function. That is, after calling this function, @window will
no longer have an invalid/dirty region; the update area is removed
from @window and handed to you. If a window has no update area,
gdk_window_get_update_area() returns %NULL. You are responsible for
calling gdk_region_destroy() on the returned region if it's non-%NULL.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the update area for @window
</return>
</function>

<function name="gdk_window_get_user_data">
<description>
Retrieves the user data for @window, which is normally the widget
that @window belongs to. See gdk_window_set_user_data().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> return location for user data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_visual">
<description>
Gets the #GdkVisual describing the pixel format of @window.

Since: 2.24

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> a #GdkVisual

</return>
</function>

<function name="gdk_window_get_width">
<description>
Returns the width of the given @window.

On the X11 platform the returned size is the size reported in the
most-recently-processed configure event, rather than the current
size on the X server.

Since: 2.24

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> The width of @window

</return>
</function>

<function name="gdk_window_get_window_type">
<description>
Gets the type of the window. See #GdkWindowType.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> type of window
</return>
</function>

<function name="gdk_window_has_native">
<description>
Checks whether the window has a native window or not. Note that
you can use gdk_window_ensure_native() if a native window is needed.

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the %window has a native window, %FALSE otherwise.

</return>
</function>

<function name="gdk_window_hide">
<description>
For toplevel windows, withdraws them, so they will no longer be
known to the window manager; for all windows, unmaps them, so
they won't be displayed. Normally done automatically as
part of gtk_widget_hide().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_iconify">
<description>
Asks to iconify (minimize) @window. The window manager may choose
to ignore the request, but normally will honor it. Using
gtk_window_iconify() is preferred, if you have a #GtkWindow widget.

This function only makes sense when @window is a toplevel window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_input_shape_combine_mask">
<description>
Like gdk_window_shape_combine_mask(), but the shape applies
only to event handling. Mouse events which happen while
the pointer position corresponds to an unset bit in the
mask will be passed on the window below @window.

An input shape is typically used with RGBA windows.
The alpha channel of the window defines which pixels are
invisible and allows for nicely antialiased borders,
and the input shape controls where the window is
&quot;clickable&quot;.

On the X11 platform, this requires version 1.1 of the
shape extension.

On the Win32 platform, this functionality is not present and the
function does nothing.

Since: 2.10

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> shape mask, or %NULL
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X position of shape mask with respect to @window
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y position of shape mask with respect to @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_input_shape_combine_region">
<description>
Like gdk_window_shape_combine_region(), but the shape applies
only to event handling. Mouse events which happen while
the pointer position corresponds to an unset bit in the
mask will be passed on the window below @window.

An input shape is typically used with RGBA windows.
The alpha channel of the window defines which pixels are
invisible and allows for nicely antialiased borders,
and the input shape controls where the window is
&quot;clickable&quot;.

On the X11 platform, this requires version 1.1 of the
shape extension.

On the Win32 platform, this functionality is not present and the
function does nothing.

Since: 2.10

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="shape_region">
<parameter_description> region of window to be non-transparent
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> X position of @shape_region in @window coordinates
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> Y position of @shape_region in @window coordinates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_invalidate_maybe_recurse">
<description>
Adds @region to the update area for @window. The update area is the
region that needs to be redrawn, or &quot;dirty region.&quot; The call
gdk_window_process_updates() sends one or more expose events to the
window, which together cover the entire update area. An
application would normally redraw the contents of @window in
response to those expose events.

GDK will call gdk_window_process_all_updates() on your behalf
whenever your program returns to the main loop and becomes idle, so
normally there's no need to do that manually, you just need to
invalidate regions that you know should be redrawn.

The @child_func parameter controls whether the region of
each child window that intersects @region will also be invalidated.
Only children for which @child_func returns TRUE will have the area
invalidated.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="child_func">
<parameter_description> function to use to decide if to recurse to a child,
%NULL means never recurse.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data passed to @child_func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_invalidate_rect">
<description>
A convenience wrapper around gdk_window_invalidate_region() which
invalidates a rectangular region. See
gdk_window_invalidate_region() for details.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> rectangle to invalidate or %NULL to invalidate the whole
window
</parameter_description>
</parameter>
<parameter name="invalidate_children">
<parameter_description> whether to also invalidate child windows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_invalidate_region">
<description>
Adds @region to the update area for @window. The update area is the
region that needs to be redrawn, or &quot;dirty region.&quot; The call
gdk_window_process_updates() sends one or more expose events to the
window, which together cover the entire update area. An
application would normally redraw the contents of @window in
response to those expose events.

GDK will call gdk_window_process_all_updates() on your behalf
whenever your program returns to the main loop and becomes idle, so
normally there's no need to do that manually, you just need to
invalidate regions that you know should be redrawn.

The @invalidate_children parameter controls whether the region of
each child window that intersects @region will also be invalidated.
If %FALSE, then the update area for child windows will remain
unaffected. See gdk_window_invalidate_maybe_recurse if you need
fine grained control over which children are invalidated.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="invalidate_children">
<parameter_description> %TRUE to also invalidate child windows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_is_destroyed">
<description>
Check to see if a window is destroyed..

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window is destroyed

</return>
</function>

<function name="gdk_window_is_input_only">
<description>
Determines whether or not the window is an input only window.

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @window is input only

</return>
</function>

<function name="gdk_window_is_shaped">
<description>
Determines whether or not the window is shaped.

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @window is shaped

</return>
</function>

<function name="gdk_window_is_viewable">
<description>
Check if the window and all ancestors of the window are
mapped. (This is not necessarily &quot;viewable&quot; in the X sense, since
we only check as far as we have GDK window parents, not to the root
window.)


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window is viewable
</return>
</function>

<function name="gdk_window_is_visible">
<description>
Checks whether the window has been mapped (with gdk_window_show() or
gdk_window_show_unraised()).


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window is mapped
</return>
</function>

<function name="gdk_window_lookup">
<description>
Looks up the #GdkWindow that wraps the given native window handle. 

For example in the X backend, a native window handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.

Deprecated: 2.24: Use gdk_x11_window_lookup_for_display() or equivalent
backend-specific functionality instead

</description>
<parameters>
<parameter name="anid">
<parameter_description> a native window handle.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkWindow wrapper for the native window,
or %NULL if there is none.

</return>
</function>

<function name="gdk_window_lookup_for_display">
<description>
Looks up the #GdkWindow that wraps the given native window handle.

For example in the X backend, a native window handle is an Xlib
&lt;type&gt;XID&lt;/type&gt;.

Since: 2.2

Deprecated:2.24: Use gdk_x11_window_lookup_for_display() instead

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay corresponding to the window handle
</parameter_description>
</parameter>
<parameter name="anid">
<parameter_description> a native window handle.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkWindow wrapper for the native window,
or %NULL if there is none.

</return>
</function>

<function name="gdk_window_lower">
<description>
Lowers @window to the bottom of the Z-order (stacking order), so that
other windows with the same parent window appear above @window.
This is true whether or not the other windows are visible.

If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_lower() only
requests the restack, does not guarantee it.

Note that gdk_window_show() raises the window again, so don't call this
function before gdk_window_show(). (Try gdk_window_show_unraised().)

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_maximize">
<description>
Maximizes the window. If the window was already maximized, then
this function does nothing.

On X11, asks the window manager to maximize @window, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don't have a concept of
&quot;maximized&quot;; so you can't rely on the maximization actually
happening. But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.

On Windows, reliably maximizes the window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_merge_child_input_shapes">
<description>
Merges the input shape masks for any child windows into the
input shape mask for @window. i.e. the union of all input masks
for @window and its children will become the new input mask
for @window. See gdk_window_input_shape_combine_mask().

This function is distinct from gdk_window_set_child_input_shapes()
because it includes @window's input shape mask in the set of
shapes to be merged.

Since: 2.10

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_merge_child_shapes">
<description>
Merges the shape masks for any child windows into the
shape mask for @window. i.e. the union of all masks
for @window and its children will become the new mask
for @window. See gdk_window_shape_combine_mask().

This function is distinct from gdk_window_set_child_shapes()
because it includes @window's shape mask in the set of shapes to
be merged.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_move">
<description>
Repositions a window relative to its parent window.
For toplevel windows, window managers may ignore or modify the move;
you should probably use gtk_window_move() on a #GtkWindow widget
anyway, instead of using GDK functions. For child windows,
the move will reliably succeed.

If you're also planning to resize the window, use gdk_window_move_resize()
to both move and resize simultaneously, for a nicer visual effect.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate relative to window's parent
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate relative to window's parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_move_region">
<description>
Move the part of @window indicated by @region by @dy pixels in the Y
direction and @dx pixels in the X direction. The portions of @region
that not covered by the new position of @region are invalidated.

Child windows are not moved.

Since: 2.8

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> The #GdkRegion to move
</parameter_description>
</parameter>
<parameter name="dx">
<parameter_description> Amount to move in the X direction
</parameter_description>
</parameter>
<parameter name="dy">
<parameter_description> Amount to move in the Y direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_move_resize">
<description>
Equivalent to calling gdk_window_move() and gdk_window_resize(),
except that both operations are performed at once, avoiding strange
visual effects. (i.e. the user may be able to see the window first
move, then resize, if you don't use gdk_window_move_resize().)

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> new X position relative to window's parent
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> new Y position relative to window's parent
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> new width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> new height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_new">
<description>
Creates a new #GdkWindow using the attributes from
@attributes. See #GdkWindowAttr and #GdkWindowAttributesType for
more details.  Note: to use this on displays other than the default
display, @parent must be specified.


</description>
<parameters>
<parameter name="parent">
<parameter_description> a #GdkWindow, or %NULL to create the window as a child of
the default root window for the default display.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> attributes of the new window
</parameter_description>
</parameter>
<parameter name="attributes_mask">
<parameter_description> mask indicating which fields in @attributes are valid
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkWindow
</return>
</function>

<function name="gdk_window_peek_children">
<description>
Like gdk_window_get_children(), but does not copy the list of
children, so the list does not need to be freed.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return>
a reference to the list of child windows in @window
</return>
</function>

<function name="gdk_window_process_all_updates">
<description>
Calls gdk_window_process_updates() for all windows (see #GdkWindow)
in the application.


</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_window_process_updates">
<description>
Sends one or more expose events to @window. The areas in each
expose event will cover the entire update area for the window (see
gdk_window_invalidate_region() for details). Normally GDK calls
gdk_window_process_all_updates() on your behalf, so there's no
need to call this function unless you want to force expose events
to be delivered immediately and synchronously (vs. the usual
case, where GDK delivers them in an idle handler). Occasionally
this is useful to produce nicer scrolling behavior, for example.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="update_children">
<parameter_description> whether to also process updates for child windows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_raise">
<description>
Raises @window to the top of the Z-order (stacking order), so that
other windows with the same parent window appear below @window.
This is true whether or not the windows are visible.

If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_raise() only
requests the restack, does not guarantee it.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_redirect_to_drawable">
<description>
Redirects drawing into @window so that drawing to the
window in the rectangle specified by @src_x, @src_y,
@width and @height is also drawn into @drawable at
@dest_x, @dest_y.

Only drawing between gdk_window_begin_paint_region() or
gdk_window_begin_paint_rect() and gdk_window_end_paint() is
redirected.

Redirection is active until gdk_window_remove_redirection()
is called.

Since: 2.14

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> x position in @window
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> y position in @window
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> x position in @drawable
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> y position in @drawable
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of redirection, or -1 to use the width of @window
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of redirection or -1 to use the height of @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_remove_filter">
<description>
Remove a filter previously added with gdk_window_add_filter().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> previously-added filter function
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data for previously-added filter function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_remove_redirection">
<description>
Removes any active redirection started by
gdk_window_redirect_to_drawable().

Since: 2.14

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_reparent">
<description>
Reparents @window into the given @new_parent. The window being
reparented will be unmapped as a side effect.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="new_parent">
<parameter_description> new parent to move @window into
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X location inside the new parent
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y location inside the new parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_resize">
<description>
Resizes @window; for toplevel windows, asks the window manager to resize
the window. The window manager may not allow the resize. When using GTK+,
use gtk_window_resize() instead of this low-level GDK function.

Windows may not be resized below 1x1.

If you're also planning to move the window, use gdk_window_move_resize()
to both move and resize simultaneously, for a nicer visual effect.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> new width of the window
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> new height of the window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_restack">
<description>
Changes the position of  @window in the Z-order (stacking order), so that
it is above @sibling (if @above is %TRUE) or below @sibling (if @above is
%FALSE).

If @sibling is %NULL, then this either raises (if @above is %TRUE) or
lowers the window.

If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_restack() only
requests the restack, does not guarantee it.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> a #GdkWindow that is a sibling of @window, or %NULL
</parameter_description>
</parameter>
<parameter name="above">
<parameter_description> a boolean
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_scroll">
<description>
Scroll the contents of its window, both pixels and children, by
the given amount. Portions of the window that the scroll operation
brings in from offscreen areas are invalidated.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="dx">
<parameter_description> Amount to scroll in the X direction
</parameter_description>
</parameter>
<parameter name="dy">
<parameter_description> Amount to scroll in the Y direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_accept_focus">
<description>
Setting @accept_focus to %FALSE hints the desktop environment that the
window doesn't want to receive input focus. 

On X, it is the responsibility of the window manager to interpret this 
hint. ICCCM-compliant window manager usually respect it.

Since: 2.4 

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="accept_focus">
<parameter_description> %TRUE if the window should receive input focus
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_back_pixmap">
<description>
Sets the background pixmap of @window. May also be used to set a
background of &quot;None&quot; on @window, by setting a background pixmap
of %NULL.

A background pixmap will be tiled, positioning the first tile at
the origin of @window, or if @parent_relative is %TRUE, the tiling
will be done based on the origin of the parent window (useful to
align tiles in a parent with tiles in a child).

A background pixmap of %NULL means that the window will have no
background.  A window with no background will never have its
background filled by the windowing system, instead the window will
contain whatever pixels were already in the corresponding area of
the display.

The windowing system will normally fill a window with its background
when the window is obscured then exposed, and when you call
gdk_window_clear().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> a #GdkPixmap, or %NULL
</parameter_description>
</parameter>
<parameter name="parent_relative">
<parameter_description> whether the tiling origin is at the origin of
@window's parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_background">
<description>
Sets the background color of @window. (However, when using GTK+,
set the background of a widget with gtk_widget_modify_bg() - if
you're an application - or gtk_style_set_background() - if you're
implementing a custom widget.)

The @color must be allocated; gdk_rgb_find_color() is the best way
to allocate a color.

See also gdk_window_set_background_pixmap().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> an allocated #GdkColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_child_input_shapes">
<description>
Sets the input shape mask of @window to the union of input shape masks
for all children of @window, ignoring the input shape mask of @window
itself. Contrast with gdk_window_merge_child_input_shapes() which includes
the input shape mask of @window in the masks to be merged.

Since: 2.10

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_child_shapes">
<description>
Sets the shape mask of @window to the union of shape masks
for all children of @window, ignoring the shape mask of @window
itself. Contrast with gdk_window_merge_child_shapes() which includes
the shape mask of @window in the masks to be merged.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_composited">
<description>
Sets a #GdkWindow as composited, or unsets it. Composited
windows do not automatically have their contents drawn to
the screen. Drawing is redirected to an offscreen buffer
and an expose event is emitted on the parent of the composited
window. It is the responsibility of the parent's expose handler
to manually merge the off-screen content onto the screen in
whatever way it sees fit. See &lt;xref linkend=&quot;composited-window-example&quot;/&gt;
for an example.

It only makes sense for child windows to be composited; see
gdk_window_set_opacity() if you need translucent toplevel
windows.

An additional effect of this call is that the area of this
window is no longer clipped from regions marked for
invalidation on its parent. Draws done on the parent
window are also no longer clipped by the child.

This call is only supported on some systems (currently,
only X11 with new enough Xcomposite and Xdamage extensions).
You must call gdk_display_supports_composite() to check if
setting a window as composited is supported before
attempting to do so.

Since: 2.12

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="composited">
<parameter_description> %TRUE to set the window as composited
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_cursor">
<description>
Sets the mouse pointer for a #GdkWindow. Use gdk_cursor_new_for_display()
or gdk_cursor_new_from_pixmap() to create the cursor. To make the cursor
invisible, use %GDK_BLANK_CURSOR. Passing %NULL for the @cursor argument
to gdk_window_set_cursor() means that @window will use the cursor of its
parent window. Most windows should use this default.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="cursor">
<parameter_description> a cursor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_debug_updates">
<description>
With update debugging enabled, calls to
gdk_window_invalidate_region() clear the invalidated region of the
screen to a noticeable color, and GDK pauses for a short time
before sending exposes to windows during
gdk_window_process_updates().  The net effect is that you can see
the invalid region for each window and watch redraws as they
occur. This allows you to diagnose inefficiencies in your application.

In essence, because the GDK rendering model prevents all flicker,
if you are redrawing the same region 400 times you may never
notice, aside from noticing a speed problem. Enabling update
debugging causes GTK to flicker slowly and noticeably, so you can
see exactly what's being redrawn when, in what order.

The --gtk-debug=updates command line option passed to GTK+ programs
enables this debug option at application startup time. That's
usually more useful than calling gdk_window_set_debug_updates()
yourself, though you might want to use this function to enable
updates sometime after application startup time.


</description>
<parameters>
<parameter name="setting">
<parameter_description> %TRUE to turn on update debugging
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_decorations">
<description>
&quot;Decorations&quot; are the features the window manager adds to a toplevel #GdkWindow.
This function sets the traditional Motif window manager hints that tell the
window manager which decorations you would like your window to have.
Usually you should use gtk_window_set_decorated() on a #GtkWindow instead of
using the GDK function directly.

The @decorations argument is the logical OR of the fields in
the #GdkWMDecoration enumeration. If #GDK_DECOR_ALL is included in the
mask, the other bits indicate which decorations should be turned off.
If #GDK_DECOR_ALL is not included, then the other bits indicate
which decorations should be turned on.

Most window managers honor a decorations hint of 0 to disable all decorations,
but very few honor all possible combinations of bits.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="decorations">
<parameter_description> decoration hint mask
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_events">
<description>
The event mask for a window determines which events will be reported
for that window. For example, an event mask including #GDK_BUTTON_PRESS_MASK
means the window should report button press events. The event mask
is the bitwise OR of values from the #GdkEventMask enumeration.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="event_mask">
<parameter_description> event mask for @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_focus_on_map">
<description>
Setting @focus_on_map to %FALSE hints the desktop environment that the
window doesn't want to receive input focus when it is mapped.  
focus_on_map should be turned off for windows that aren't triggered
interactively (such as popups from network activity).

On X, it is the responsibility of the window manager to interpret
this hint. Window managers following the freedesktop.org window
manager extension specification should respect it.

Since: 2.6 

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="focus_on_map">
<parameter_description> %TRUE if the window should receive input focus when mapped
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_functions">
<description>
Sets hints about the window management functions to make available
via buttons on the window frame.

On the X backend, this function sets the traditional Motif window 
manager hint for this purpose. However, few window managers do
anything reliable or interesting with this hint. Many ignore it
entirely.

The @functions argument is the logical OR of values from the
#GdkWMFunction enumeration. If the bitmask includes #GDK_FUNC_ALL,
then the other bits indicate which functions to disable; if
it doesn't include #GDK_FUNC_ALL, it indicates which functions to
enable.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="functions">
<parameter_description> bitmask of operations to allow on @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_geometry_hints">
<description>
Sets the geometry hints for @window. Hints flagged in @geom_mask
are set, hints not flagged in @geom_mask are unset.
To unset all hints, use a @geom_mask of 0 and a @geometry of %NULL.

This function provides hints to the windowing system about
acceptable sizes for a toplevel window. The purpose of 
this is to constrain user resizing, but the windowing system
will typically  (but is not required to) also constrain the
current size of the window to the provided values and
constrain programatic resizing via gdk_window_resize() or
gdk_window_move_resize().

Note that on X11, this effect has no effect on windows
of type %GDK_WINDOW_TEMP or windows where override redirect
has been turned on via gdk_window_set_override_redirect()
since these windows are not resizable by the user.

Since you can't count on the windowing system doing the
constraints for programmatic resizes, you should generally
call gdk_window_constrain_size() yourself to determine
appropriate sizes.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="geometry">
<parameter_description> geometry hints
</parameter_description>
</parameter>
<parameter name="geom_mask">
<parameter_description> bitmask indicating fields of @geometry to pay attention to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_group">
<description>
Sets the group leader window for @window. By default,
GDK sets the group leader for all toplevel windows
to a global window implicitly created by GDK. With this function
you can override this default.

The group leader window allows the window manager to distinguish
all windows that belong to a single application. It may for example
allow users to minimize/unminimize all windows belonging to an
application at once. You should only set a non-default group window
if your application pretends to be multiple applications.

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="leader">
<parameter_description> group leader window, or %NULL to restore the default group leader window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_hints">
<description>
This function is broken and useless and you should ignore it.
If using GTK+, use functions such as gtk_window_resize(), gtk_window_set_size_request(),
gtk_window_move(), gtk_window_parse_geometry(), and gtk_window_set_geometry_hints(),
depending on what you're trying to do.

If using GDK directly, use gdk_window_set_geometry_hints().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> ignored field, does not matter
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> ignored field, does not matter
</parameter_description>
</parameter>
<parameter name="min_width">
<parameter_description> minimum width hint
</parameter_description>
</parameter>
<parameter name="min_height">
<parameter_description> minimum height hint
</parameter_description>
</parameter>
<parameter name="max_width">
<parameter_description> max width hint
</parameter_description>
</parameter>
<parameter name="max_height">
<parameter_description> max height hint
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> logical OR of GDK_HINT_POS, GDK_HINT_MIN_SIZE, and/or GDK_HINT_MAX_SIZE
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_icon">
<description>
Sets the icon of @window as a pixmap or window. If using GTK+, investigate
gtk_window_set_default_icon_list() first, and then gtk_window_set_icon_list()
and gtk_window_set_icon(). If those don't meet your needs, look at
gdk_window_set_icon_list(). Only if all those are too high-level do you
want to fall back to gdk_window_set_icon().


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="icon_window">
<parameter_description> a #GdkWindow to use for the icon, or %NULL to unset
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> a #GdkPixmap to use as the icon, or %NULL to unset
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a 1-bit pixmap (#GdkBitmap) to use as mask for @pixmap, or %NULL to have none
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_icon_list">
<description>
Sets a list of icons for the window. One of these will be used
to represent the window when it has been iconified. The icon is
usually shown in an icon box or some sort of task bar. Which icon
size is shown depends on the window manager. The window manager
can scale the icon  but setting several size icons can give better
image quality since the window manager may only need to scale the
icon by a small amount or not at all.


</description>
<parameters>
<parameter name="window">
<parameter_description> The #GdkWindow toplevel window to set the icon of.
</parameter_description>
</parameter>
<parameter name="pixbufs">
<parameter_description>
A list of pixbufs, of different sizes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_icon_name">
<description>
Windows may have a name used while minimized, distinct from the
name they display in their titlebar. Most of the time this is a bad
idea from a user interface standpoint. But you can set such a name
with this function, if you like.

After calling this with a non-%NULL @name, calls to gdk_window_set_title()
will not update the icon title.

Using %NULL for @name unsets the icon title; further calls to
gdk_window_set_title() will again update the icon title as well.

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of window while iconified (minimized)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_keep_above">
<description>
Set if @window must be kept above other windows. If the
window was already above, then this function does nothing.

On X11, asks the window manager to keep @window above, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don't have a concept of
&quot;keep above&quot;; so you can't rely on the window being kept above.
But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.

Since: 2.4

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> whether to keep @window above other windows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_keep_below">
<description>
Set if @window must be kept below other windows. If the
window was already below, then this function does nothing.

On X11, asks the window manager to keep @window below, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don't have a concept of
&quot;keep below&quot;; so you can't rely on the window being kept below.
But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.

Since: 2.4

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> whether to keep @window below other windows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_modal_hint">
<description>
The application can use this hint to tell the window manager
that a certain window has modal behaviour. The window manager
can use this information to handle modal windows in a special
way.

You should only use this on windows for which you have
previously called gdk_window_set_transient_for()

</description>
<parameters>
<parameter name="window">
<parameter_description> A toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="modal">
<parameter_description> %TRUE if the window is modal, %FALSE otherwise.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_opacity">
<description>
Request the windowing system to make @window partially transparent,
with opacity 0 being fully transparent and 1 fully opaque. (Values
of the opacity parameter are clamped to the [0,1] range.) 

On X11, this works only on X screens with a compositing manager 
running.

For setting up per-pixel alpha, see gdk_screen_get_rgba_colormap().
For making non-toplevel windows translucent, see 
gdk_window_set_composited().

Since: 2.12

</description>
<parameters>
<parameter name="window">
<parameter_description> a top-level #GdkWindow
</parameter_description>
</parameter>
<parameter name="opacity">
<parameter_description> opacity
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_override_redirect">
<description>
An override redirect window is not under the control of the window manager.
This means it won't have a titlebar, won't be minimizable, etc. - it will
be entirely under the control of the application. The window manager
can't see the override redirect window at all.

Override redirect should only be used for short-lived temporary
windows, such as popup menus. #GtkMenu uses an override redirect
window in its implementation, for example.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="override_redirect">
<parameter_description> %TRUE if window should be override redirect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_role">
<description>
When using GTK+, typically you should use gtk_window_set_role() instead
of this low-level function.

The window manager and session manager use a window's role to
distinguish it from other kinds of window in the same application.
When an application is restarted after being saved in a previous
session, all windows with the same title and role are treated as
interchangeable.  So if you have two windows with the same title
that should be distinguished for session management purposes, you
should set the role on those windows. It doesn't matter what string
you use for the role, as long as you have a different role for each
non-interchangeable kind of window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="role">
<parameter_description> a string indicating its role
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_skip_pager_hint">
<description>
Toggles whether a window should appear in a pager (workspace
switcher, or other desktop utility program that displays a small
thumbnail representation of the windows on the desktop). If a
window's semantic type as specified with gdk_window_set_type_hint()
already fully describes the window, this function should 
&lt;emphasis&gt;not&lt;/emphasis&gt; be called in addition, instead you should 
allow the window to be treated according to standard policy for 
its semantic type.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="skips_pager">
<parameter_description> %TRUE to skip the pager
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_skip_taskbar_hint">
<description>
Toggles whether a window should appear in a task list or window
list. If a window's semantic type as specified with
gdk_window_set_type_hint() already fully describes the window, this
function should &lt;emphasis&gt;not&lt;/emphasis&gt; be called in addition, 
instead you should allow the window to be treated according to 
standard policy for its semantic type.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="skips_taskbar">
<parameter_description> %TRUE to skip the taskbar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_startup_id">
<description>
When using GTK+, typically you should use gtk_window_set_startup_id()
instead of this low-level function.

Since: 2.12


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="startup_id">
<parameter_description> a string with startup-notification identifier
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_static_gravities">
<description>
Set the bit gravity of the given window to static, and flag it so
all children get static subwindow gravity. This is used if you are
implementing scary features that involve deep knowledge of the
windowing system. Don't worry about it unless you have to.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="use_static">
<parameter_description> %TRUE to turn on static gravity
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the server supports static gravity
</return>
</function>

<function name="gdk_window_set_title">
<description>
Sets the title of a toplevel window, to be displayed in the titlebar.
If you haven't explicitly set the icon name for the window
(using gdk_window_set_icon_name()), the icon name will be set to
@title as well. @title must be in UTF-8 encoding (as with all
user-readable strings in GDK/GTK+). @title may not be %NULL.

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> title of @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_transient_for">
<description>
Indicates to the window manager that @window is a transient dialog
associated with the application window @parent. This allows the
window manager to do things like center @window on @parent and
keep @window above @parent.

See gtk_window_set_transient_for() if you're using #GtkWindow or
#GtkDialog.

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> another toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_type_hint">
<description>
The application can use this call to provide a hint to the window
manager about the functionality of a window. The window manager
can use this information when determining the decoration and behaviour
of the window.

The hint must be set before the window is mapped.

</description>
<parameters>
<parameter name="window">
<parameter_description> A toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="hint">
<parameter_description> A hint of the function this window will have
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_urgency_hint">
<description>
Toggles whether a window needs the user's
urgent attention.

Since: 2.8

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="urgent">
<parameter_description> %TRUE if the window is urgent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_user_data">
<description>
For most purposes this function is deprecated in favor of
g_object_set_data(). However, for historical reasons GTK+ stores
the #GtkWidget that owns a #GdkWindow as user data on the
#GdkWindow. So, custom widget implementations should use
this function for that. If GTK+ receives an event for a #GdkWindow,
and the user data for the window is non-%NULL, GTK+ will assume the
user data is a #GtkWidget, and forward the event to that widget.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_shape_combine_mask">
<description>
Applies a shape mask to @window. Pixels in @window corresponding to
set bits in the @mask will be visible; pixels in @window
corresponding to unset bits in the @mask will be transparent. This
gives a non-rectangular window.

If @mask is %NULL, the shape mask will be unset, and the @x/@y
parameters are not used.

On the X11 platform, this uses an X server extension which is
widely available on most common platforms, but not available on
very old X servers, and occasionally the implementation will be
buggy. On servers without the shape extension, this function
will do nothing.

This function works on both toplevel and child windows.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> shape mask
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X position of shape mask with respect to @window
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y position of shape mask with respect to @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_shape_combine_region">
<description>
Makes pixels in @window outside @shape_region be transparent,
so that the window may be nonrectangular. See also
gdk_window_shape_combine_mask() to use a bitmap as the mask.

If @shape_region is %NULL, the shape will be unset, so the whole
window will be opaque again. @offset_x and @offset_y are ignored
if @shape_region is %NULL.

On the X11 platform, this uses an X server extension which is
widely available on most common platforms, but not available on
very old X servers, and occasionally the implementation will be
buggy. On servers without the shape extension, this function
will do nothing.

This function works on both toplevel and child windows.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="shape_region">
<parameter_description> region of window to be non-transparent
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> X position of @shape_region in @window coordinates
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> Y position of @shape_region in @window coordinates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_show">
<description>
Like gdk_window_show_unraised(), but also raises the window to the
top of the window stack (moves the window to the front of the
Z-order).

This function maps a window so it's visible onscreen. Its opposite
is gdk_window_hide().

When implementing a #GtkWidget, you should call this function on the widget's
#GdkWindow as part of the &quot;map&quot; method.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_show_unraised">
<description>
Shows a #GdkWindow onscreen, but does not modify its stacking
order. In contrast, gdk_window_show() will raise the window
to the top of the window stack.

On the X11 platform, in Xlib terms, this function calls
XMapWindow() (it also updates some internal GDK state, which means
that you can't really use XMapWindow() directly on a GDK window).

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_stick">
<description>
&quot;Pins&quot; a window such that it's on all workspaces and does not scroll
with viewports, for window managers that have scrollable viewports.
(When using #GtkWindow, gtk_window_stick() may be more useful.)

On the X11 platform, this function depends on window manager
support, so may have no effect with many window managers. However,
GDK will do the best it can to convince the window manager to stick
the window. For window managers that don't support this operation,
there's nothing you can do to force it to happen.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_thaw_toplevel_updates_libgtk_only">
<description>
Thaws a window frozen with
gdk_window_freeze_toplevel_updates_libgtk_only().

This function is not part of the GDK public API and is only
for use by GTK+.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_thaw_updates">
<description>
Thaws a window frozen with gdk_window_freeze_updates().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_unfullscreen">
<description>
Moves the window out of fullscreen mode. If the window was not
fullscreen, does nothing.

On X11, asks the window manager to move @window out of the fullscreen
state, if the window manager supports this operation. Not all
window managers support this, and some deliberately ignore it or
don't have a concept of &quot;fullscreen&quot;; so you can't rely on the
unfullscreenification actually happening. But it will happen with
most standard window managers, and GDK makes a best effort to get
it to happen. 

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_unmaximize">
<description>
Unmaximizes the window. If the window wasn't maximized, then this
function does nothing.

On X11, asks the window manager to unmaximize @window, if the
window manager supports this operation. Not all window managers
support this, and some deliberately ignore it or don't have a
concept of &quot;maximized&quot;; so you can't rely on the unmaximization
actually happening. But it will happen with most standard window
managers, and GDK makes a best effort to get it to happen.

On Windows, reliably unmaximizes the window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_unstick">
<description>
Reverse operation for gdk_window_stick(); see gdk_window_stick(),
and gtk_window_unstick().


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_withdraw">
<description>
Withdraws a window (unmaps it and asks the window manager to forget about it).
This function is not really useful as gdk_window_hide() automatically
withdraws toplevel windows before hiding them.

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_atom_to_xatom">
<description>
Converts from a #GdkAtom to the X atom for the default GDK display
with the same string value.


</description>
<parameters>
<parameter name="atom">
<parameter_description> A #GdkAtom 
</parameter_description>
</parameter>
</parameters>
<return> the X atom corresponding to @atom.
</return>
</function>

<function name="gdk_x11_atom_to_xatom_for_display">
<description>
Converts from a #GdkAtom to the X atom for a #GdkDisplay
with the same string value. The special value %GDK_NONE
is converted to %None.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> A #GdkDisplay
</parameter_description>
</parameter>
<parameter name="atom">
<parameter_description> A #GdkAtom, or %GDK_NONE
</parameter_description>
</parameter>
</parameters>
<return> the X atom corresponding to @atom, or %None

</return>
</function>

<function name="gdk_x11_colormap_foreign_new">
<description>
If xcolormap refers to a colormap previously known to GTK+,
returns a new reference to the existing #GdkColormap object,
otherwise creates a new GdkColormap object and returns that

Since: 2.2

</description>
<parameters>
<parameter name="visual">
<parameter_description> a #GdkVisual
</parameter_description>
</parameter>
<parameter name="xcolormap">
<parameter_description> The XID of a colormap with visual @visual
</parameter_description>
</parameter>
</parameters>
<return> the #GdkColormap object for @xcolormap.
Free with g_object_unref(). Note that for colormap created
with gdk_x11_colormap_foreign_new(), unref'ing the last
reference to the object will only free the #GdkColoramp
object and not call XFreeColormap()

</return>
</function>

<function name="gdk_x11_colormap_get_xcolormap">
<description>
Returns the X colormap belonging to a #GdkColormap.


</description>
<parameters>
<parameter name="colormap">
<parameter_description>  a #GdkColormap.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &lt;type&gt;Colormap&lt;/type&gt;.
</return>
</function>

<function name="gdk_x11_colormap_get_xdisplay">
<description>
Returns the display of a #GdkColormap.


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &lt;type&gt;Display*&lt;/type&gt;.
</return>
</function>

<function name="gdk_x11_cursor_get_xcursor">
<description>
Returns the X cursor belonging to a #GdkCursor.


</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &lt;type&gt;Cursor&lt;/type&gt;.
</return>
</function>

<function name="gdk_x11_cursor_get_xdisplay">
<description>
Returns the display of a #GdkCursor.


</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &lt;type&gt;Display*&lt;/type&gt;.
</return>
</function>

<function name="gdk_x11_display_broadcast_startup_message">
<description>
Sends a startup notification message of type @message_type to
@display. 

This is a convenience function for use by code that implements the
freedesktop startup notification specification. Applications should
not normally need to call it directly. See the &lt;ulink
url=&quot;http://standards.freedesktop.org/startup-notification-spec/startup-notification-latest.txt&quot;&gt;Startup
Notification Protocol specification&lt;/ulink&gt; for
definitions of the message types and keys that can be used.

Since: 2.12

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="message_type">
<parameter_description> startup notification message type (&quot;new&quot;, &quot;change&quot;,
or &quot;remove&quot;)
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of key/value pairs (as strings), terminated by a
%NULL key. (A %NULL value for a key will cause that key to be
skipped in the output.)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_display_get_startup_notification_id">
<description>
Gets the startup notification ID for a display.

Since: 2.12

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the startup notification ID for @display

</return>
</function>

<function name="gdk_x11_display_get_user_time">
<description>
Returns the timestamp of the last user interaction on 
@display. The timestamp is taken from events caused
by user interaction such as key presses or pointer 
movements. See gdk_x11_window_set_user_time().

Since: 2.8

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the timestamp of the last user interaction 

</return>
</function>

<function name="gdk_x11_display_get_xdisplay">
<description>
Returns the X display of a #GdkDisplay.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> an X display.
</return>
</function>

<function name="gdk_x11_display_grab">
<description>
Call XGrabServer() on @display. 
To ungrab the display again, use gdk_x11_display_ungrab(). 

gdk_x11_display_grab()/gdk_x11_display_ungrab() calls can be nested.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_display_set_cursor_theme">
<description>
Sets the cursor theme from which the images for cursor
should be taken. 

If the windowing system supports it, existing cursors created 
with gdk_cursor_new(), gdk_cursor_new_for_display() and 
gdk_cursor_new_for_name() are updated to reflect the theme 
change. Custom cursors constructed with gdk_cursor_new_from_pixmap() 
or gdk_cursor_new_from_pixbuf() will have to be handled
by the application (GTK+ applications can learn about 
cursor theme changes by listening for change notification
for the corresponding #GtkSetting).

Since: 2.8

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="theme">
<parameter_description> the name of the cursor theme to use, or %NULL to unset
a previously set value 
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the cursor size to use, or 0 to keep the previous size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_display_ungrab">
<description>
Ungrab @display after it has been grabbed with 
gdk_x11_display_grab(). 

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_drawable_get_xdisplay">
<description>
Returns the display of a #GdkDrawable.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &lt;type&gt;Display*&lt;/type&gt;.
</return>
</function>

<function name="gdk_x11_drawable_get_xid">
<description>
Returns the X resource (window or pixmap) belonging to a #GdkDrawable.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable.
</parameter_description>
</parameter>
</parameters>
<return> the ID of @drawable's X resource.
</return>
</function>

<function name="gdk_x11_font_get_name">
<description>
Return the X Logical Font Description (for font-&gt;type == GDK_FONT_FONT)
or comma separated list of XLFDs (for font-&gt;type == GDK_FONT_FONTSET)
that was used to load the font. If the same font was loaded
via multiple names, which name is returned is undefined.


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
</parameters>
<return> the name of the font. This string is owned
by GDK and must not be modified or freed.
</return>
</function>

<function name="gdk_x11_font_get_xdisplay">
<description>
Returns the display of a #GdkFont.


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
</parameters>
<return>  an Xlib &lt;type&gt;Display*&lt;/type&gt;.
</return>
</function>

<function name="gdk_x11_font_get_xfont">
<description>
Returns the X font belonging to a #GdkFont.


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &lt;type&gt;XFontStruct*&lt;/type&gt; or an &lt;type&gt;XFontSet&lt;/type&gt;.
</return>
</function>

<function name="gdk_x11_gc_get_xdisplay">
<description>
Returns the display of a #GdkGC.

Deprecated: 2.22: #GdkGC has been replaced by #cairo_t.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &lt;type&gt;Display*&lt;/type&gt;.

</return>
</function>

<function name="gdk_x11_gc_get_xgc">
<description>
Returns the X GC of a #GdkGC.

Deprecated: 2.22: #GdkGC has been replaced by #cairo_t.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &lt;type&gt;GC&lt;/type&gt;.

</return>
</function>

<function name="gdk_x11_get_default_root_xwindow">
<description>
Gets the root window of the default screen 
(see gdk_x11_get_default_screen()).  


</description>
<parameters>
</parameters>
<return> an Xlib &lt;type&gt;Window&lt;/type&gt;.
</return>
</function>

<function name="gdk_x11_get_default_screen">
<description>
Gets the default GTK+ screen number.


</description>
<parameters>
</parameters>
<return> returns the screen number specified by
the --display command line option or the DISPLAY environment
variable when gdk_init() calls XOpenDisplay().
</return>
</function>

<function name="gdk_x11_get_default_xdisplay">
<description>
Gets the default GTK+ display.


</description>
<parameters>
</parameters>
<return> the Xlib &lt;type&gt;Display*&lt;/type&gt; for the display
specified in the &lt;option&gt;--display&lt;/option&gt; command line option 
or the &lt;envar&gt;DISPLAY&lt;/envar&gt; environment variable.
</return>
</function>

<function name="gdk_x11_get_server_time">
<description>
Routine to get the current X server time stamp. 


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow, used for communication with the server.
The window must have GDK_PROPERTY_CHANGE_MASK in its
events mask or a hang will result.
</parameter_description>
</parameter>
</parameters>
<return> the time stamp.
</return>
</function>

<function name="gdk_x11_get_xatom_by_name">
<description>
Returns the X atom for GDK's default display corresponding to @atom_name.
This function caches the result, so if called repeatedly it is much
faster than XInternAtom(), which is a round trip to the server each time.


</description>
<parameters>
<parameter name="atom_name">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> a X atom for GDK's default display.
</return>
</function>

<function name="gdk_x11_get_xatom_by_name_for_display">
<description>
Returns the X atom for a #GdkDisplay corresponding to @atom_name.
This function caches the result, so if called repeatedly it is much
faster than XInternAtom(), which is a round trip to the server each time.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="atom_name">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> a X atom for a #GdkDisplay

</return>
</function>

<function name="gdk_x11_get_xatom_name">
<description>
Returns the name of an X atom for GDK's default display. This
function is meant mainly for debugging, so for convenience, unlike
&lt;function&gt;XAtomName()&lt;/function&gt; and gdk_atom_name(), the result 
doesn't need to be freed. Also, this function will never return %NULL, 
even if @xatom is invalid.


</description>
<parameters>
<parameter name="xatom">
<parameter_description> an X atom for GDK's default display
</parameter_description>
</parameter>
</parameters>
<return> name of the X atom; this string is owned by GTK+,
so it shouldn't be modifed or freed. 
</return>
</function>

<function name="gdk_x11_get_xatom_name_for_display">
<description>
Returns the name of an X atom for its display. This
function is meant mainly for debugging, so for convenience, unlike
XAtomName() and gdk_atom_name(), the result doesn't need to
be freed. 

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay where @xatom is defined
</parameter_description>
</parameter>
<parameter name="xatom">
<parameter_description> an X atom 
</parameter_description>
</parameter>
</parameters>
<return> name of the X atom; this string is owned by GDK,
so it shouldn't be modifed or freed. 

</return>
</function>

<function name="gdk_x11_grab_server">
<description>
Call gdk_x11_display_grab() on the default display. 
To ungrab the server again, use gdk_x11_ungrab_server(). 

gdk_x11_grab_server()/gdk_x11_ungrab_server() calls can be nested.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_x11_image_get_xdisplay">
<description>
Returns the display of a #GdkImage.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &lt;type&gt;Display*&lt;/type&gt;.
</return>
</function>

<function name="gdk_x11_image_get_ximage">
<description>
Returns the X image belonging to a #GdkImage.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage.
</parameter_description>
</parameter>
</parameters>
<return> an &lt;type&gt;XImage*&lt;/type&gt;.
</return>
</function>

<function name="gdk_x11_lookup_xdisplay">
<description>
Find the #GdkDisplay corresponding to @display, if any exists.

Since: 2.2

</description>
<parameters>
<parameter name="xdisplay">
<parameter_description> a pointer to an X Display
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDisplay, if found, otherwise %NULL.

</return>
</function>

<function name="gdk_x11_register_standard_event_type">
<description>
Registers interest in receiving extension events with type codes
between @event_base and &lt;literal&gt;event_base + n_events - 1&lt;/literal&gt;.
The registered events must have the window field in the same place
as core X events (this is not the case for e.g. XKB extension events).

If an event type is registered, events of this type will go through
global and window-specific filters (see gdk_window_add_filter()). 
Unregistered events will only go through global filters.
GDK may register the events of some X extensions on its own.

This function should only be needed in unusual circumstances, e.g.
when filtering XInput extension events on the root window.

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="event_base">
<parameter_description> first event type code to register
</parameter_description>
</parameter>
<parameter name="n_events">
<parameter_description> number of event type codes to register
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_screen_get_monitor_output">
<description>
Gets the XID of the specified output/monitor.
If the X server does not support version 1.2 of the RANDR
extension, 0 is returned.

Since: 2.14

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="monitor_num">
<parameter_description> number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)
</parameter_description>
</parameter>
</parameters>
<return> the XID of the monitor

</return>
</function>

<function name="gdk_x11_screen_get_screen_number">
<description>
Returns the index of a #GdkScreen.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return> the position of @screen among the screens of
its display.
</return>
</function>

<function name="gdk_x11_screen_get_window_manager_name">
<description>
Returns the name of the window manager for @screen. 

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen 
</parameter_description>
</parameter>
</parameters>
<return> the name of the window manager screen @screen, or 
&quot;unknown&quot; if the window manager is unknown. The string is owned by GDK
and should not be freed.

</return>
</function>

<function name="gdk_x11_screen_get_xscreen">
<description>
Returns the screen of a #GdkScreen.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &lt;type&gt;Screen*&lt;/type&gt;
</return>
</function>

<function name="gdk_x11_screen_lookup_visual">
<description>
Looks up the #GdkVisual for a particular screen and X Visual ID.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
<parameter name="xvisualid">
<parameter_description> an X Visual ID.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkVisual (owned by the screen
object), or %NULL if the visual ID wasn't found.

</return>
</function>

<function name="gdk_x11_screen_supports_net_wm_hint">
<description>
This function is specific to the X11 backend of GDK, and indicates
whether the window manager supports a certain hint from the
Extended Window Manager Hints Specification. You can find this
specification on 
&lt;ulink url=&quot;http://www.freedesktop.org&quot;&gt;http://www.freedesktop.org&lt;/ulink&gt;.

When using this function, keep in mind that the window manager
can change over time; so you shouldn't use this function in
a way that impacts persistent application state. A common bug
is that your application can start up before the window manager
does when the user logs in, and before the window manager starts
gdk_x11_screen_supports_net_wm_hint() will return %FALSE for every property.
You can monitor the window_manager_changed signal on #GdkScreen to detect
a window manager change.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> the relevant #GdkScreen.
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> a property atom.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window manager supports @property

</return>
</function>

<function name="gdk_x11_set_sm_client_id">
<description>
Sets the &lt;literal&gt;SM_CLIENT_ID&lt;/literal&gt; property on the application's leader window so that
the window manager can save the application's state using the X11R6 ICCCM
session management protocol.

See the X Session Management Library documentation for more information on
session management and the Inter-Client Communication Conventions Manual

Since: 2.24

</description>
<parameters>
<parameter name="sm_client_id">
<parameter_description> the client id assigned by the session manager when the
connection was opened, or %NULL to remove the property.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_ungrab_server">
<description>
Ungrab the default display after it has been grabbed with 
gdk_x11_grab_server(). 

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_x11_visual_get_xvisual">
<description>
Returns the X visual belonging to a #GdkVisual.


</description>
<parameters>
<parameter name="visual">
<parameter_description> a #GdkVisual.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &lt;type&gt;Visual*&lt;/type&gt;.
</return>
</function>

<function name="gdk_x11_window_foreign_new_for_display">
<description>
Wraps a native window in a #GdkWindow.

This may fail if the window has been destroyed. If the window
was already known to GDK, a new reference to the existing
#GdkWindow is returned.

Since: 2.24

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay where the window handle comes from.
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> an XLib &lt;type&gt;Window&lt;/type&gt;
</parameter_description>
</parameter>
</parameters>
<return> a #GdkWindow wrapper for the native window or
%NULL if the window has been destroyed. The wrapper will be
newly created, if one doesn't exist already.

</return>
</function>

<function name="gdk_x11_window_lookup_for_display">
<description>
Looks up the #GdkWindow that wraps the given native window handle.

Since: 2.24

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay corresponding to the window handle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> an XLib &lt;type&gt;Window&lt;/type&gt;
</parameter_description>
</parameter>
</parameters>
<return> the #GdkWindow wrapper for the native window,
or %NULL if there is none.

</return>
</function>

<function name="gdk_x11_window_move_to_current_desktop">
<description>
Moves the window to the correct workspace when running under a 
window manager that supports multiple workspaces, as described
in the &lt;ulink url=&quot;http://www.freedesktop.org/Standards/wm-spec&quot;&gt;Extended 
Window Manager Hints&lt;/ulink&gt;.  Will not do anything if the
window is already on all workspaces.

Since: 2.8

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_window_set_user_time">
<description>
The application can use this call to update the _NET_WM_USER_TIME
property on a toplevel window.  This property stores an Xserver
time which represents the time of the last user input event
received for this window.  This property may be used by the window
manager to alter the focus, stacking, and/or placement behavior of
windows when they are mapped depending on whether the new window
was created by a user action or is a &quot;pop-up&quot; window activated by a
timer or some other event.

Note that this property is automatically updated by GDK, so this
function should only be used by applications which handle input
events bypassing GDK.

Since: 2.6

</description>
<parameters>
<parameter name="window">
<parameter_description> A toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> An XServer timestamp to which the property should be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_xatom_to_atom">
<description>
Convert from an X atom for the default display to the corresponding
#GdkAtom.


</description>
<parameters>
<parameter name="xatom">
<parameter_description> an X atom for the default GDK display
</parameter_description>
</parameter>
</parameters>
<return> the corresponding G#dkAtom.
</return>
</function>

<function name="gdk_x11_xatom_to_atom_for_display">
<description>
Convert from an X atom for a #GdkDisplay to the corresponding
#GdkAtom.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> A #GdkDisplay
</parameter_description>
</parameter>
<parameter name="xatom">
<parameter_description> an X atom 
</parameter_description>
</parameter>
</parameters>
<return> the corresponding #GdkAtom.

</return>
</function>

<function name="gdk_xid_table_lookup">
<description>
Returns the Gdk object associated with the given X id for the default
display.

Deprecated:2.24: This function will be removed in GTK+ 3.0. GTK+
only stores windows in its X id table nowadays, so use
gdk_x11_window_lookup_for_display() instead.

</description>
<parameters>
<parameter name="xid">
<parameter_description> an X id.
</parameter_description>
</parameter>
</parameters>
<return> the associated Gdk object, which may be a #GdkPixmap,
a #GdkWindow or a #GdkFont or %NULL if no object is associated
with the X id.

</return>
</function>

<function name="gdk_xid_table_lookup_for_display">
<description>
Returns the GDK object associated with the given X id.

Since: 2.2

Deprecated:2.24: This function will be removed in GTK+ 3.0. GTK+
only stores windows in its X id table nowadays, so use
gdk_x11_window_lookup_for_display() instead.

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay.
</parameter_description>
</parameter>
<parameter name="xid">
<parameter_description> an X id.
</parameter_description>
</parameter>
</parameters>
<return> the associated Gdk object, which may be a #GdkPixmap,
a #GdkWindow or a #GdkFont or %NULL if no object is associated
with the X id.

</return>
</function>

<function name="gdkx_colormap_get">
<description>
Returns a #GdkColormap corresponding to a X colormap;
this function only works if the colormap is already
known to GTK+ (a colormap created by GTK+ or the default
colormap for the screen), since GTK+ 

Always use gdk_x11_colormap_foreign_new() instead.


</description>
<parameters>
<parameter name="xcolormap">
<parameter_description> the XID of a colormap for the default screen.
</parameter_description>
</parameter>
</parameters>
<return> the existing #GdkColormap object if it was
already known to GTK+, otherwise warns and return
%NULL.
</return>
</function>

<function name="gdkx_visual_get">
<description>
Returns a #GdkVisual corresponding to a X visual. 

Deprecated:2.24: Use gdk_x11_screen_lookup_visual() instead

</description>
<parameters>
<parameter name="xvisualid">
<parameter_description> a X visual id.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkVisual.

</return>
</function>

</root>
