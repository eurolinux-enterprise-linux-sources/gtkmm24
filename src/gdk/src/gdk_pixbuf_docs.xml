<root>
<function name="gdk_pixbuf_loader_new_with_mime_type">
<description>
Creates a new pixbuf loader object that always attempts to parse
image data as if it were an image of mime type @mime_type, instead of
identifying the type automatically. Useful if you want an error if
the image isn't the expected mime type, for loading image formats
that can't be reliably identified by looking at the data, or if
the user manually forces a specific mime type.

The list of supported mime types depends on what image loaders
are installed, but typically &quot;image/png&quot;, &quot;image/jpeg&quot;, &quot;image/gif&quot;, 
&quot;image/tiff&quot; and &quot;image/x-xpixmap&quot; are among the supported mime types. 
To obtain the full list of supported mime types, call 
gdk_pixbuf_format_get_mime_types() on each of the #GdkPixbufFormat 
structs returned by gdk_pixbuf_get_formats().

Since: 2.4

</description>
<parameters>
<parameter name="mime_type">
<parameter_description> the mime type to be loaded 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an allocated #GError, or %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf loader.
</return>
</function>

<function name="gdk_pixbuf_get_pixels">
<description>
Queries a pointer to the pixel data of a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> A pointer to the pixbuf's pixel data.  Please see &lt;xref linkend=&quot;image-data&quot;/&gt;
for information about how the pixel data is stored in
memory.
</return>
</function>

<function name="gdk_pixbuf_format_set_disabled">
<description>
Disables or enables an image format. If a format is disabled, 
gdk-pixbuf won't use the image loader for this format to load 
images. Applications can use this to avoid using image loaders 
with an inappropriate license, see gdk_pixbuf_format_get_license().

Since: 2.6

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
<parameter name="disabled">
<parameter_description> %TRUE to disable the format @format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_format_is_disabled">
<description>
Returns whether this image format is disabled. See
gdk_pixbuf_format_set_disabled().

Since: 2.6

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> whether this image format is disabled.

</return>
</function>

<function name="gdk_pixbuf_get_n_channels">
<description>
Queries the number of channels of a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Number of channels.
</return>
</function>

<function name="gdk_pixbuf_save_to_stream">
<description>
Saves @pixbuf to an output stream.

Supported file formats are currently &quot;jpeg&quot;, &quot;tiff&quot;, &quot;png&quot;, &quot;ico&quot; or 
&quot;bmp&quot;. See gdk_pixbuf_save_to_buffer() for more details.

The @cancellable can be used to abort the operation from another 
thread. If the operation was cancelled, the error %GIO_ERROR_CANCELLED 
will be returned. Other possible errors are in the #GDK_PIXBUF_ERROR 
and %G_IO_ERROR domains. 

The stream is not closed.

Since: 2.14

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="stream">
<parameter_description> a #GOutputStream to save the pixbuf to
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> list of key-value save options
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the pixbuf was saved successfully, %FALSE if an
error was set.

</return>
</function>

<function name="gdk_pixbuf_save_to_buffer">
<description>
Saves pixbuf to a new buffer in format @type, which is currently &quot;jpeg&quot;,
&quot;png&quot;, &quot;tiff&quot;, &quot;ico&quot; or &quot;bmp&quot;.  This is a convenience function that uses
gdk_pixbuf_save_to_callback() to do the real work. Note that the buffer 
is not nul-terminated and may contain embedded  nuls.
If @error is set, %FALSE will be returned and @buffer will be set to
%NULL. Possible errors include those in the #GDK_PIXBUF_ERROR
domain.

See gdk_pixbuf_save() for more details.

Since: 2.4

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> location to receive a pointer to the new buffer.
</parameter_description>
</parameter>
<parameter name="buffer_size">
<parameter_description> location to receive the size of the new buffer.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> list of key-value save options
</parameter_description>
</parameter>
</parameters>
<return> whether an error was set

</return>
</function>

<function name="gdk_pixbuf_rotate_simple">
<description>
Rotates a pixbuf by a multiple of 90 degrees, and returns the
result in a new pixbuf.

Since: 2.6

</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="angle">
<parameter_description> the angle to rotate by
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkPixbuf, or %NULL if not enough memory could be
allocated for it.

</return>
</function>

<function name="gdk_pixbuf_format_is_writable">
<description>
Returns whether pixbufs can be saved in the given format.

Since: 2.2

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> whether pixbufs can be saved in the given format.

</return>
</function>

<function name="gdk_pixbuf_get_rowstride">
<description>
Queries the rowstride of a pixbuf, which is the number of bytes between the start of a row
and the start of the next row.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Distance between row starts.
</return>
</function>

<function name="gdk_pixbuf_animation_get_height">
<description>
Queries the height of the bounding box of a pixbuf animation.


</description>
<parameters>
<parameter name="animation">
<parameter_description> An animation.
</parameter_description>
</parameter>
</parameters>
<return> Height of the bounding box of the animation.
</return>
</function>

<function name="gdk_pixbuf_new_from_stream_at_scale">
<description>
Creates a new pixbuf by loading an image from an input stream.  

The file format is detected automatically. If %NULL is returned, then 
@error will be set. The @cancellable can be used to abort the operation
from another thread. If the operation was cancelled, the error 
%GIO_ERROR_CANCELLED will be returned. Other possible errors are in 
the #GDK_PIXBUF_ERROR and %G_IO_ERROR domains. 

The image will be scaled to fit in the requested size, optionally 
preserving the image's aspect ratio. When preserving the aspect ratio, 
a @width of -1 will cause the image to be scaled to the exact given 
height, and a @height of -1 will cause the image to be scaled to the 
exact given width. When not preserving aspect ratio, a @width or 
@height of -1 means to not scale the image at all in that dimension.

The stream is not closed.

Since: 2.14

</description>
<parameters>
<parameter name="stream">
<parameter_description>  a #GInputStream to load the pixbuf from
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> The width the image should have or -1 to not constrain the width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> The height the image should have or -1 to not constrain the height
</parameter_description>
</parameter>
<parameter name="preserve_aspect_ratio">
<parameter_description> %TRUE to preserve the image's aspect ratio
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf, or %NULL if any of several error 
conditions occurred: the file could not be opened, the image format is 
not supported, there was not enough memory to allocate the image buffer, 
the stream contained invalid data, or the operation was cancelled.

</return>
</function>

<function name="gdk_pixbuf_animation_get_width">
<description>
Queries the width of the bounding box of a pixbuf animation.


</description>
<parameters>
<parameter name="animation">
<parameter_description> An animation.
</parameter_description>
</parameter>
</parameters>
<return> Width of the bounding box of the animation.
</return>
</function>

<function name="gdk_pixbuf_loader_write">
<description>
This will cause a pixbuf loader to parse the next @count bytes of
an image.  It will return %TRUE if the data was loaded successfully,
and %FALSE if an error occurred.  In the latter case, the loader
will be closed, and will not accept further writes. If %FALSE is
returned, @error will be set to an error from the #GDK_PIXBUF_ERROR
or #G_FILE_ERROR domains.


</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader.
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> Pointer to image data.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> Length of the @buf buffer in bytes.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for errors
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the write was successful, or %FALSE if the loader
cannot parse the buffer.
</return>
</function>

<function name="gdk_pixbuf_loader_get_format">
<description>
Obtains the available information about the format of the 
currently loading image file.

Since: 2.2

</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader.
</parameter_description>
</parameter>
</parameters>
<return> A #GdkPixbufFormat or %NULL. The return value is owned 
by GdkPixbuf and should not be freed.

</return>
</function>

<function name="gdk_pixbuf_new_from_data">
<description>
Creates a new #GdkPixbuf out of in-memory image data.  Currently only RGB
images with 8 bits per sample are supported.


</description>
<parameters>
<parameter name="data">
<parameter_description> Image data in 8-bit/sample packed format
</parameter_description>
</parameter>
<parameter name="colorspace">
<parameter_description> Colorspace for the image data
</parameter_description>
</parameter>
<parameter name="has_alpha">
<parameter_description> Whether the data has an opacity channel
</parameter_description>
</parameter>
<parameter name="bits_per_sample">
<parameter_description> Number of bits per sample
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of the image in pixels, must be &gt; 0
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of the image in pixels, must be &gt; 0
</parameter_description>
</parameter>
<parameter name="rowstride">
<parameter_description> Distance in bytes between row starts
</parameter_description>
</parameter>
<parameter name="destroy_fn">
<parameter_description> Function used to free the data when the pixbuf's reference count
drops to zero, or %NULL if the data should not be freed
</parameter_description>
</parameter>
<parameter name="destroy_fn_data">
<parameter_description> Closure data to pass to the destroy notification function
</parameter_description>
</parameter>
</parameters>
<return> A newly-created #GdkPixbuf structure with a reference count of 1.
</return>
</function>

<function name="gdk_pixbuf_animation_iter_get_pixbuf">
<description>
Gets the current pixbuf which should be displayed; the pixbuf will
be the same size as the animation itself
(gdk_pixbuf_animation_get_width(), gdk_pixbuf_animation_get_height()). 
This pixbuf should be displayed for 
gdk_pixbuf_animation_iter_get_delay_time() milliseconds.  The caller
of this function does not own a reference to the returned pixbuf;
the returned pixbuf will become invalid when the iterator advances
to the next frame, which may happen anytime you call
gdk_pixbuf_animation_iter_advance(). Copy the pixbuf to keep it
(don't just add a reference), as it may get recycled as you advance
the iterator.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an animation iterator
</parameter_description>
</parameter>
</parameters>
<return> the pixbuf to be displayed
</return>
</function>

<function name="gdk_pixbuf_from_pixdata">
<description>
Converts a #GdkPixdata to a #GdkPixbuf. If @copy_pixels is %TRUE or
if the pixel data is run-length-encoded, the pixel data is copied into
newly-allocated memory; otherwise it is reused.


</description>
<parameters>
<parameter name="pixdata">
<parameter_description> a #GdkPixdata to convert into a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="copy_pixels">
<parameter_description> whether to copy raw pixel data; run-length encoded
pixel data is always copied.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store possible errors.
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkPixbuf.
</return>
</function>

<function name="gdk_pixbuf_get_height">
<description>
Queries the height of a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Height in pixels.
</return>
</function>

<function name="gdk_pixbuf_simple_anim_add_frame">
<description>
Adds a new frame to @animation. The @pixbuf must
have the dimensions specified when the animation 
was constructed.

Since: 2.8

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #GdkPixbufSimpleAnim
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> the pixbuf to add 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_animation_get_iter">
<description>
Get an iterator for displaying an animation. The iterator provides
the frames that should be displayed at a given time.
It should be freed after use with g_object_unref().

@start_time would normally come from g_get_current_time(), and
marks the beginning of animation playback. After creating an
iterator, you should immediately display the pixbuf returned by
gdk_pixbuf_animation_iter_get_pixbuf(). Then, you should install a
timeout (with g_timeout_add()) or by some other mechanism ensure
that you'll update the image after
gdk_pixbuf_animation_iter_get_delay_time() milliseconds. Each time
the image is updated, you should reinstall the timeout with the new,
possibly-changed delay time.

As a shortcut, if @start_time is %NULL, the result of
g_get_current_time() will be used automatically.

To update the image (i.e. possibly change the result of
gdk_pixbuf_animation_iter_get_pixbuf() to a new frame of the animation),
call gdk_pixbuf_animation_iter_advance().

If you're using #GdkPixbufLoader, in addition to updating the image
after the delay time, you should also update it whenever you
receive the area_updated signal and
gdk_pixbuf_animation_iter_on_currently_loading_frame() returns
%TRUE. In this case, the frame currently being fed into the loader
has received new data, so needs to be refreshed. The delay time for
a frame may also be modified after an area_updated signal, for
example if the delay time for a frame is encoded in the data after
the frame itself. So your timeout should be reinstalled after any
area_updated signal.

A delay time of -1 is possible, indicating &quot;infinite.&quot;


</description>
<parameters>
<parameter name="animation">
<parameter_description> a #GdkPixbufAnimation
</parameter_description>
</parameter>
<parameter name="start_time">
<parameter_description> time when the animation starts playing
</parameter_description>
</parameter>
</parameters>
<return> an iterator to move over the animation
</return>
</function>

<function name="gdk_pixbuf_get_formats">
<description>
Obtains the available information about the image formats supported
by GdkPixbuf.

Since: 2.2

</description>
<parameters>
</parameters>
<return> A list of #GdkPixbufFormat&lt;!-- --&gt;s describing the supported 
image formats.  The list should be freed when it is no longer needed, 
but the structures themselves are owned by #GdkPixbuf and should not be 
freed.  

</return>
</function>

<function name="gdk_pixdata_from_pixbuf">
<description>
Converts a #GdkPixbuf to a #GdkPixdata. If @use_rle is %TRUE, the
pixel data is run-length encoded into newly-allocated memory and a 
pointer to that memory is returned. 


</description>
<parameters>
<parameter name="pixdata">
<parameter_description> a #GdkPixdata to fill.
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> the data to fill @pixdata with.
</parameter_description>
</parameter>
<parameter name="use_rle">
<parameter_description> whether to use run-length encoding for the pixel data.
</parameter_description>
</parameter>
</parameters>
<return> If @ure_rle is %TRUE, a pointer to the newly-allocated memory 
for the run-length encoded pixel data, otherwise %NULL.
</return>
</function>

<function name="gdk_pixbuf_simple_anim_new">
<description>
Creates a new, empty animation.

Since: 2.8

</description>
<parameters>
<parameter name="width">
<parameter_description> the width of the animation
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the animation
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> the speed of the animation, in frames per second
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdkPixbufSimpleAnim 

</return>
</function>

<function name="gdk_pixbuf_copy_area">
<description>
Copies a rectangular area from @src_pixbuf to @dest_pixbuf.  Conversion of
pixbuf formats is done automatically.

If the source rectangle overlaps the destination rectangle on the
same pixbuf, it will be overwritten during the copy operation.
Therefore, you can not use this function to scroll a pixbuf.

</description>
<parameters>
<parameter name="src_pixbuf">
<parameter_description> Source pixbuf.
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate within @src_pixbuf.
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Source Y coordinate within @src_pixbuf.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of the area to copy.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of the area to copy.
</parameter_description>
</parameter>
<parameter name="dest_pixbuf">
<parameter_description> Destination pixbuf.
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> X coordinate within @dest_pixbuf.
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> Y coordinate within @dest_pixbuf.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_flip">
<description>
Flips a pixbuf horizontally or vertically and returns the
result in a new pixbuf.

Since: 2.6

</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="horizontal">
<parameter_description> %TRUE to flip horizontally, %FALSE to flip vertically
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkPixbuf, or %NULL if not enough memory could be
allocated for it.

</return>
</function>

<function name="gdk_pixbuf_animation_iter_get_delay_time">
<description>
Gets the number of milliseconds the current pixbuf should be displayed,
or -1 if the current pixbuf should be displayed forever. g_timeout_add()
conveniently takes a timeout in milliseconds, so you can use a timeout
to schedule the next update.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an animation iterator
</parameter_description>
</parameter>
</parameters>
<return> delay time in milliseconds (thousandths of a second)
</return>
</function>

<function name="gdk_pixbuf_animation_ref">
<description>
Adds a reference to an animation.

Deprecated: 2.0: Use g_object_ref().

</description>
<parameters>
<parameter name="animation">
<parameter_description> An animation.
</parameter_description>
</parameter>
</parameters>
<return> The same as the @animation argument.

</return>
</function>

<function name="gdk_pixbuf_save_to_callbackv">
<description>
Saves pixbuf to a callback in format @type, which is currently &quot;jpeg&quot;,
&quot;png&quot;, &quot;tiff&quot;, &quot;ico&quot; or &quot;bmp&quot;.  If @error is set, %FALSE will be returned. See
gdk_pixbuf_save_to_callback () for more details.

Since: 2.4

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="save_func">
<parameter_description> a function that is called to save each block of data that
the save routine generates.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the save function.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format.
</parameter_description>
</parameter>
<parameter name="option_keys">
<parameter_description> name of options to set, %NULL-terminated
</parameter_description>
</parameter>
<parameter name="option_values">
<parameter_description> values for named options
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether an error was set

</return>
</function>

<function name="gdk_pixbuf_get_has_alpha">
<description>
Queries whether a pixbuf has an alpha channel (opacity information).


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if it has an alpha channel, %FALSE otherwise.
</return>
</function>

<function name="gdk_pixbuf_simple_anim_get_loop">
<description>
Gets whether @animation should loop indefinitely when it reaches the end.

Since: 2.18

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #GdkPixbufSimpleAnim
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the animation loops forever, %FALSE otherwise

</return>
</function>

<function name="gdk_pixbuf_apply_embedded_orientation">
<description>
Takes an existing pixbuf and checks for the presence of an
associated &quot;orientation&quot; option, which may be provided by the 
jpeg loader (which reads the exif orientation tag) or the 
tiff loader (which reads the tiff orientation tag, and
compensates it for the partial transforms performed by 
libtiff). If an orientation option/tag is present, the
appropriate transform will be performed so that the pixbuf
is oriented correctly.

Since: 2.12

</description>
<parameters>
<parameter name="src">
<parameter_description> A #GdkPixbuf.
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf, or a reference to the
input pixbuf (with an increased reference count).

</return>
</function>

<function name="gdk_pixbuf_new_from_xpm_data">
<description>
Creates a new pixbuf by parsing XPM data in memory.  This data is commonly
the result of including an XPM file into a program's C source.


</description>
<parameters>
<parameter name="data">
<parameter_description> Pointer to inline XPM data.
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1.
</return>
</function>

<function name="gdk_pixbuf_format_get_license">
<description>
Returns information about the license of the image loader for the format. The
returned string should be a shorthand for a wellknown license, e.g. &quot;LGPL&quot;,
&quot;GPL&quot;, &quot;QPL&quot;, &quot;GPL/QPL&quot;, or &quot;other&quot; to indicate some other license.  This
string should be freed with g_free() when it's no longer needed.

Since: 2.6

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> a string describing the license of @format. 

</return>
</function>

<function name="gdk_pixbuf_savev">
<description>
Saves pixbuf to a file in @type, which is currently &quot;jpeg&quot;, &quot;png&quot;, &quot;tiff&quot;, &quot;ico&quot; or &quot;bmp&quot;.
If @error is set, %FALSE will be returned. 
See gdk_pixbuf_save () for more details.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> name of file to save.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format.
</parameter_description>
</parameter>
<parameter name="option_keys">
<parameter_description> name of options to set, %NULL-terminated
</parameter_description>
</parameter>
<parameter name="option_values">
<parameter_description> values for named options
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether an error was set
</return>
</function>

<function name="gdk_pixbuf_add_alpha">
<description>
Takes an existing pixbuf and adds an alpha channel to it.
If the existing pixbuf already had an alpha channel, the channel
values are copied from the original; otherwise, the alpha channel
is initialized to 255 (full opacity).

If @substitute_color is %TRUE, then the color specified by (@r, @g, @b) will be
assigned zero opacity. That is, if you pass (255, 255, 255) for the
substitute color, all white pixels will become fully transparent.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="substitute_color">
<parameter_description> Whether to set a color to zero opacity.  If this
is %FALSE, then the (@r, @g, @b) arguments will be ignored.
</parameter_description>
</parameter>
<parameter name="r">
<parameter_description> Red value to substitute.
</parameter_description>
</parameter>
<parameter name="g">
<parameter_description> Green value to substitute.
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> Blue value to substitute.
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1.
</return>
</function>

<function name="gdk_pixbuf_get_colorspace">
<description>
Queries the color space of a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Color space.
</return>
</function>

<function name="gdk_pixbuf_scale_simple">
<description>
Create a new #GdkPixbuf containing a copy of @src scaled to
@dest_width x @dest_height. Leaves @src unaffected.  @interp_type
should be #GDK_INTERP_NEAREST if you want maximum speed (but when
scaling down #GDK_INTERP_NEAREST is usually unusably ugly).  The
default @interp_type should be #GDK_INTERP_BILINEAR which offers
reasonable quality and speed.

You can scale a sub-portion of @src by creating a sub-pixbuf
pointing into @src; see gdk_pixbuf_new_subpixbuf().

For more complicated scaling/compositing see gdk_pixbuf_scale()
and gdk_pixbuf_composite().


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="dest_width">
<parameter_description> the width of destination image
</parameter_description>
</parameter>
<parameter name="dest_height">
<parameter_description> the height of destination image
</parameter_description>
</parameter>
<parameter name="interp_type">
<parameter_description> the interpolation type for the transformation.
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkPixbuf, or %NULL if not enough memory could be
allocated for it.
</return>
</function>

<function name="gdk_pixbuf_save_to_bufferv">
<description>
Saves pixbuf to a new buffer in format @type, which is currently &quot;jpeg&quot;,
&quot;tiff&quot;, &quot;png&quot;, &quot;ico&quot; or &quot;bmp&quot;.  See gdk_pixbuf_save_to_buffer() 
for more details.

Since: 2.4

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> location to receive a pointer to the new buffer.
</parameter_description>
</parameter>
<parameter name="buffer_size">
<parameter_description> location to receive the size of the new buffer.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format.
</parameter_description>
</parameter>
<parameter name="option_keys">
<parameter_description> name of options to set, %NULL-terminated
</parameter_description>
</parameter>
<parameter name="option_values">
<parameter_description> values for named options
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether an error was set

</return>
</function>

<function name="gdk_pixbuf_save">
<description>
Saves pixbuf to a file in format @type. By default, &quot;jpeg&quot;, &quot;png&quot;, &quot;ico&quot; 
and &quot;bmp&quot; are possible file formats to save in, but more formats may be
installed. The list of all writable formats can be determined in the 
following way:

|[
void add_if_writable (GdkPixbufFormat *data, GSList **list)
{
if (gdk_pixbuf_format_is_writable (data))
*list = g_slist_prepend (*list, data);
}

GSList *formats = gdk_pixbuf_get_formats ();
GSList *writable_formats = NULL;
g_slist_foreach (formats, add_if_writable, &amp;writable_formats);
g_slist_free (formats);
]|

If @error is set, %FALSE will be returned. Possible errors include 
those in the #GDK_PIXBUF_ERROR domain and those in the #G_FILE_ERROR domain.

The variable argument list should be %NULL-terminated; if not empty,
it should contain pairs of strings that modify the save
parameters. For example:
&lt;informalexample&gt;&lt;programlisting&gt;
gdk_pixbuf_save (pixbuf, handle, &quot;jpeg&quot;, &amp;error,
&quot;quality&quot;, &quot;100&quot;, NULL);
&lt;/programlisting&gt;&lt;/informalexample&gt;

Currently only few parameters exist. JPEG images can be saved with a
&quot;quality&quot; parameter; its value should be in the range [0,100].

Text chunks can be attached to PNG images by specifying parameters of
the form &quot;tEXt::key&quot;, where key is an ASCII string of length 1-79.
The values are UTF-8 encoded strings. The PNG compression level can
be specified using the &quot;compression&quot; parameter; it's value is in an
integer in the range of [0,9].

ICC color profiles can also be embedded into PNG and TIFF images.
The &quot;icc-profile&quot; value should be the complete ICC profile encoded
into base64.

&lt;informalexample&gt;&lt;programlisting&gt;
gchar *contents;
gchar *contents_encode;
gsize length;
g_file_get_contents (&quot;/home/hughsie/.color/icc/L225W.icm&quot;, &amp;contents, &amp;length, NULL);
contents_encode = g_base64_encode ((const guchar *) contents, length);
gdk_pixbuf_save (pixbuf, handle, &quot;png&quot;, &amp;error,
&quot;icc-profile&quot;, contents_encode,
NULL);
&lt;/programlisting&gt;&lt;/informalexample&gt;

TIFF images recognize a &quot;compression&quot; option which acceps an integer value.
Among the codecs are 1 None, 2 Huffman, 5 LZW, 7 JPEG and 8 Deflate, see
the libtiff documentation and tiff.h for all supported codec values.

ICO images can be saved in depth 16, 24, or 32, by using the &quot;depth&quot;
parameter. When the ICO saver is given &quot;x_hot&quot; and &quot;y_hot&quot; parameters,
it produces a CUR instead of an ICO.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> name of file to save.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> list of key-value save options
</parameter_description>
</parameter>
</parameters>
<return> whether an error was set
</return>
</function>

<function name="gdk_pixbuf_loader_close">
<description>
Informs a pixbuf loader that no further writes with
gdk_pixbuf_loader_write() will occur, so that it can free its
internal loading structures. Also, tries to parse any data that
hasn't yet been parsed; if the remaining data is partial or
corrupt, an error will be returned.  If %FALSE is returned, @error
will be set to an error from the #GDK_PIXBUF_ERROR or #G_FILE_ERROR
domains. If you're just cancelling a load rather than expecting it
to be finished, passing %NULL for @error to ignore it is
reasonable.

Remember that this does not unref the loader, so if you plan not to
use it anymore, please g_object_unref() it.


</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if all image data written so far was successfully
            passed out via the update_area signal
</return>
</function>

<function name="gdk_pixbuf_fill">
<description>
Clears a pixbuf to the given RGBA value, converting the RGBA value into
the pixbuf's pixel format. The alpha will be ignored if the pixbuf
doesn't have an alpha channel.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="pixel">
<parameter_description> RGBA pixel to clear to
(0xffffffff is opaque white, 0x00000000 transparent black)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_new_from_file">
<description>
Creates a new pixbuf by loading an image from a file.  The file format is
detected automatically. If %NULL is returned, then @error will be set.
Possible errors are in the #GDK_PIXBUF_ERROR and #G_FILE_ERROR domains.


</description>
<parameters>
<parameter name="filename">
<parameter_description> Name of file to load, in the GLib file name encoding
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1, or %NULL if
any of several error conditions occurred:  the file could not be opened,
there was no loader for the file's format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.
</return>
</function>

<function name="gdk_pixbuf_new_from_inline">
<description>
Create a #GdkPixbuf from a flat representation that is suitable for
storing as inline data in a program. This is useful if you want to
ship a program with images, but don't want to depend on any
external files.

gdk-pixbuf ships with a program called &lt;command&gt;gdk-pixbuf-csource&lt;/command&gt; 
which allows for conversion of #GdkPixbufs into such a inline representation.
In almost all cases, you should pass the &lt;option&gt;--raw&lt;/option&gt; flag to
&lt;command&gt;gdk-pixbuf-csource&lt;/command&gt;. A sample invocation would be:

&lt;informalexample&gt;&lt;programlisting&gt;
gdk-pixbuf-csource --raw --name=myimage_inline myimage.png
&lt;/programlisting&gt;&lt;/informalexample&gt;

For the typical case where the inline pixbuf is read-only static data,
you don't need to copy the pixel data unless you intend to write to
it, so you can pass %FALSE for @copy_pixels.  (If you pass 
&lt;option&gt;--rle&lt;/option&gt; to &lt;command&gt;gdk-pixbuf-csource&lt;/command&gt;, a copy 
will be made even if @copy_pixels is %FALSE, so using this option is 
generally a bad idea.)

If you create a pixbuf from const inline data compiled into your
program, it's probably safe to ignore errors and disable length checks, 
since things will always succeed:
&lt;informalexample&gt;&lt;programlisting&gt;
pixbuf = gdk_pixbuf_new_from_inline (-1, myimage_inline, FALSE, NULL);
&lt;/programlisting&gt;&lt;/informalexample&gt;

For non-const inline data, you could get out of memory. For untrusted 
inline data located at runtime, you could have corrupt inline data in 
addition.


</description>
<parameters>
<parameter name="data_length">
<parameter_description> Length in bytes of the @data argument or -1 to 
disable length checks
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Byte data containing a serialized #GdkPixdata structure
</parameter_description>
</parameter>
<parameter name="copy_pixels">
<parameter_description> Whether to copy the pixel data, or use direct pointers
@data for the resulting pixbuf
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError return location, may be %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> A newly-created #GdkPixbuf structure with a reference,
count of 1, or %NULL if an error occurred.
</return>
</function>

<function name="gdk_pixbuf_new_from_file_at_size">
<description>
Creates a new pixbuf by loading an image from a file.  
The file format is detected automatically. If %NULL is returned, then 
@error will be set. Possible errors are in the #GDK_PIXBUF_ERROR and 
#G_FILE_ERROR domains.

The image will be scaled to fit in the requested size, preserving
the image's aspect ratio. Note that the returned pixbuf may be smaller
than @width x @height, if the aspect ratio requires it. To load
and image at the requested size, regardless of aspect ratio, use
gdk_pixbuf_new_from_file_at_scale().

Since: 2.4

</description>
<parameters>
<parameter name="filename">
<parameter_description> Name of file to load, in the GLib file name encoding
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> The width the image should have or -1 to not constrain the width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> The height the image should have or -1 to not constrain the height
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1, or 
%NULL if any of several error conditions occurred:  the file could not 
be opened, there was no loader for the file's format, there was not 
enough memory to allocate the image buffer, or the image file contained 
invalid data.

</return>
</function>

<function name="gdk_pixbuf_copy">
<description>
Creates a new #GdkPixbuf with a copy of the information in the specified
@pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1, or %NULL if
not enough memory could be allocated.
</return>
</function>

<function name="gdk_pixbuf_composite">
<description>
Creates a transformation of the source image @src by scaling by
@scale_x and @scale_y then translating by @offset_x and @offset_y.
This gives an image in the coordinates of the destination pixbuf.
The rectangle (@dest_x, @dest_y, @dest_width, @dest_height)
is then composited onto the corresponding rectangle of the
original destination image.

When the destination rectangle contains parts not in the source 
image, the data at the edges of the source image is replicated
to infinity. 

&lt;figure id=&quot;pixbuf-composite-diagram&quot;&gt;
&lt;title&gt;Compositing of pixbufs&lt;/title&gt;
&lt;graphic fileref=&quot;composite.png&quot; format=&quot;PNG&quot;/&gt;
&lt;/figure&gt;

</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> the #GdkPixbuf into which to render the results
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> the left coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> the top coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_width">
<parameter_description> the width of the region to render
</parameter_description>
</parameter>
<parameter name="dest_height">
<parameter_description> the height of the region to render
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> the offset in the X direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> the offset in the Y direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> the scale factor in the X direction
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> the scale factor in the Y direction
</parameter_description>
</parameter>
<parameter name="interp_type">
<parameter_description> the interpolation type for the transformation.
</parameter_description>
</parameter>
<parameter name="overall_alpha">
<parameter_description> overall alpha for source image (0..255)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_format_get_mime_types">
<description>
Returns the mime types supported by the format.

Since: 2.2

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of mime types which must be freed with 
g_strfreev() when it is no longer needed.

</return>
</function>

<function name="gdk_pixbuf_unref">
<description>
Removes a reference from a pixbuf.

Deprecated: 2.0: Use g_object_unref().

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_loader_set_size">
<description>
Causes the image to be scaled while it is loaded. The desired
image size can be determined relative to the original size of
the image by calling gdk_pixbuf_loader_set_size() from a
signal handler for the ::size-prepared signal.

Attempts to set the desired image size  are ignored after the 
emission of the ::size-prepared signal.

Since: 2.2

</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> The desired width of the image being loaded.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> The desired height of the image being loaded.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_simple_anim_set_loop">
<description>
Sets whether @animation should loop indefinitely when it reaches the end.

Since: 2.18

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #GdkPixbufSimpleAnim
</parameter_description>
</parameter>
<parameter name="loop">
<parameter_description> whether to loop the animation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_save_to_callback">
<description>
Saves pixbuf in format @type by feeding the produced data to a 
callback. Can be used when you want to store the image to something 
other than a file, such as an in-memory buffer or a socket.  
If @error is set, %FALSE will be returned. Possible errors
include those in the #GDK_PIXBUF_ERROR domain and whatever the save
function generates.

See gdk_pixbuf_save() for more details.

Since: 2.4

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="save_func">
<parameter_description> a function that is called to save each block of data that
the save routine generates.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the save function.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> list of key-value save options
</parameter_description>
</parameter>
</parameters>
<return> whether an error was set

</return>
</function>

<function name="gdk_pixbuf_format_is_scalable">
<description>
Returns whether this image format is scalable. If a file is in a 
scalable format, it is preferable to load it at the desired size, 
rather than loading it at the default size and scaling the 
resulting pixbuf to the desired size.

Since: 2.6

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> whether this image format is scalable.

</return>
</function>

<function name="gdk_pixbuf_loader_new_with_type">
<description>
Creates a new pixbuf loader object that always attempts to parse
image data as if it were an image of type @image_type, instead of
identifying the type automatically. Useful if you want an error if
the image isn't the expected type, for loading image formats
that can't be reliably identified by looking at the data, or if
the user manually forces a specific type.

The list of supported image formats depends on what image loaders
are installed, but typically &quot;png&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;tiff&quot; and 
&quot;xpm&quot; are among the supported formats. To obtain the full list of
supported image formats, call gdk_pixbuf_format_get_name() on each 
of the #GdkPixbufFormat structs returned by gdk_pixbuf_get_formats().


</description>
<parameters>
<parameter name="image_type">
<parameter_description> name of the image format to be loaded with the image
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an allocated #GError, or %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf loader.
</return>
</function>

<function name="gdk_pixbuf_loader_get_animation">
<description>
Queries the #GdkPixbufAnimation that a pixbuf loader is currently creating.
In general it only makes sense to call this function after the &quot;area-prepared&quot;
signal has been emitted by the loader. If the loader doesn't have enough
bytes yet (hasn't emitted the &quot;area-prepared&quot; signal) this function will 
return %NULL.


</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader
</parameter_description>
</parameter>
</parameters>
<return> The #GdkPixbufAnimation that the loader is loading, or %NULL if
 not enough data has been read to determine the information.
</return>
</function>

<function name="gdk_pixbuf_animation_get_static_image">
<description>
If an animation is really just a plain image (has only one frame),
this function returns that image. If the animation is an animation,
this function returns a reasonable thing to display as a static
unanimated image, which might be the first frame, or something more
sophisticated. If an animation hasn't loaded any frames yet, this
function will return %NULL.


</description>
<parameters>
<parameter name="animation">
<parameter_description> a #GdkPixbufAnimation
</parameter_description>
</parameter>
</parameters>
<return> unanimated image representing the animation
</return>
</function>

<function name="gdk_pixbuf_get_bits_per_sample">
<description>
Queries the number of bits per color sample in a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Number of bits per color sample.
</return>
</function>

<function name="gdk_pixbuf_loader_get_pixbuf">
<description>
Queries the #GdkPixbuf that a pixbuf loader is currently creating.
In general it only makes sense to call this function after the
&quot;area-prepared&quot; signal has been emitted by the loader; this means
that enough data has been read to know the size of the image that
will be allocated.  If the loader has not received enough data via
gdk_pixbuf_loader_write(), then this function returns %NULL.  The
returned pixbuf will be the same in all future calls to the loader,
so simply calling g_object_ref() should be sufficient to continue
using it.  Additionally, if the loader is an animation, it will
return the &quot;static image&quot; of the animation
(see gdk_pixbuf_animation_get_static_image()).


</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader.
</parameter_description>
</parameter>
</parameters>
<return> The #GdkPixbuf that the loader is creating, or %NULL if not
enough data has been read to determine how to create the image buffer.
</return>
</function>

<function name="gdk_pixbuf_format_get_description">
<description>
Returns a description of the format.

Since: 2.2

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> a description of the format.

</return>
</function>

<function name="gdk_pixbuf_new_subpixbuf">
<description>
Creates a new pixbuf which represents a sub-region of
@src_pixbuf. The new pixbuf shares its pixels with the
original pixbuf, so writing to one affects both.
The new pixbuf holds a reference to @src_pixbuf, so
@src_pixbuf will not be finalized until the new pixbuf
is finalized.


</description>
<parameters>
<parameter name="src_pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> X coord in @src_pixbuf
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Y coord in @src_pixbuf
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of region in @src_pixbuf
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of region in @src_pixbuf
</parameter_description>
</parameter>
</parameters>
<return> a new pixbuf 
</return>
</function>

<function name="gdk_pixbuf_scale">
<description>
Creates a transformation of the source image @src by scaling by
@scale_x and @scale_y then translating by @offset_x and @offset_y,
then renders the rectangle (@dest_x, @dest_y, @dest_width,
@dest_height) of the resulting image onto the destination image
replacing the previous contents.

Try to use gdk_pixbuf_scale_simple() first, this function is
the industrial-strength power tool you can fall back to if
gdk_pixbuf_scale_simple() isn't powerful enough.

If the source rectangle overlaps the destination rectangle on the
same pixbuf, it will be overwritten during the scaling which
results in rendering artifacts.

</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> the #GdkPixbuf into which to render the results
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> the left coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> the top coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_width">
<parameter_description> the width of the region to render
</parameter_description>
</parameter>
<parameter name="dest_height">
<parameter_description> the height of the region to render
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> the offset in the X direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> the offset in the Y direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> the scale factor in the X direction
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> the scale factor in the Y direction
</parameter_description>
</parameter>
<parameter name="interp_type">
<parameter_description> the interpolation type for the transformation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_animation_unref">
<description>
Removes a reference from an animation.

Deprecated: 2.0: Use g_object_unref().

</description>
<parameters>
<parameter name="animation">
<parameter_description> An animation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_get_option">
<description>
Looks up @key in the list of options that may have been attached to the
@pixbuf when it was loaded, or that may have been attached by another
function using gdk_pixbuf_set_option().

For instance, the ANI loader provides &quot;Title&quot; and &quot;Artist&quot; options. 
The ICO, XBM, and XPM loaders provide &quot;x_hot&quot; and &quot;y_hot&quot; hot-spot 
options for cursor definitions. The PNG loader provides the tEXt ancillary
chunk key/value pairs as options. Since 2.12, the TIFF and JPEG loaders
return an &quot;orientation&quot; option string that corresponds to the embedded 
TIFF/Exif orientation tag (if present).


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a nul-terminated string.
</parameter_description>
</parameter>
</parameters>
<return> the value associated with @key. This is a nul-terminated 
string that should not be freed or %NULL if @key was not found.
</return>
</function>

<function name="gdk_pixbuf_composite_color">
<description>
Creates a transformation of the source image @src by scaling by
@scale_x and @scale_y then translating by @offset_x and @offset_y,
then composites the rectangle (@dest_x ,@dest_y, @dest_width,
@dest_height) of the resulting image with a checkboard of the
colors @color1 and @color2 and renders it onto the destination
image.

See gdk_pixbuf_composite_color_simple() for a simpler variant of this
function suitable for many tasks.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> the #GdkPixbuf into which to render the results
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> the left coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> the top coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_width">
<parameter_description> the width of the region to render
</parameter_description>
</parameter>
<parameter name="dest_height">
<parameter_description> the height of the region to render
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> the offset in the X direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> the offset in the Y direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> the scale factor in the X direction
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> the scale factor in the Y direction
</parameter_description>
</parameter>
<parameter name="interp_type">
<parameter_description> the interpolation type for the transformation.
</parameter_description>
</parameter>
<parameter name="overall_alpha">
<parameter_description> overall alpha for source image (0..255)
</parameter_description>
</parameter>
<parameter name="check_x">
<parameter_description> the X offset for the checkboard (origin of checkboard is at -@check_x, -@check_y)
</parameter_description>
</parameter>
<parameter name="check_y">
<parameter_description> the Y offset for the checkboard 
</parameter_description>
</parameter>
<parameter name="check_size">
<parameter_description> the size of checks in the checkboard (must be a power of two)
</parameter_description>
</parameter>
<parameter name="color1">
<parameter_description> the color of check at upper left
</parameter_description>
</parameter>
<parameter name="color2">
<parameter_description> the color of the other check
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixdata_to_csource">
<description>
Generates C source code suitable for compiling images directly 
into programs. 

gdk-pixbuf ships with a program called &lt;command&gt;gdk-pixbuf-csource&lt;/command&gt; 
which offers a command line interface to this function.


</description>
<parameters>
<parameter name="pixdata">
<parameter_description> a #GdkPixdata to convert to C source.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> used for naming generated data structures or macros.
</parameter_description>
</parameter>
<parameter name="dump_type">
<parameter_description> a #GdkPixdataDumpType determining the kind of C
source to be generated.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string containing the C source form
of @pixdata.
</return>
</function>

<function name="gdk_pixbuf_animation_iter_on_currently_loading_frame">
<description>
Used to determine how to respond to the area_updated signal on
#GdkPixbufLoader when loading an animation. area_updated is emitted
for an area of the frame currently streaming in to the loader. So if
you're on the currently loading frame, you need to redraw the screen for
the updated area.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdkPixbufAnimationIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the frame we're on is partially loaded, or the last frame
</return>
</function>

<function name="gdk_pixbuf_new_from_file_at_scale">
<description>
Creates a new pixbuf by loading an image from a file.  The file format is
detected automatically. If %NULL is returned, then @error will be set.
Possible errors are in the #GDK_PIXBUF_ERROR and #G_FILE_ERROR domains.
The image will be scaled to fit in the requested size, optionally preserving
the image's aspect ratio. 

When preserving the aspect ratio, a @width of -1 will cause the image
to be scaled to the exact given height, and a @height of -1 will cause
the image to be scaled to the exact given width. When not preserving
aspect ratio, a @width or @height of -1 means to not scale the image 
at all in that dimension. Negative values for @width and @height are 
allowed since 2.8.

Since: 2.6

</description>
<parameters>
<parameter name="filename">
<parameter_description> Name of file to load, in the GLib file name encoding
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> The width the image should have or -1 to not constrain the width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> The height the image should have or -1 to not constrain the height
</parameter_description>
</parameter>
<parameter name="preserve_aspect_ratio">
<parameter_description> %TRUE to preserve the image's aspect ratio
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1, or %NULL 
if any of several error conditions occurred:  the file could not be opened,
there was no loader for the file's format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.

</return>
</function>

<function name="gdk_pixbuf_get_width">
<description>
Queries the width of a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Width in pixels.
</return>
</function>

<function name="gdk_pixbuf_loader_new">
<description>
Creates a new pixbuf loader object.


</description>
<parameters>
</parameters>
<return> A newly-created pixbuf loader.
</return>
</function>

<function name="gdk_pixbuf_animation_is_static_image">
<description>
If you load a file with gdk_pixbuf_animation_new_from_file() and it turns
out to be a plain, unanimated image, then this function will return
%TRUE. Use gdk_pixbuf_animation_get_static_image() to retrieve
the image.


</description>
<parameters>
<parameter name="animation">
<parameter_description> a #GdkPixbufAnimation
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the &quot;animation&quot; was really just an image
</return>
</function>

<function name="gdk_pixbuf_format_get_name">
<description>
Returns the name of the format.

Since: 2.2

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> the name of the format. 

</return>
</function>

<function name="gdk_pixbuf_format_get_extensions">
<description>
Returns the filename extensions typically used for files in the 
given format.

Since: 2.2

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of filename extensions which must be
freed with g_strfreev() when it is no longer needed.

</return>
</function>

<function name="gdk_pixbuf_animation_new_from_file">
<description>
Creates a new animation by loading it from a file.  The file format is
detected automatically.  If the file's format does not support multi-frame
images, then an animation with a single frame will be created. Possible errors
are in the #GDK_PIXBUF_ERROR and #G_FILE_ERROR domains.


</description>
<parameters>
<parameter name="filename">
<parameter_description> Name of file to load, in the GLib file name encoding
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created animation with a reference count of 1, or %NULL
if any of several error conditions ocurred:  the file could not be opened,
there was no loader for the file's format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.
</return>
</function>

<function name="gdk_pixbuf_new_from_stream">
<description>
Creates a new pixbuf by loading an image from an input stream.  

The file format is detected automatically. If %NULL is returned, then 
@error will be set. The @cancellable can be used to abort the operation
from another thread. If the operation was cancelled, the error 
%GIO_ERROR_CANCELLED will be returned. Other possible errors are in 
the #GDK_PIXBUF_ERROR and %G_IO_ERROR domains. 

The stream is not closed.

Since: 2.14

</description>
<parameters>
<parameter name="stream">
<parameter_description>  a #GInputStream to load the pixbuf from
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf, or %NULL if any of several error 
conditions occurred: the file could not be opened, the image format is 
not supported, there was not enough memory to allocate the image buffer, 
the stream contained invalid data, or the operation was cancelled.

</return>
</function>

<function name="gdk_pixbuf_composite_color_simple">
<description>
Creates a new #GdkPixbuf by scaling @src to @dest_width x
@dest_height and compositing the result with a checkboard of colors
@color1 and @color2.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="dest_width">
<parameter_description> the width of destination image
</parameter_description>
</parameter>
<parameter name="dest_height">
<parameter_description> the height of destination image
</parameter_description>
</parameter>
<parameter name="interp_type">
<parameter_description> the interpolation type for the transformation.
</parameter_description>
</parameter>
<parameter name="overall_alpha">
<parameter_description> overall alpha for source image (0..255)
</parameter_description>
</parameter>
<parameter name="check_size">
<parameter_description> the size of checks in the checkboard (must be a power of two)
</parameter_description>
</parameter>
<parameter name="color1">
<parameter_description> the color of check at upper left
</parameter_description>
</parameter>
<parameter name="color2">
<parameter_description> the color of the other check
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkPixbuf, or %NULL if not enough memory could be
allocated for it.
</return>
</function>

<function name="gdk_pixdata_deserialize">
<description>
Deserializes (reconstruct) a #GdkPixdata structure from a byte stream.
The byte stream consists of a straightforward writeout of the
#GdkPixdata fields in network byte order, plus the @pixel_data
bytes the structure points to.
The @pixdata contents are reconstructed byte by byte and are checked
for validity. This function may fail with %GDK_PIXBUF_CORRUPT_IMAGE
or %GDK_PIXBUF_ERROR_UNKNOWN_TYPE.


</description>
<parameters>
<parameter name="pixdata">
<parameter_description> a #GdkPixdata structure to be filled in.
</parameter_description>
</parameter>
<parameter name="stream_length">
<parameter_description> length of the stream used for deserialization.
</parameter_description>
</parameter>
<parameter name="stream">
<parameter_description> stream of bytes containing a serialized #GdkPixdata structure.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError location to indicate failures (maybe %NULL to ignore errors).
</parameter_description>
</parameter>
</parameters>
<return> Upon successful deserialization %TRUE is returned,
%FALSE otherwise.
</return>
</function>

<function name="gdk_pixbuf_saturate_and_pixelate">
<description>
Modifies saturation and optionally pixelates @src, placing the result in
@dest. @src and @dest may be the same pixbuf with no ill effects.  If
@saturation is 1.0 then saturation is not changed. If it's less than 1.0,
saturation is reduced (the image turns toward grayscale); if greater than
1.0, saturation is increased (the image gets more vivid colors). If @pixelate
is %TRUE, then pixels are faded in a checkerboard pattern to create a
pixelated image. @src and @dest must have the same image format, size, and
rowstride.


</description>
<parameters>
<parameter name="src">
<parameter_description> source image
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> place to write modified version of @src
</parameter_description>
</parameter>
<parameter name="saturation">
<parameter_description> saturation factor
</parameter_description>
</parameter>
<parameter name="pixelate">
<parameter_description> whether to pixelate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixdata_serialize">
<description>
Serializes a #GdkPixdata structure into a byte stream.
The byte stream consists of a straightforward writeout of the
#GdkPixdata fields in network byte order, plus the @pixel_data
bytes the structure points to.


</description>
<parameters>
<parameter name="pixdata">
<parameter_description> a valid #GdkPixdata structure to serialize.
</parameter_description>
</parameter>
<parameter name="stream_length_p">
<parameter_description> location to store the resulting stream length in.
</parameter_description>
</parameter>
</parameters>
<return> A newly-allocated string containing the serialized
#GdkPixdata structure.
</return>
</function>

<function name="gdk_pixbuf_format_copy">
<description>
Creates a copy of @format

Since: 2.22

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> the newly allocated copy of a #GdkPixbufFormat. Use
gdk_pixbuf_format_free() to free the resources when done

</return>
</function>

<function name="gdk_pixbuf_set_option">
<description>
Attaches a key/value pair as an option to a #GdkPixbuf. If %key already
exists in the list of options attached to @pixbuf, the new value is 
ignored and %FALSE is returned.

Since: 2.2

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a nul-terminated string.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a nul-terminated string.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success.

</return>
</function>

<function name="gdk_pixbuf_format_free">
<description>
Frees the resources allocated when copying a #GdkPixbufFormat
using gdk_pixbuf_format_copy()

Since: 2.22

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_ref">
<description>
Adds a reference to a pixbuf.

Deprecated: 2.0: Use g_object_ref().

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> The same as the @pixbuf argument.

</return>
</function>

<function name="gdk_pixbuf_new">
<description>
Creates a new #GdkPixbuf structure and allocates a buffer for it.  The 
buffer has an optimal rowstride.  Note that the buffer is not cleared;
you will have to fill it completely yourself.


</description>
<parameters>
<parameter name="colorspace">
<parameter_description> Color space for image
</parameter_description>
</parameter>
<parameter name="has_alpha">
<parameter_description> Whether the image should have transparency information
</parameter_description>
</parameter>
<parameter name="bits_per_sample">
<parameter_description> Number of bits per color sample
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of image in pixels, must be &gt; 0
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of image in pixels, must be &gt; 0
</parameter_description>
</parameter>
</parameters>
<return> A newly-created #GdkPixbuf with a reference count of 1, or 
%NULL if not enough memory could be allocated for the image buffer.
</return>
</function>

<function name="gdk_pixbuf_animation_iter_advance">
<description>
Possibly advances an animation to a new frame. Chooses the frame based
on the start time passed to gdk_pixbuf_animation_get_iter().

@current_time would normally come from g_get_current_time(), and
must be greater than or equal to the time passed to
gdk_pixbuf_animation_get_iter(), and must increase or remain
unchanged each time gdk_pixbuf_animation_iter_get_pixbuf() is
called. That is, you can't go backward in time; animations only
play forward.

As a shortcut, pass %NULL for the current time and g_get_current_time()
will be invoked on your behalf. So you only need to explicitly pass
@current_time if you're doing something odd like playing the animation
at double speed.

If this function returns %FALSE, there's no need to update the animation
display, assuming the display had been rendered prior to advancing;
if %TRUE, you need to call gdk_animation_iter_get_pixbuf() and update the
display with the new pixbuf.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdkPixbufAnimationIter
</parameter_description>
</parameter>
<parameter name="current_time">
<parameter_description> current time
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the image may need updating

</return>
</function>

<function name="gdk_pixbuf_get_file_info">
<description>
Parses an image file far enough to determine its format and size.

Since: 2.4

</description>
<parameters>
<parameter name="filename">
<parameter_description> The name of the file to identify.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Return location for the width of the image, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Return location for the height of the image, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A #GdkPixbufFormat describing the image format of the file 
or %NULL if the image format wasn't recognized. The return value 
is owned by GdkPixbuf and should not be freed.

</return>
</function>

</root>
